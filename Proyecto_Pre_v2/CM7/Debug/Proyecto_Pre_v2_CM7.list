
Proyecto_Pre_v2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4a8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800d748  0800d748  0001d748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d84c  0800d84c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800d84c  0800d84c  0001d84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d854  0800d854  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d854  0800d854  0001d854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d858  0800d858  0001d858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  0800d85c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  24000084  0800d8e0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000840  0800d8e0  00020840  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030be3  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049a4  00000000  00000000  00050c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c48  00000000  00000000  00055640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ae0  00000000  00000000  00057288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d929  00000000  00000000  00058d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023740  00000000  00000000  00096691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019ad19  00000000  00000000  000b9dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00254aea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f18  00000000  00000000  00254b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000084 	.word	0x24000084
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d730 	.word	0x0800d730

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000088 	.word	0x24000088
 80002dc:	0800d730 	.word	0x0800d730

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <SystemInit+0x104>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a3e      	ldr	r2, [pc, #248]	; (800077c <SystemInit+0x104>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <SystemInit+0x104>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	4a3a      	ldr	r2, [pc, #232]	; (800077c <SystemInit+0x104>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0x108>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d807      	bhi.n	80006b4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <SystemInit+0x108>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f023 030f 	bic.w	r3, r3, #15
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <SystemInit+0x108>)
 80006ae:	f043 0307 	orr.w	r3, r3, #7
 80006b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <SystemInit+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x10c>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <SystemInit+0x10c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <SystemInit+0x10c>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	492e      	ldr	r1, [pc, #184]	; (8000784 <SystemInit+0x10c>)
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x110>)
 80006ce:	4013      	ands	r3, r2
 80006d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <SystemInit+0x108>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemInit+0x108>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f023 030f 	bic.w	r3, r3, #15
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <SystemInit+0x108>)
 80006e8:	f043 0307 	orr.w	r3, r3, #7
 80006ec:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemInit+0x10c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemInit+0x10c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemInit+0x10c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemInit+0x10c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemInit+0x114>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemInit+0x10c>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemInit+0x118>)
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <SystemInit+0x10c>)
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemInit+0x11c>)
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <SystemInit+0x10c>)
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <SystemInit+0x11c>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemInit+0x10c>)
 8000720:	2200      	movs	r2, #0
 8000722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <SystemInit+0x10c>)
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemInit+0x11c>)
 8000728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SystemInit+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <SystemInit+0x10c>)
 8000736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <SystemInit+0x10c>)
 800073e:	2200      	movs	r2, #0
 8000740:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x120>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <SystemInit+0x120>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x124>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <SystemInit+0x128>)
 8000754:	4013      	ands	r3, r2
 8000756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075a:	d202      	bcs.n	8000762 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x12c>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x130>)
 8000764:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000768:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SystemInit+0x104>)
 800076c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000770:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c4;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd(char cmd)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af02      	add	r7, sp, #8
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	f023 030f 	bic.w	r3, r3, #15
 80007bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	f043 030c 	orr.w	r3, r3, #12
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80007d8:	7bbb      	ldrb	r3, [r7, #14]
 80007da:	f043 030c 	orr.w	r3, r3, #12
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80007e2:	7bbb      	ldrb	r3, [r7, #14]
 80007e4:	f043 0308 	orr.w	r3, r3, #8
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007ec:	f107 0208 	add.w	r2, r7, #8
 80007f0:	2364      	movs	r3, #100	; 0x64
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2304      	movs	r3, #4
 80007f6:	214e      	movs	r1, #78	; 0x4e
 80007f8:	4803      	ldr	r0, [pc, #12]	; (8000808 <lcd_send_cmd+0x5c>)
 80007fa:	f005 fc4d 	bl	8006098 <HAL_I2C_Master_Transmit>
}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	24000114 	.word	0x24000114

0800080c <lcd_send_data>:

void lcd_send_data(char data)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af02      	add	r7, sp, #8
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f023 030f 	bic.w	r3, r3, #15
 800081c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f043 030d 	orr.w	r3, r3, #13
 800082a:	b2db      	uxtb	r3, r3
 800082c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	f043 0309 	orr.w	r3, r3, #9
 8000834:	b2db      	uxtb	r3, r3
 8000836:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000838:	7bbb      	ldrb	r3, [r7, #14]
 800083a:	f043 030d 	orr.w	r3, r3, #13
 800083e:	b2db      	uxtb	r3, r3
 8000840:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000842:	7bbb      	ldrb	r3, [r7, #14]
 8000844:	f043 0309 	orr.w	r3, r3, #9
 8000848:	b2db      	uxtb	r3, r3
 800084a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800084c:	f107 0208 	add.w	r2, r7, #8
 8000850:	2364      	movs	r3, #100	; 0x64
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2304      	movs	r3, #4
 8000856:	214e      	movs	r1, #78	; 0x4e
 8000858:	4803      	ldr	r0, [pc, #12]	; (8000868 <lcd_send_data+0x5c>)
 800085a:	f005 fc1d 	bl	8006098 <HAL_I2C_Master_Transmit>
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	24000114 	.word	0x24000114

0800086c <lcd_clear>:

void lcd_clear(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000872:	2080      	movs	r0, #128	; 0x80
 8000874:	f7ff ff9a 	bl	80007ac <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	e005      	b.n	800088a <lcd_clear+0x1e>
	{
		lcd_send_data(' ');
 800087e:	2020      	movs	r0, #32
 8000880:	f7ff ffc4 	bl	800080c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3301      	adds	r3, #1
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b45      	cmp	r3, #69	; 0x45
 800088e:	ddf6      	ble.n	800087e <lcd_clear+0x12>
	}
}
 8000890:	bf00      	nop
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800089e:	2032      	movs	r0, #50	; 0x32
 80008a0:	f001 fc4c 	bl	800213c <HAL_Delay>
	lcd_send_cmd (0x30);
 80008a4:	2030      	movs	r0, #48	; 0x30
 80008a6:	f7ff ff81 	bl	80007ac <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80008aa:	2005      	movs	r0, #5
 80008ac:	f001 fc46 	bl	800213c <HAL_Delay>
	lcd_send_cmd (0x30);
 80008b0:	2030      	movs	r0, #48	; 0x30
 80008b2:	f7ff ff7b 	bl	80007ac <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80008b6:	2001      	movs	r0, #1
 80008b8:	f001 fc40 	bl	800213c <HAL_Delay>
	lcd_send_cmd (0x30);
 80008bc:	2030      	movs	r0, #48	; 0x30
 80008be:	f7ff ff75 	bl	80007ac <lcd_send_cmd>
	HAL_Delay(10);
 80008c2:	200a      	movs	r0, #10
 80008c4:	f001 fc3a 	bl	800213c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80008c8:	2020      	movs	r0, #32
 80008ca:	f7ff ff6f 	bl	80007ac <lcd_send_cmd>
	HAL_Delay(10);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f001 fc34 	bl	800213c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80008d4:	2028      	movs	r0, #40	; 0x28
 80008d6:	f7ff ff69 	bl	80007ac <lcd_send_cmd>
	HAL_Delay(1);
 80008da:	2001      	movs	r0, #1
 80008dc:	f001 fc2e 	bl	800213c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80008e0:	2008      	movs	r0, #8
 80008e2:	f7ff ff63 	bl	80007ac <lcd_send_cmd>
	HAL_Delay(1);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f001 fc28 	bl	800213c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff ff5d 	bl	80007ac <lcd_send_cmd>
	HAL_Delay(1);
 80008f2:	2001      	movs	r0, #1
 80008f4:	f001 fc22 	bl	800213c <HAL_Delay>
	HAL_Delay(1);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f001 fc1f 	bl	800213c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80008fe:	2006      	movs	r0, #6
 8000900:	f7ff ff54 	bl	80007ac <lcd_send_cmd>
	HAL_Delay(1);
 8000904:	2001      	movs	r0, #1
 8000906:	f001 fc19 	bl	800213c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800090a:	200c      	movs	r0, #12
 800090c:	f7ff ff4e 	bl	80007ac <lcd_send_cmd>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800091c:	e006      	b.n	800092c <lcd_send_string+0x18>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	1c5a      	adds	r2, r3, #1
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ff70 	bl	800080c <lcd_send_data>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1f4      	bne.n	800091e <lcd_send_string+0xa>
}
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800094a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800094c:	bf00      	nop
 800094e:	4b9c      	ldr	r3, [pc, #624]	; (8000bc0 <main+0x280>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000956:	2b00      	cmp	r3, #0
 8000958:	d004      	beq.n	8000964 <main+0x24>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	1e5a      	subs	r2, r3, #1
 800095e:	607a      	str	r2, [r7, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	dcf4      	bgt.n	800094e <main+0xe>
  if ( timeout < 0 )
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	da01      	bge.n	800096e <main+0x2e>
  {
  Error_Handler();
 800096a:	f000 fffb 	bl	8001964 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096e:	f001 fb53 	bl	8002018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000972:	f000 f955 	bl	8000c20 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000976:	4b92      	ldr	r3, [pc, #584]	; (8000bc0 <main+0x280>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	4a90      	ldr	r2, [pc, #576]	; (8000bc0 <main+0x280>)
 800097e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000986:	4b8e      	ldr	r3, [pc, #568]	; (8000bc0 <main+0x280>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000994:	2000      	movs	r0, #0
 8000996:	f005 fac1 	bl	8005f1c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800099a:	2100      	movs	r1, #0
 800099c:	2000      	movs	r0, #0
 800099e:	f005 fad7 	bl	8005f50 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009a8:	bf00      	nop
 80009aa:	4b85      	ldr	r3, [pc, #532]	; (8000bc0 <main+0x280>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d104      	bne.n	80009c0 <main+0x80>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	1e5a      	subs	r2, r3, #1
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	dcf4      	bgt.n	80009aa <main+0x6a>
if ( timeout < 0 )
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da01      	bge.n	80009ca <main+0x8a>
{
Error_Handler();
 80009c6:	f000 ffcd 	bl	8001964 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ca:	f000 fc23 	bl	8001214 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009ce:	f000 fb83 	bl	80010d8 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80009d2:	f000 fbff 	bl	80011d4 <MX_DMA_Init>
  MX_ADC1_Init();
 80009d6:	f000 f9a7 	bl	8000d28 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009da:	f000 fbc9 	bl	8001170 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 80009de:	f000 fa1d 	bl	8000e1c <MX_I2C4_Init>
  MX_TIM1_Init();
 80009e2:	f000 fa5b 	bl	8000e9c <MX_TIM1_Init>
  MX_TIM5_Init();
 80009e6:	f000 fb05 	bl	8000ff4 <MX_TIM5_Init>
  MX_TIM13_Init();
 80009ea:	f000 fb51 	bl	8001090 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  	lcd_init();
 80009ee:	f7ff ff54 	bl	800089a <lcd_init>
  	MPU6050_init();
 80009f2:	f000 fcaf 	bl	8001354 <MPU6050_init>
  	TIM1->CCR2 = 100;
 80009f6:	4b73      	ldr	r3, [pc, #460]	; (8000bc4 <main+0x284>)
 80009f8:	2264      	movs	r2, #100	; 0x64
 80009fa:	639a      	str	r2, [r3, #56]	; 0x38
  	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80009fc:	2104      	movs	r1, #4
 80009fe:	4872      	ldr	r0, [pc, #456]	; (8000bc8 <main+0x288>)
 8000a00:	f009 fd1e 	bl	800a440 <HAL_TIM_PWM_Start>
  	HAL_TIM_Base_Start_IT(&htim13);
 8000a04:	4871      	ldr	r0, [pc, #452]	; (8000bcc <main+0x28c>)
 8000a06:	f009 fc49 	bl	800a29c <HAL_TIM_Base_Start_IT>
  	m1 = (RPM_MAX - RPM_MIN)/(TEMP_MAX-TEMP_MIN);
 8000a0a:	4b71      	ldr	r3, [pc, #452]	; (8000bd0 <main+0x290>)
 8000a0c:	4a71      	ldr	r2, [pc, #452]	; (8000bd4 <main+0x294>)
 8000a0e:	601a      	str	r2, [r3, #0]
  	b1 = -m1*TEMP_MIN+RPM_MIN;
 8000a10:	4b6f      	ldr	r3, [pc, #444]	; (8000bd0 <main+0x290>)
 8000a12:	edd3 7a00 	vldr	s15, [r3]
 8000a16:	eef1 7a67 	vneg.f32	s15, s15
 8000a1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a1e:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8000bb0 <main+0x270>
 8000a22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a26:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8000bb8 <main+0x278>
 8000a2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000a2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a32:	4b69      	ldr	r3, [pc, #420]	; (8000bd8 <main+0x298>)
 8000a34:	edc3 7a00 	vstr	s15, [r3]
  	m2 = (PWM_MAX - PWM_MIN)/(RPM_MAX - RPM_MIN);
 8000a38:	4b68      	ldr	r3, [pc, #416]	; (8000bdc <main+0x29c>)
 8000a3a:	f04f 0200 	mov.w	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
  	b2 = -m2*RPM_MIN+PWM_MIN;
 8000a40:	4b66      	ldr	r3, [pc, #408]	; (8000bdc <main+0x29c>)
 8000a42:	edd3 7a00 	vldr	s15, [r3]
 8000a46:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8000be0 <main+0x2a0>
 8000a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a4e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8000be4 <main+0x2a4>
 8000a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a56:	4b64      	ldr	r3, [pc, #400]	; (8000be8 <main+0x2a8>)
 8000a58:	edc3 7a00 	vstr	s15, [r3]
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcData, 1);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4963      	ldr	r1, [pc, #396]	; (8000bec <main+0x2ac>)
 8000a60:	4863      	ldr	r0, [pc, #396]	; (8000bf0 <main+0x2b0>)
 8000a62:	f001 ff23 	bl	80028ac <HAL_ADC_Start_DMA>
      HAL_TIM_Base_Start_IT(&htim13);
 8000a66:	4859      	ldr	r0, [pc, #356]	; (8000bcc <main+0x28c>)
 8000a68:	f009 fc18 	bl	800a29c <HAL_TIM_Base_Start_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  key = leerTeclado();
 8000a6c:	f000 fd08 	bl	8001480 <leerTeclado>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b5f      	ldr	r3, [pc, #380]	; (8000bf4 <main+0x2b4>)
 8000a76:	701a      	strb	r2, [r3, #0]
	  		if (key!= 0x16)
 8000a78:	4b5e      	ldr	r3, [pc, #376]	; (8000bf4 <main+0x2b4>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b16      	cmp	r3, #22
 8000a7e:	d004      	beq.n	8000a8a <main+0x14a>
	  		{
	  		procesarTeclado(key);
 8000a80:	4b5c      	ldr	r3, [pc, #368]	; (8000bf4 <main+0x2b4>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fe7d 	bl	8001784 <procesarTeclado>
	  		//lcd_send_string(temp_buff[0]);
	  		}
	  		HAL_Delay(200);
 8000a8a:	20c8      	movs	r0, #200	; 0xc8
 8000a8c:	f001 fb56 	bl	800213c <HAL_Delay>

	  		err_RPM[0] = err_RPM[1];
 8000a90:	4b59      	ldr	r3, [pc, #356]	; (8000bf8 <main+0x2b8>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a58      	ldr	r2, [pc, #352]	; (8000bf8 <main+0x2b8>)
 8000a96:	6013      	str	r3, [r2, #0]
	  		err_RPM[1] = TMP_2_RPM(temps[1] - temps[0]);
 8000a98:	4b58      	ldr	r3, [pc, #352]	; (8000bfc <main+0x2bc>)
 8000a9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000a9e:	4b57      	ldr	r3, [pc, #348]	; (8000bfc <main+0x2bc>)
 8000aa0:	edd3 7a00 	vldr	s15, [r3]
 8000aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8000aac:	f000 fde0 	bl	8001670 <TMP_2_RPM>
 8000ab0:	eef0 7a40 	vmov.f32	s15, s0
 8000ab4:	4b50      	ldr	r3, [pc, #320]	; (8000bf8 <main+0x2b8>)
 8000ab6:	edc3 7a01 	vstr	s15, [r3, #4]
	  		RPMS[1] = RPMS[1] + K_pr*err_RPM[1] + (K_d/FREQ_M)*(err_RPM[1]-err_RPM[0]);
 8000aba:	4b51      	ldr	r3, [pc, #324]	; (8000c00 <main+0x2c0>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	ee07 3a90 	vmov	s15, r3
 8000ac2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ac6:	4b4c      	ldr	r3, [pc, #304]	; (8000bf8 <main+0x2b8>)
 8000ac8:	edd3 6a01 	vldr	s13, [r3, #4]
 8000acc:	4b4d      	ldr	r3, [pc, #308]	; (8000c04 <main+0x2c4>)
 8000ace:	edd3 7a00 	vldr	s15, [r3]
 8000ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ad6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ada:	4b4b      	ldr	r3, [pc, #300]	; (8000c08 <main+0x2c8>)
 8000adc:	edd3 7a00 	vldr	s15, [r3]
 8000ae0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8000be4 <main+0x2a4>
 8000ae4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8000ae8:	4b43      	ldr	r3, [pc, #268]	; (8000bf8 <main+0x2b8>)
 8000aea:	ed93 6a01 	vldr	s12, [r3, #4]
 8000aee:	4b42      	ldr	r3, [pc, #264]	; (8000bf8 <main+0x2b8>)
 8000af0:	edd3 7a00 	vldr	s15, [r3]
 8000af4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000af8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b04:	ee17 2a90 	vmov	r2, s15
 8000b08:	4b3d      	ldr	r3, [pc, #244]	; (8000c00 <main+0x2c0>)
 8000b0a:	605a      	str	r2, [r3, #4]

	  		error = RPM_2_PWM(RPMS[1] - RPMS[0]);
 8000b0c:	4b3c      	ldr	r3, [pc, #240]	; (8000c00 <main+0x2c0>)
 8000b0e:	685a      	ldr	r2, [r3, #4]
 8000b10:	4b3b      	ldr	r3, [pc, #236]	; (8000c00 <main+0x2c0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fdc6 	bl	80016a8 <RPM_2_PWM>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a3b      	ldr	r2, [pc, #236]	; (8000c0c <main+0x2cc>)
 8000b20:	6013      	str	r3, [r2, #0]
	  		PWM = PWM + K_pp*error;
 8000b22:	4b3b      	ldr	r3, [pc, #236]	; (8000c10 <main+0x2d0>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	ee07 3a90 	vmov	s15, r3
 8000b2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b2e:	4b37      	ldr	r3, [pc, #220]	; (8000c0c <main+0x2cc>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	ee07 3a90 	vmov	s15, r3
 8000b36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b3a:	4b36      	ldr	r3, [pc, #216]	; (8000c14 <main+0x2d4>)
 8000b3c:	edd3 7a00 	vldr	s15, [r3]
 8000b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b4c:	ee17 2a90 	vmov	r2, s15
 8000b50:	4b2f      	ldr	r3, [pc, #188]	; (8000c10 <main+0x2d0>)
 8000b52:	601a      	str	r2, [r3, #0]


	  	   if (PWM > PWM_MAX)
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <main+0x2d0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b64      	cmp	r3, #100	; 0x64
 8000b5a:	dd03      	ble.n	8000b64 <main+0x224>
	  		PWM = PWM_MAX;
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <main+0x2d0>)
 8000b5e:	2264      	movs	r2, #100	; 0x64
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	e008      	b.n	8000b76 <main+0x236>
	  	   else if (PWM < PWM_MIN)
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <main+0x2d0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000b6c:	da03      	bge.n	8000b76 <main+0x236>
	  		PWM = PWM_MIN;
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <main+0x2d0>)
 8000b70:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000b74:	601a      	str	r2, [r3, #0]

	  	   if (RPM > RPM_MAX)
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <main+0x2d8>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	dd04      	ble.n	8000b8c <main+0x24c>
	  		RPM = RPM_MAX;
 8000b82:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <main+0x2d8>)
 8000b84:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	e007      	b.n	8000b9c <main+0x25c>
	  	   else if (RPM < RPM_MIN)
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <main+0x2d8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <main+0x2dc>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	da02      	bge.n	8000b9c <main+0x25c>
	  		RPM = RPM_MIN;
 8000b96:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <main+0x2d8>)
 8000b98:	4a20      	ldr	r2, [pc, #128]	; (8000c1c <main+0x2dc>)
 8000b9a:	601a      	str	r2, [r3, #0]

	  	  TIM1->CCR2 = PWM;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <main+0x2d0>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <main+0x284>)
 8000ba2:	639a      	str	r2, [r3, #56]	; 0x38
	  	  HAL_Delay(100);
 8000ba4:	2064      	movs	r0, #100	; 0x64
 8000ba6:	f001 fac9 	bl	800213c <HAL_Delay>
	  key = leerTeclado();
 8000baa:	e75f      	b.n	8000a6c <main+0x12c>
 8000bac:	f3af 8000 	nop.w
 8000bb0:	00000000 	.word	0x00000000
 8000bb4:	c0440000 	.word	0xc0440000
 8000bb8:	00000000 	.word	0x00000000
 8000bbc:	40a9c800 	.word	0x40a9c800
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	240007b8 	.word	0x240007b8
 8000bcc:	240006e0 	.word	0x240006e0
 8000bd0:	24000818 	.word	0x24000818
 8000bd4:	42840000 	.word	0x42840000
 8000bd8:	24000618 	.word	0x24000618
 8000bdc:	24000620 	.word	0x24000620
 8000be0:	454e4000 	.word	0x454e4000
 8000be4:	42c80000 	.word	0x42c80000
 8000be8:	24000168 	.word	0x24000168
 8000bec:	24000106 	.word	0x24000106
 8000bf0:	24000678 	.word	0x24000678
 8000bf4:	24000804 	.word	0x24000804
 8000bf8:	24000160 	.word	0x24000160
 8000bfc:	24000808 	.word	0x24000808
 8000c00:	240007b0 	.word	0x240007b0
 8000c04:	24000010 	.word	0x24000010
 8000c08:	24000014 	.word	0x24000014
 8000c0c:	24000814 	.word	0x24000814
 8000c10:	24000810 	.word	0x24000810
 8000c14:	2400000c 	.word	0x2400000c
 8000c18:	24000674 	.word	0x24000674
 8000c1c:	fffff31c 	.word	0xfffff31c

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b09c      	sub	sp, #112	; 0x70
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	224c      	movs	r2, #76	; 0x4c
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00c f948 	bl	800cec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2220      	movs	r2, #32
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00c f942 	bl	800cec4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c40:	2004      	movs	r0, #4
 8000c42:	f006 f947 	bl	8006ed4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <SystemClock_Config+0xfc>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4a33      	ldr	r2, [pc, #204]	; (8000d1c <SystemClock_Config+0xfc>)
 8000c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <SystemClock_Config+0xfc>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <SystemClock_Config+0x100>)
 8000c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c64:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <SystemClock_Config+0x100>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <SystemClock_Config+0x100>)
 8000c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c78:	bf00      	nop
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <SystemClock_Config+0xfc>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c86:	d1f8      	bne.n	8000c7a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <SystemClock_Config+0x104>)
 8000c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8c:	f023 0303 	bic.w	r3, r3, #3
 8000c90:	4a24      	ldr	r2, [pc, #144]	; (8000d24 <SystemClock_Config+0x104>)
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000cae:	2378      	movs	r3, #120	; 0x78
 8000cb0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f006 f96a 	bl	8006fa8 <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000cda:	f000 fe43 	bl	8001964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	233f      	movs	r3, #63	; 0x3f
 8000ce0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cea:	2308      	movs	r3, #8
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cee:	2340      	movs	r3, #64	; 0x40
 8000cf0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cfc:	2340      	movs	r3, #64	; 0x40
 8000cfe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2104      	movs	r1, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f006 fd5f 	bl	80077c8 <HAL_RCC_ClockConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000d10:	f000 fe28 	bl	8001964 <Error_Handler>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3770      	adds	r7, #112	; 0x70
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	58024800 	.word	0x58024800
 8000d20:	58000400 	.word	0x58000400
 8000d24:	58024400 	.word	0x58024400

08000d28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d4c:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d4e:	4a31      	ldr	r2, [pc, #196]	; (8000e14 <MX_ADC1_Init+0xec>)
 8000d50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000d52:	4b2f      	ldr	r3, [pc, #188]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d54:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000d58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d5c:	220c      	movs	r2, #12
 8000d5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d60:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d68:	2208      	movs	r2, #8
 8000d6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d6c:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000d78:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d7e:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000d90:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d92:	2203      	movs	r2, #3
 8000d94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d96:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000daa:	4819      	ldr	r0, [pc, #100]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000dac:	f001 fbde 	bl	800256c <HAL_ADC_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000db6:	f000 fdd5 	bl	8001964 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4812      	ldr	r0, [pc, #72]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000dc6:	f002 fbe7 	bl	8003598 <HAL_ADCEx_MultiModeConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000dd0:	f000 fdc8 	bl	8001964 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_ADC1_Init+0xf0>)
 8000dd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd8:	2306      	movs	r3, #6
 8000dda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000de4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000de6:	2304      	movs	r3, #4
 8000de8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000df8:	f001 fe30 	bl	8002a5c <HAL_ADC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000e02:	f000 fdaf 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	3728      	adds	r7, #40	; 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	24000678 	.word	0x24000678
 8000e14:	40022000 	.word	0x40022000
 8000e18:	08600004 	.word	0x08600004

08000e1c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <MX_I2C4_Init+0x74>)
 8000e22:	4a1c      	ldr	r2, [pc, #112]	; (8000e94 <MX_I2C4_Init+0x78>)
 8000e24:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_I2C4_Init+0x74>)
 8000e28:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <MX_I2C4_Init+0x7c>)
 8000e2a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <MX_I2C4_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <MX_I2C4_Init+0x74>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_I2C4_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_I2C4_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <MX_I2C4_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_I2C4_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_I2C4_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000e56:	480e      	ldr	r0, [pc, #56]	; (8000e90 <MX_I2C4_Init+0x74>)
 8000e58:	f005 f88e 	bl	8005f78 <HAL_I2C_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e62:	f000 fd7f 	bl	8001964 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4809      	ldr	r0, [pc, #36]	; (8000e90 <MX_I2C4_Init+0x74>)
 8000e6a:	f005 fe53 	bl	8006b14 <HAL_I2CEx_ConfigAnalogFilter>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000e74:	f000 fd76 	bl	8001964 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_I2C4_Init+0x74>)
 8000e7c:	f005 fe95 	bl	8006baa <HAL_I2CEx_ConfigDigitalFilter>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000e86:	f000 fd6d 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	24000114 	.word	0x24000114
 8000e94:	58001c00 	.word	0x58001c00
 8000e98:	307075b1 	.word	0x307075b1

08000e9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b09a      	sub	sp, #104	; 0x68
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ebc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
 8000ecc:	615a      	str	r2, [r3, #20]
 8000ece:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	222c      	movs	r2, #44	; 0x2c
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f00b fff4 	bl	800cec4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000edc:	4b43      	ldr	r3, [pc, #268]	; (8000fec <MX_TIM1_Init+0x150>)
 8000ede:	4a44      	ldr	r2, [pc, #272]	; (8000ff0 <MX_TIM1_Init+0x154>)
 8000ee0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 239;
 8000ee2:	4b42      	ldr	r3, [pc, #264]	; (8000fec <MX_TIM1_Init+0x150>)
 8000ee4:	22ef      	movs	r2, #239	; 0xef
 8000ee6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b40      	ldr	r3, [pc, #256]	; (8000fec <MX_TIM1_Init+0x150>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000eee:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <MX_TIM1_Init+0x150>)
 8000ef0:	2264      	movs	r2, #100	; 0x64
 8000ef2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef4:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <MX_TIM1_Init+0x150>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000efa:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <MX_TIM1_Init+0x150>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f00:	4b3a      	ldr	r3, [pc, #232]	; (8000fec <MX_TIM1_Init+0x150>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f06:	4839      	ldr	r0, [pc, #228]	; (8000fec <MX_TIM1_Init+0x150>)
 8000f08:	f009 f970 	bl	800a1ec <HAL_TIM_Base_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f12:	f000 fd27 	bl	8001964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f20:	4619      	mov	r1, r3
 8000f22:	4832      	ldr	r0, [pc, #200]	; (8000fec <MX_TIM1_Init+0x150>)
 8000f24:	f009 fdc4 	bl	800aab0 <HAL_TIM_ConfigClockSource>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f2e:	f000 fd19 	bl	8001964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f32:	482e      	ldr	r0, [pc, #184]	; (8000fec <MX_TIM1_Init+0x150>)
 8000f34:	f009 fa22 	bl	800a37c <HAL_TIM_PWM_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f3e:	f000 fd11 	bl	8001964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f52:	4619      	mov	r1, r3
 8000f54:	4825      	ldr	r0, [pc, #148]	; (8000fec <MX_TIM1_Init+0x150>)
 8000f56:	f00a faf3 	bl	800b540 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000f60:	f000 fd00 	bl	8001964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f64:	2360      	movs	r3, #96	; 0x60
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f70:	2300      	movs	r3, #0
 8000f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f84:	2204      	movs	r2, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4818      	ldr	r0, [pc, #96]	; (8000fec <MX_TIM1_Init+0x150>)
 8000f8a:	f009 fc81 	bl	800a890 <HAL_TIM_PWM_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000f94:	f000 fce6 	bl	8001964 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <MX_TIM1_Init+0x150>)
 8000fce:	f00a fb3f 	bl	800b650 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000fd8:	f000 fcc4 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <MX_TIM1_Init+0x150>)
 8000fde:	f000 fe49 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 8000fe2:	bf00      	nop
 8000fe4:	3768      	adds	r7, #104	; 0x68
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	240007b8 	.word	0x240007b8
 8000ff0:	40010000 	.word	0x40010000

08000ff4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <MX_TIM5_Init+0x94>)
 8001014:	4a1d      	ldr	r2, [pc, #116]	; (800108c <MX_TIM5_Init+0x98>)
 8001016:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_TIM5_Init+0x94>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_TIM5_Init+0x94>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_TIM5_Init+0x94>)
 8001026:	f04f 32ff 	mov.w	r2, #4294967295
 800102a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_TIM5_Init+0x94>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_TIM5_Init+0x94>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001038:	4813      	ldr	r0, [pc, #76]	; (8001088 <MX_TIM5_Init+0x94>)
 800103a:	f009 f8d7 	bl	800a1ec <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001044:	f000 fc8e 	bl	8001964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <MX_TIM5_Init+0x94>)
 8001056:	f009 fd2b 	bl	800aab0 <HAL_TIM_ConfigClockSource>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001060:	f000 fc80 	bl	8001964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_TIM5_Init+0x94>)
 8001072:	f00a fa65 	bl	800b540 <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800107c:	f000 fc72 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	24000628 	.word	0x24000628
 800108c:	40000c00 	.word	0x40000c00

08001090 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_TIM13_Init+0x40>)
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <MX_TIM13_Init+0x44>)
 8001098:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 47999;
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <MX_TIM13_Init+0x40>)
 800109c:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80010a0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_TIM13_Init+0x40>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 5000;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_TIM13_Init+0x40>)
 80010aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ae:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <MX_TIM13_Init+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_TIM13_Init+0x40>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_TIM13_Init+0x40>)
 80010be:	f009 f895 	bl	800a1ec <HAL_TIM_Base_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80010c8:	f000 fc4c 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	240006e0 	.word	0x240006e0
 80010d4:	40001c00 	.word	0x40001c00

080010d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <MX_USART3_UART_Init+0x90>)
 80010de:	4a23      	ldr	r2, [pc, #140]	; (800116c <MX_USART3_UART_Init+0x94>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <MX_USART3_UART_Init+0x90>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_USART3_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_USART3_UART_Init+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_USART3_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_USART3_UART_Init+0x90>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_USART3_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_USART3_UART_Init+0x90>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_USART3_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USART3_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_USART3_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001120:	4811      	ldr	r0, [pc, #68]	; (8001168 <MX_USART3_UART_Init+0x90>)
 8001122:	f00a fb31 	bl	800b788 <HAL_UART_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800112c:	f000 fc1a 	bl	8001964 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001130:	2100      	movs	r1, #0
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_USART3_UART_Init+0x90>)
 8001134:	f00b fb14 	bl	800c760 <HAL_UARTEx_SetTxFifoThreshold>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800113e:	f000 fc11 	bl	8001964 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001142:	2100      	movs	r1, #0
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <MX_USART3_UART_Init+0x90>)
 8001146:	f00b fb49 	bl	800c7dc <HAL_UARTEx_SetRxFifoThreshold>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001150:	f000 fc08 	bl	8001964 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_USART3_UART_Init+0x90>)
 8001156:	f00b faca 	bl	800c6ee <HAL_UARTEx_DisableFifoMode>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001160:	f000 fc00 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	24000174 	.word	0x24000174
 800116c:	40004800 	.word	0x40004800

08001170 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001176:	4a16      	ldr	r2, [pc, #88]	; (80011d0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001178:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800117c:	2209      	movs	r2, #9
 800117e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001182:	2202      	movs	r2, #2
 8001184:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800118e:	2202      	movs	r2, #2
 8001190:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b8:	f005 fd43 	bl	8006c42 <HAL_PCD_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80011c2:	f000 fbcf 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	24000208 	.word	0x24000208
 80011d0:	40080000 	.word	0x40080000

080011d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <MX_DMA_Init+0x3c>)
 80011dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011e0:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <MX_DMA_Init+0x3c>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_DMA_Init+0x3c>)
 80011ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	200b      	movs	r0, #11
 80011fe:	f002 fb84 	bl	800390a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001202:	200b      	movs	r0, #11
 8001204:	f002 fb9b 	bl	800393e <HAL_NVIC_EnableIRQ>

}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	58024400 	.word	0x58024400

08001214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	4b30      	ldr	r3, [pc, #192]	; (80012dc <MX_GPIO_Init+0xc8>)
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001220:	4a2e      	ldr	r2, [pc, #184]	; (80012dc <MX_GPIO_Init+0xc8>)
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <MX_GPIO_Init+0xc8>)
 800122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001238:	4b28      	ldr	r3, [pc, #160]	; (80012dc <MX_GPIO_Init+0xc8>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123e:	4a27      	ldr	r2, [pc, #156]	; (80012dc <MX_GPIO_Init+0xc8>)
 8001240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001244:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <MX_GPIO_Init+0xc8>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001256:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MX_GPIO_Init+0xc8>)
 8001258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125c:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <MX_GPIO_Init+0xc8>)
 800125e:	f043 0320 	orr.w	r3, r3, #32
 8001262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <MX_GPIO_Init+0xc8>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	f003 0320 	and.w	r3, r3, #32
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_GPIO_Init+0xc8>)
 8001276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127a:	4a18      	ldr	r2, [pc, #96]	; (80012dc <MX_GPIO_Init+0xc8>)
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_GPIO_Init+0xc8>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_GPIO_Init+0xc8>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	4a10      	ldr	r2, [pc, #64]	; (80012dc <MX_GPIO_Init+0xc8>)
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_GPIO_Init+0xc8>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	f003 0308 	and.w	r3, r3, #8
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <MX_GPIO_Init+0xc8>)
 80012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <MX_GPIO_Init+0xc8>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_GPIO_Init+0xc8>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

}
 80012ce:	bf00      	nop
 80012d0:	371c      	adds	r7, #28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	58024400 	.word	0x58024400

080012e0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	uart_buf_len = sprintf(uart_buf, "prueba3\n");
 80012e8:	4913      	ldr	r1, [pc, #76]	; (8001338 <HAL_ADC_ConvCpltCallback+0x58>)
 80012ea:	4814      	ldr	r0, [pc, #80]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 80012ec:	f00b fdf2 	bl	800ced4 <siprintf>
 80012f0:	4603      	mov	r3, r0
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_ADC_ConvCpltCallback+0x60>)
 80012f6:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_ADC_ConvCpltCallback+0x60>)
 80012fa:	881a      	ldrh	r2, [r3, #0]
 80012fc:	2364      	movs	r3, #100	; 0x64
 80012fe:	490f      	ldr	r1, [pc, #60]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001300:	4810      	ldr	r0, [pc, #64]	; (8001344 <HAL_ADC_ConvCpltCallback+0x64>)
 8001302:	f00a fa91 	bl	800b828 <HAL_UART_Transmit>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcData, 1);
 8001306:	2201      	movs	r2, #1
 8001308:	490f      	ldr	r1, [pc, #60]	; (8001348 <HAL_ADC_ConvCpltCallback+0x68>)
 800130a:	4810      	ldr	r0, [pc, #64]	; (800134c <HAL_ADC_ConvCpltCallback+0x6c>)
 800130c:	f001 face 	bl	80028ac <HAL_ADC_Start_DMA>

	uart_buf_len = sprintf(uart_buf, "prueba4\n");
 8001310:	490f      	ldr	r1, [pc, #60]	; (8001350 <HAL_ADC_ConvCpltCallback+0x70>)
 8001312:	480a      	ldr	r0, [pc, #40]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001314:	f00b fdde 	bl	800ced4 <siprintf>
 8001318:	4603      	mov	r3, r0
 800131a:	b29a      	uxth	r2, r3
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_ADC_ConvCpltCallback+0x60>)
 800131e:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <HAL_ADC_ConvCpltCallback+0x60>)
 8001322:	881a      	ldrh	r2, [r3, #0]
 8001324:	2364      	movs	r3, #100	; 0x64
 8001326:	4905      	ldr	r1, [pc, #20]	; (800133c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001328:	4806      	ldr	r0, [pc, #24]	; (8001344 <HAL_ADC_ConvCpltCallback+0x64>)
 800132a:	f00a fa7d 	bl	800b828 <HAL_UART_Transmit>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	0800d748 	.word	0x0800d748
 800133c:	240000a0 	.word	0x240000a0
 8001340:	24000204 	.word	0x24000204
 8001344:	24000174 	.word	0x24000174
 8001348:	24000106 	.word	0x24000106
 800134c:	24000678 	.word	0x24000678
 8001350:	0800d754 	.word	0x0800d754

08001354 <MPU6050_init>:

void MPU6050_init(void){
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t data = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c4,MPU6050,WHO_AM_I,1,&check,1,1000);
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	9302      	str	r3, [sp, #8]
 8001364:	2301      	movs	r3, #1
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	1dfb      	adds	r3, r7, #7
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	2275      	movs	r2, #117	; 0x75
 8001370:	21d0      	movs	r1, #208	; 0xd0
 8001372:	4813      	ldr	r0, [pc, #76]	; (80013c0 <MPU6050_init+0x6c>)
 8001374:	f005 f898 	bl	80064a8 <HAL_I2C_Mem_Read>
	if(check == 0x68){
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2b68      	cmp	r3, #104	; 0x68
 800137c:	d11b      	bne.n	80013b6 <MPU6050_init+0x62>
		HAL_I2C_Mem_Write(&hi2c4,MPU6050,PWR_MGMT_1,1,&data,1,1000);
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	9302      	str	r3, [sp, #8]
 8001384:	2301      	movs	r3, #1
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	1dbb      	adds	r3, r7, #6
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	226b      	movs	r2, #107	; 0x6b
 8001390:	21d0      	movs	r1, #208	; 0xd0
 8001392:	480b      	ldr	r0, [pc, #44]	; (80013c0 <MPU6050_init+0x6c>)
 8001394:	f004 ff74 	bl	8006280 <HAL_I2C_Mem_Write>
		data = 0b00000111;
 8001398:	2307      	movs	r3, #7
 800139a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c4,MPU6050,SMPLRT_DIV,1,&data,1,1000);
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	1dbb      	adds	r3, r7, #6
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	2219      	movs	r2, #25
 80013ae:	21d0      	movs	r1, #208	; 0xd0
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <MPU6050_init+0x6c>)
 80013b2:	f004 ff65 	bl	8006280 <HAL_I2C_Mem_Write>
	}
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	24000114 	.word	0x24000114
 80013c4:	00000000 	.word	0x00000000

080013c8 <HAL_TIM_PeriodElapsedCallback>:
	int16_t temp = (int16_t)(tempOut[0] << 8 | tempOut[1]);
	return (temp/340.0) + 36.53;
}


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	if (htim == &htim13){
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a25      	ldr	r2, [pc, #148]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d136      	bne.n	8001446 <HAL_TIM_PeriodElapsedCallback+0x7e>


		temps[0] = temps[1];
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4a23      	ldr	r2, [pc, #140]	; (800146c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80013de:	6013      	str	r3, [r2, #0]
		//temps[1] = MPU6050_READ_TEMP();
		temps[1] = (float)adcData*3.3*1.5/4095.0/150.0;
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013f2:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001450 <HAL_TIM_PeriodElapsedCallback+0x88>
 80013f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013fa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80013fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001402:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8001458 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001406:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800140a:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8001460 <HAL_TIM_PeriodElapsedCallback+0x98>
 800140e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001412:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001418:	edc3 7a01 	vstr	s15, [r3, #4]
//
//			uart_buf_len = sprintf(uart_buf, "Valor Medido: %hu \t Valor Voltaje: %.6f\t", adcData[i], adcVolts[i]);
//			HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
//		}

		if(imp_flag){
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d010      	beq.n	8001446 <HAL_TIM_PeriodElapsedCallback+0x7e>
			lcd_send_cmd(0xCB);
 8001424:	20cb      	movs	r0, #203	; 0xcb
 8001426:	f7ff f9c1 	bl	80007ac <lcd_send_cmd>
			sprintf(buffer, "%i",(int)temps[1]); //223 es el circulo de grados
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800142c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001434:	ee17 2a90 	vmov	r2, s15
 8001438:	490f      	ldr	r1, [pc, #60]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800143a:	4810      	ldr	r0, [pc, #64]	; (800147c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800143c:	f00b fd4a 	bl	800ced4 <siprintf>
			lcd_send_string(buffer);
 8001440:	480e      	ldr	r0, [pc, #56]	; (800147c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001442:	f7ff fa67 	bl	8000914 <lcd_send_string>
		}
//		lcd_send_cmd(0xCA);
//		lcd_send_data(' ');

	}
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	66666666 	.word	0x66666666
 8001454:	400a6666 	.word	0x400a6666
 8001458:	00000000 	.word	0x00000000
 800145c:	40affe00 	.word	0x40affe00
 8001460:	00000000 	.word	0x00000000
 8001464:	4062c000 	.word	0x4062c000
 8001468:	240006e0 	.word	0x240006e0
 800146c:	24000808 	.word	0x24000808
 8001470:	24000106 	.word	0x24000106
 8001474:	240006dc 	.word	0x240006dc
 8001478:	0800d760 	.word	0x0800d760
 800147c:	2400072c 	.word	0x2400072c

08001480 <leerTeclado>:
		__HAL_TIM_SET_COUNTER(&htim5,0);
	}
}


uint8_t leerTeclado(void){
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800148a:	486a      	ldr	r0, [pc, #424]	; (8001634 <leerTeclado+0x1b4>)
 800148c:	f004 fd12 	bl	8005eb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001496:	4867      	ldr	r0, [pc, #412]	; (8001634 <leerTeclado+0x1b4>)
 8001498:	f004 fd0c 	bl	8005eb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a2:	4865      	ldr	r0, [pc, #404]	; (8001638 <leerTeclado+0x1b8>)
 80014a4:	f004 fd06 	bl	8005eb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_6,GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2140      	movs	r1, #64	; 0x40
 80014ac:	4862      	ldr	r0, [pc, #392]	; (8001638 <leerTeclado+0x1b8>)
 80014ae:	f004 fd01 	bl	8005eb4 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_11);
 80014b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b6:	485f      	ldr	r0, [pc, #380]	; (8001634 <leerTeclado+0x1b4>)
 80014b8:	f004 fd15 	bl	8005ee6 <HAL_GPIO_TogglePin>
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12))){
 80014bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c0:	485d      	ldr	r0, [pc, #372]	; (8001638 <leerTeclado+0x1b8>)
 80014c2:	f004 fcdf 	bl	8005e84 <HAL_GPIO_ReadPin>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <leerTeclado+0x50>
			return 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0af      	b.n	8001630 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10))){
 80014d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d4:	4858      	ldr	r0, [pc, #352]	; (8001638 <leerTeclado+0x1b8>)
 80014d6:	f004 fcd5 	bl	8005e84 <HAL_GPIO_ReadPin>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <leerTeclado+0x64>
		return 2;
 80014e0:	2302      	movs	r3, #2
 80014e2:	e0a5      	b.n	8001630 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7))){
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	4854      	ldr	r0, [pc, #336]	; (8001638 <leerTeclado+0x1b8>)
 80014e8:	f004 fccc 	bl	8005e84 <HAL_GPIO_ReadPin>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <leerTeclado+0x76>
		return 3;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e09c      	b.n	8001630 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8))){
 80014f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014fa:	484f      	ldr	r0, [pc, #316]	; (8001638 <leerTeclado+0x1b8>)
 80014fc:	f004 fcc2 	bl	8005e84 <HAL_GPIO_ReadPin>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <leerTeclado+0x8a>
		return 10;
 8001506:	230a      	movs	r3, #10
 8001508:	e092      	b.n	8001630 <leerTeclado+0x1b0>
		}


	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_11);
 800150a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800150e:	4849      	ldr	r0, [pc, #292]	; (8001634 <leerTeclado+0x1b4>)
 8001510:	f004 fce9 	bl	8005ee6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_10);
 8001514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001518:	4846      	ldr	r0, [pc, #280]	; (8001634 <leerTeclado+0x1b4>)
 800151a:	f004 fce4 	bl	8005ee6 <HAL_GPIO_TogglePin>
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12))){
 800151e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001522:	4845      	ldr	r0, [pc, #276]	; (8001638 <leerTeclado+0x1b8>)
 8001524:	f004 fcae 	bl	8005e84 <HAL_GPIO_ReadPin>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <leerTeclado+0xb2>
		return 4;
 800152e:	2304      	movs	r3, #4
 8001530:	e07e      	b.n	8001630 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10))){
 8001532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001536:	4840      	ldr	r0, [pc, #256]	; (8001638 <leerTeclado+0x1b8>)
 8001538:	f004 fca4 	bl	8005e84 <HAL_GPIO_ReadPin>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <leerTeclado+0xc6>
		return 5;
 8001542:	2305      	movs	r3, #5
 8001544:	e074      	b.n	8001630 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7))){
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	483b      	ldr	r0, [pc, #236]	; (8001638 <leerTeclado+0x1b8>)
 800154a:	f004 fc9b 	bl	8005e84 <HAL_GPIO_ReadPin>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <leerTeclado+0xd8>
		return 6;
 8001554:	2306      	movs	r3, #6
 8001556:	e06b      	b.n	8001630 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8))){
 8001558:	f44f 7180 	mov.w	r1, #256	; 0x100
 800155c:	4836      	ldr	r0, [pc, #216]	; (8001638 <leerTeclado+0x1b8>)
 800155e:	f004 fc91 	bl	8005e84 <HAL_GPIO_ReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <leerTeclado+0xec>
		return 11;
 8001568:	230b      	movs	r3, #11
 800156a:	e061      	b.n	8001630 <leerTeclado+0x1b0>
		}

	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_10);
 800156c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001570:	4830      	ldr	r0, [pc, #192]	; (8001634 <leerTeclado+0x1b4>)
 8001572:	f004 fcb8 	bl	8005ee6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_15);
 8001576:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800157a:	482f      	ldr	r0, [pc, #188]	; (8001638 <leerTeclado+0x1b8>)
 800157c:	f004 fcb3 	bl	8005ee6 <HAL_GPIO_TogglePin>
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12))){
 8001580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001584:	482c      	ldr	r0, [pc, #176]	; (8001638 <leerTeclado+0x1b8>)
 8001586:	f004 fc7d 	bl	8005e84 <HAL_GPIO_ReadPin>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <leerTeclado+0x114>
		return 7;
 8001590:	2307      	movs	r3, #7
 8001592:	e04d      	b.n	8001630 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10))){
 8001594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001598:	4827      	ldr	r0, [pc, #156]	; (8001638 <leerTeclado+0x1b8>)
 800159a:	f004 fc73 	bl	8005e84 <HAL_GPIO_ReadPin>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <leerTeclado+0x128>
		return 8;
 80015a4:	2308      	movs	r3, #8
 80015a6:	e043      	b.n	8001630 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7))){
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	4823      	ldr	r0, [pc, #140]	; (8001638 <leerTeclado+0x1b8>)
 80015ac:	f004 fc6a 	bl	8005e84 <HAL_GPIO_ReadPin>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <leerTeclado+0x13a>
		return 9;
 80015b6:	2309      	movs	r3, #9
 80015b8:	e03a      	b.n	8001630 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8))){
 80015ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015be:	481e      	ldr	r0, [pc, #120]	; (8001638 <leerTeclado+0x1b8>)
 80015c0:	f004 fc60 	bl	8005e84 <HAL_GPIO_ReadPin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <leerTeclado+0x14e>
		return 12;
 80015ca:	230c      	movs	r3, #12
 80015cc:	e030      	b.n	8001630 <leerTeclado+0x1b0>
		}

	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_15);
 80015ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d2:	4819      	ldr	r0, [pc, #100]	; (8001638 <leerTeclado+0x1b8>)
 80015d4:	f004 fc87 	bl	8005ee6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_6);
 80015d8:	2140      	movs	r1, #64	; 0x40
 80015da:	4817      	ldr	r0, [pc, #92]	; (8001638 <leerTeclado+0x1b8>)
 80015dc:	f004 fc83 	bl	8005ee6 <HAL_GPIO_TogglePin>
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12))){
 80015e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015e4:	4814      	ldr	r0, [pc, #80]	; (8001638 <leerTeclado+0x1b8>)
 80015e6:	f004 fc4d 	bl	8005e84 <HAL_GPIO_ReadPin>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <leerTeclado+0x174>
		return 14;
 80015f0:	230e      	movs	r3, #14
 80015f2:	e01d      	b.n	8001630 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10))){
 80015f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f8:	480f      	ldr	r0, [pc, #60]	; (8001638 <leerTeclado+0x1b8>)
 80015fa:	f004 fc43 	bl	8005e84 <HAL_GPIO_ReadPin>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <leerTeclado+0x188>
		return 0;
 8001604:	2300      	movs	r3, #0
 8001606:	e013      	b.n	8001630 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7))){
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	480b      	ldr	r0, [pc, #44]	; (8001638 <leerTeclado+0x1b8>)
 800160c:	f004 fc3a 	bl	8005e84 <HAL_GPIO_ReadPin>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <leerTeclado+0x19a>
		return 15;
 8001616:	230f      	movs	r3, #15
 8001618:	e00a      	b.n	8001630 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8))){
 800161a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <leerTeclado+0x1b8>)
 8001620:	f004 fc30 	bl	8005e84 <HAL_GPIO_ReadPin>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <leerTeclado+0x1ae>
		return 13;
 800162a:	230d      	movs	r3, #13
 800162c:	e000      	b.n	8001630 <leerTeclado+0x1b0>
		}
	return 16;
 800162e:	2310      	movs	r3, #16
}
 8001630:	4618      	mov	r0, r3
 8001632:	bd80      	pop	{r7, pc}
 8001634:	58020400 	.word	0x58020400
 8001638:	58021000 	.word	0x58021000

0800163c <clearTempBuff>:

void clearTempBuff(void){
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
	 for(int i =0;i<4;i++)
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	e007      	b.n	8001658 <clearTempBuff+0x1c>
		 temp_buff[i] = ' ';
 8001648:	4a08      	ldr	r2, [pc, #32]	; (800166c <clearTempBuff+0x30>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	2220      	movs	r2, #32
 8001650:	701a      	strb	r2, [r3, #0]
	 for(int i =0;i<4;i++)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3301      	adds	r3, #1
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b03      	cmp	r3, #3
 800165c:	ddf4      	ble.n	8001648 <clearTempBuff+0xc>
}
 800165e:	bf00      	nop
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	24000008 	.word	0x24000008

08001670 <TMP_2_RPM>:

float TMP_2_RPM(float error_tmp){
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	ed87 0a01 	vstr	s0, [r7, #4]
	return m1*(error_tmp) +b1;
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <TMP_2_RPM+0x30>)
 800167c:	ed93 7a00 	vldr	s14, [r3]
 8001680:	edd7 7a01 	vldr	s15, [r7, #4]
 8001684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <TMP_2_RPM+0x34>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001692:	eeb0 0a67 	vmov.f32	s0, s15
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	24000818 	.word	0x24000818
 80016a4:	24000618 	.word	0x24000618

080016a8 <RPM_2_PWM>:



int RPM_2_PWM(int error_rpm){
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return m2*(error_rpm) +b2;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <RPM_2_PWM+0x3c>)
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <RPM_2_PWM+0x40>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d2:	ee17 3a90 	vmov	r3, s15
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	24000620 	.word	0x24000620
 80016e8:	24000168 	.word	0x24000168

080016ec <dispTemp>:




void dispTemp(void){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80016f0:	2080      	movs	r0, #128	; 0x80
 80016f2:	f7ff f85b 	bl	80007ac <lcd_send_cmd>
	lcd_send_string("Temp Ref: ");
 80016f6:	4820      	ldr	r0, [pc, #128]	; (8001778 <dispTemp+0x8c>)
 80016f8:	f7ff f90c 	bl	8000914 <lcd_send_string>
	lcd_send_cmd(0x8A);
 80016fc:	208a      	movs	r0, #138	; 0x8a
 80016fe:	f7ff f855 	bl	80007ac <lcd_send_cmd>
	lcd_send_data(temp_buff[0]);
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <dispTemp+0x90>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff f880 	bl	800080c <lcd_send_data>
	lcd_send_cmd(0x8B);
 800170c:	208b      	movs	r0, #139	; 0x8b
 800170e:	f7ff f84d 	bl	80007ac <lcd_send_cmd>
	lcd_send_data(temp_buff[1]);
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <dispTemp+0x90>)
 8001714:	785b      	ldrb	r3, [r3, #1]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff f878 	bl	800080c <lcd_send_data>
	lcd_send_cmd(0x8C);
 800171c:	208c      	movs	r0, #140	; 0x8c
 800171e:	f7ff f845 	bl	80007ac <lcd_send_cmd>
	lcd_send_data(temp_buff[2] == ' ' ? '0' : temp_buff[2]);
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <dispTemp+0x90>)
 8001724:	789b      	ldrb	r3, [r3, #2]
 8001726:	2b20      	cmp	r3, #32
 8001728:	d002      	beq.n	8001730 <dispTemp+0x44>
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <dispTemp+0x90>)
 800172c:	789b      	ldrb	r3, [r3, #2]
 800172e:	e000      	b.n	8001732 <dispTemp+0x46>
 8001730:	2330      	movs	r3, #48	; 0x30
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f86a 	bl	800080c <lcd_send_data>
	lcd_send_cmd(0x8E);
 8001738:	208e      	movs	r0, #142	; 0x8e
 800173a:	f7ff f837 	bl	80007ac <lcd_send_cmd>
	lcd_send_data(223);
 800173e:	20df      	movs	r0, #223	; 0xdf
 8001740:	f7ff f864 	bl	800080c <lcd_send_data>
	lcd_send_cmd(0x8F);
 8001744:	208f      	movs	r0, #143	; 0x8f
 8001746:	f7ff f831 	bl	80007ac <lcd_send_cmd>
	lcd_send_data('C');
 800174a:	2043      	movs	r0, #67	; 0x43
 800174c:	f7ff f85e 	bl	800080c <lcd_send_data>
	lcd_send_cmd(0xC0);
 8001750:	20c0      	movs	r0, #192	; 0xc0
 8001752:	f7ff f82b 	bl	80007ac <lcd_send_cmd>
	lcd_send_string("Temp Act: ");
 8001756:	480a      	ldr	r0, [pc, #40]	; (8001780 <dispTemp+0x94>)
 8001758:	f7ff f8dc 	bl	8000914 <lcd_send_string>
//	lcd_send_data('0');
//	lcd_send_cmd(0xCB);
//	lcd_send_data('0');
//	lcd_send_cmd(0xCC);
//	lcd_send_data('0');
	lcd_send_cmd(0xCE);
 800175c:	20ce      	movs	r0, #206	; 0xce
 800175e:	f7ff f825 	bl	80007ac <lcd_send_cmd>
	lcd_send_data(223);
 8001762:	20df      	movs	r0, #223	; 0xdf
 8001764:	f7ff f852 	bl	800080c <lcd_send_data>
	lcd_send_cmd(0xCF);
 8001768:	20cf      	movs	r0, #207	; 0xcf
 800176a:	f7ff f81f 	bl	80007ac <lcd_send_cmd>
	lcd_send_data('C');
 800176e:	2043      	movs	r0, #67	; 0x43
 8001770:	f7ff f84c 	bl	800080c <lcd_send_data>
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	0800d774 	.word	0x0800d774
 800177c:	24000008 	.word	0x24000008
 8001780:	0800d780 	.word	0x0800d780

08001784 <procesarTeclado>:

void procesarTeclado(int keyt){
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	 if(keyt<10){
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b09      	cmp	r3, #9
 8001790:	dc25      	bgt.n	80017de <procesarTeclado+0x5a>
		if(enter_flag){
 8001792:	4b69      	ldr	r3, [pc, #420]	; (8001938 <procesarTeclado+0x1b4>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d004      	beq.n	80017a4 <procesarTeclado+0x20>
			clearTempBuff();
 800179a:	f7ff ff4f 	bl	800163c <clearTempBuff>
			enter_flag = 0;
 800179e:	4b66      	ldr	r3, [pc, #408]	; (8001938 <procesarTeclado+0x1b4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
		}
		if(cont<3){
 80017a4:	4b65      	ldr	r3, [pc, #404]	; (800193c <procesarTeclado+0x1b8>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d814      	bhi.n	80017d6 <procesarTeclado+0x52>
			temp_buff[0] = temp_buff[1];
 80017ac:	4b64      	ldr	r3, [pc, #400]	; (8001940 <procesarTeclado+0x1bc>)
 80017ae:	785a      	ldrb	r2, [r3, #1]
 80017b0:	4b63      	ldr	r3, [pc, #396]	; (8001940 <procesarTeclado+0x1bc>)
 80017b2:	701a      	strb	r2, [r3, #0]
			temp_buff[1] = temp_buff[2];
 80017b4:	4b62      	ldr	r3, [pc, #392]	; (8001940 <procesarTeclado+0x1bc>)
 80017b6:	789a      	ldrb	r2, [r3, #2]
 80017b8:	4b61      	ldr	r3, [pc, #388]	; (8001940 <procesarTeclado+0x1bc>)
 80017ba:	705a      	strb	r2, [r3, #1]
			temp_buff[2] = key+48;
 80017bc:	4b61      	ldr	r3, [pc, #388]	; (8001944 <procesarTeclado+0x1c0>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	3330      	adds	r3, #48	; 0x30
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <procesarTeclado+0x1bc>)
 80017c6:	709a      	strb	r2, [r3, #2]
			cont++;
 80017c8:	4b5c      	ldr	r3, [pc, #368]	; (800193c <procesarTeclado+0x1b8>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b5a      	ldr	r3, [pc, #360]	; (800193c <procesarTeclado+0x1b8>)
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	e0a6      	b.n	8001924 <procesarTeclado+0x1a0>
		}
		else {
			cont = 0;
 80017d6:	4b59      	ldr	r3, [pc, #356]	; (800193c <procesarTeclado+0x1b8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
 80017dc:	e0a2      	b.n	8001924 <procesarTeclado+0x1a0>
		}

	 }
	 else if(keyt == 10){
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b0a      	cmp	r3, #10
 80017e2:	d126      	bne.n	8001832 <procesarTeclado+0xae>
		 imp_flag = 0;
 80017e4:	4b58      	ldr	r3, [pc, #352]	; (8001948 <procesarTeclado+0x1c4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
		 clearTempBuff();
 80017ea:	f7ff ff27 	bl	800163c <clearTempBuff>
		 lcd_clear();
 80017ee:	f7ff f83d 	bl	800086c <lcd_clear>
		 HAL_Delay(200);
 80017f2:	20c8      	movs	r0, #200	; 0xc8
 80017f4:	f000 fca2 	bl	800213c <HAL_Delay>
		 lcd_send_cmd (0x80);
 80017f8:	2080      	movs	r0, #128	; 0x80
 80017fa:	f7fe ffd7 	bl	80007ac <lcd_send_cmd>
		 lcd_send_string("Temperatura");
 80017fe:	4853      	ldr	r0, [pc, #332]	; (800194c <procesarTeclado+0x1c8>)
 8001800:	f7ff f888 	bl	8000914 <lcd_send_string>
		 lcd_send_cmd(0xC0);
 8001804:	20c0      	movs	r0, #192	; 0xc0
 8001806:	f7fe ffd1 	bl	80007ac <lcd_send_cmd>
		 lcd_send_string("reestablecida");
 800180a:	4851      	ldr	r0, [pc, #324]	; (8001950 <procesarTeclado+0x1cc>)
 800180c:	f7ff f882 	bl	8000914 <lcd_send_string>
		 HAL_Delay(500);
 8001810:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001814:	f000 fc92 	bl	800213c <HAL_Delay>
		 HAL_Delay(500);
 8001818:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800181c:	f000 fc8e 	bl	800213c <HAL_Delay>
		 lcd_clear();
 8001820:	f7ff f824 	bl	800086c <lcd_clear>
		 HAL_Delay(200);
 8001824:	20c8      	movs	r0, #200	; 0xc8
 8001826:	f000 fc89 	bl	800213c <HAL_Delay>
		 imp_flag = 1;
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <procesarTeclado+0x1c4>)
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	e078      	b.n	8001924 <procesarTeclado+0x1a0>


	 }
	 else if(keyt == 13){
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0d      	cmp	r3, #13
 8001836:	d175      	bne.n	8001924 <procesarTeclado+0x1a0>

		temp_ref = (int)((temp_buff[2] == ' ' ? 0 : temp_buff[2] -48)) + (int)((temp_buff[1] == ' ' ? 0 : (temp_buff[1] -48)*10)) + (int)((temp_buff[0] == ' ' ? 0 : (temp_buff[0] -48)*100));
 8001838:	4b41      	ldr	r3, [pc, #260]	; (8001940 <procesarTeclado+0x1bc>)
 800183a:	789b      	ldrb	r3, [r3, #2]
 800183c:	2b20      	cmp	r3, #32
 800183e:	d004      	beq.n	800184a <procesarTeclado+0xc6>
 8001840:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <procesarTeclado+0x1bc>)
 8001842:	789b      	ldrb	r3, [r3, #2]
 8001844:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001848:	e000      	b.n	800184c <procesarTeclado+0xc8>
 800184a:	2200      	movs	r2, #0
 800184c:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <procesarTeclado+0x1bc>)
 800184e:	785b      	ldrb	r3, [r3, #1]
 8001850:	2b20      	cmp	r3, #32
 8001852:	d008      	beq.n	8001866 <procesarTeclado+0xe2>
 8001854:	4b3a      	ldr	r3, [pc, #232]	; (8001940 <procesarTeclado+0x1bc>)
 8001856:	785b      	ldrb	r3, [r3, #1]
 8001858:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800185c:	460b      	mov	r3, r1
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	e000      	b.n	8001868 <procesarTeclado+0xe4>
 8001866:	2300      	movs	r3, #0
 8001868:	441a      	add	r2, r3
 800186a:	4b35      	ldr	r3, [pc, #212]	; (8001940 <procesarTeclado+0x1bc>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b20      	cmp	r3, #32
 8001870:	d006      	beq.n	8001880 <procesarTeclado+0xfc>
 8001872:	4b33      	ldr	r3, [pc, #204]	; (8001940 <procesarTeclado+0x1bc>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	3b30      	subs	r3, #48	; 0x30
 8001878:	2164      	movs	r1, #100	; 0x64
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	e000      	b.n	8001882 <procesarTeclado+0xfe>
 8001880:	2300      	movs	r3, #0
 8001882:	4413      	add	r3, r2
 8001884:	4a33      	ldr	r2, [pc, #204]	; (8001954 <procesarTeclado+0x1d0>)
 8001886:	6013      	str	r3, [r2, #0]
		cont=0;
 8001888:	4b2c      	ldr	r3, [pc, #176]	; (800193c <procesarTeclado+0x1b8>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
		imp_flag = 0;
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <procesarTeclado+0x1c4>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
		enter_flag =0;
 8001894:	4b28      	ldr	r3, [pc, #160]	; (8001938 <procesarTeclado+0x1b4>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
		if(temp_ref > 60){
 800189a:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <procesarTeclado+0x1d0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b3c      	cmp	r3, #60	; 0x3c
 80018a0:	dd21      	ble.n	80018e6 <procesarTeclado+0x162>
			lcd_clear();
 80018a2:	f7fe ffe3 	bl	800086c <lcd_clear>
			HAL_Delay(500);
 80018a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018aa:	f000 fc47 	bl	800213c <HAL_Delay>
			clearTempBuff();
 80018ae:	f7ff fec5 	bl	800163c <clearTempBuff>
			lcd_send_cmd(0x80);
 80018b2:	2080      	movs	r0, #128	; 0x80
 80018b4:	f7fe ff7a 	bl	80007ac <lcd_send_cmd>
			lcd_send_string("La temperatura");
 80018b8:	4827      	ldr	r0, [pc, #156]	; (8001958 <procesarTeclado+0x1d4>)
 80018ba:	f7ff f82b 	bl	8000914 <lcd_send_string>
			lcd_send_cmd(0xC0);
 80018be:	20c0      	movs	r0, #192	; 0xc0
 80018c0:	f7fe ff74 	bl	80007ac <lcd_send_cmd>
			lcd_send_string("no es valida");
 80018c4:	4825      	ldr	r0, [pc, #148]	; (800195c <procesarTeclado+0x1d8>)
 80018c6:	f7ff f825 	bl	8000914 <lcd_send_string>
			HAL_Delay(500);
 80018ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ce:	f000 fc35 	bl	800213c <HAL_Delay>
			HAL_Delay(500);
 80018d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018d6:	f000 fc31 	bl	800213c <HAL_Delay>
			lcd_clear();
 80018da:	f7fe ffc7 	bl	800086c <lcd_clear>
			HAL_Delay(200);
 80018de:	20c8      	movs	r0, #200	; 0xc8
 80018e0:	f000 fc2c 	bl	800213c <HAL_Delay>
 80018e4:	e01e      	b.n	8001924 <procesarTeclado+0x1a0>

		}else{
			lcd_clear();
 80018e6:	f7fe ffc1 	bl	800086c <lcd_clear>
			HAL_Delay(500);
 80018ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ee:	f000 fc25 	bl	800213c <HAL_Delay>
			lcd_send_cmd(0x80);
 80018f2:	2080      	movs	r0, #128	; 0x80
 80018f4:	f7fe ff5a 	bl	80007ac <lcd_send_cmd>
			lcd_send_string("La temperatura");
 80018f8:	4817      	ldr	r0, [pc, #92]	; (8001958 <procesarTeclado+0x1d4>)
 80018fa:	f7ff f80b 	bl	8000914 <lcd_send_string>
			lcd_send_cmd(0xC0);
 80018fe:	20c0      	movs	r0, #192	; 0xc0
 8001900:	f7fe ff54 	bl	80007ac <lcd_send_cmd>
			lcd_send_string("fue actualizada");
 8001904:	4816      	ldr	r0, [pc, #88]	; (8001960 <procesarTeclado+0x1dc>)
 8001906:	f7ff f805 	bl	8000914 <lcd_send_string>
			HAL_Delay(500);
 800190a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800190e:	f000 fc15 	bl	800213c <HAL_Delay>
			HAL_Delay(500);
 8001912:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001916:	f000 fc11 	bl	800213c <HAL_Delay>
			lcd_clear();
 800191a:	f7fe ffa7 	bl	800086c <lcd_clear>
			HAL_Delay(200);
 800191e:	20c8      	movs	r0, #200	; 0xc8
 8001920:	f000 fc0c 	bl	800213c <HAL_Delay>
}
	 }
	 imp_flag = 1;
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <procesarTeclado+0x1c4>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]

	 dispTemp();
 800192a:	f7ff fedf 	bl	80016ec <dispTemp>


}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2400000b 	.word	0x2400000b
 800193c:	24000104 	.word	0x24000104
 8001940:	24000008 	.word	0x24000008
 8001944:	24000804 	.word	0x24000804
 8001948:	240006dc 	.word	0x240006dc
 800194c:	0800d78c 	.word	0x0800d78c
 8001950:	0800d798 	.word	0x0800d798
 8001954:	24000170 	.word	0x24000170
 8001958:	0800d7a8 	.word	0x0800d7a8
 800195c:	0800d7b8 	.word	0x0800d7b8
 8001960:	0800d7c8 	.word	0x0800d7c8

08001964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001968:	b672      	cpsid	i
}
 800196a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800196c:	e7fe      	b.n	800196c <Error_Handler+0x8>
	...

08001970 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_MspInit+0x30>)
 8001978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800197c:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_MspInit+0x30>)
 800197e:	f043 0302 	orr.w	r3, r3, #2
 8001982:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_MspInit+0x30>)
 8001988:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	58024400 	.word	0x58024400

080019a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0b8      	sub	sp, #224	; 0xe0
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	22bc      	movs	r2, #188	; 0xbc
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00b fa7d 	bl	800cec4 <memset>
  if(hadc->Instance==ADC1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a42      	ldr	r2, [pc, #264]	; (8001ad8 <HAL_ADC_MspInit+0x134>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d17d      	bne.n	8001ad0 <HAL_ADC_MspInit+0x12c>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80019da:	2301      	movs	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 80019de:	2313      	movs	r3, #19
 80019e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80019e6:	2302      	movs	r3, #2
 80019e8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80019ea:	2302      	movs	r3, #2
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80019ee:	23c0      	movs	r3, #192	; 0xc0
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80019f2:	2320      	movs	r3, #32
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	4618      	mov	r0, r3
 8001a06:	f006 fa6b 	bl	8007ee0 <HAL_RCCEx_PeriphCLKConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001a10:	f7ff ffa8 	bl	8001964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001a14:	4b31      	ldr	r3, [pc, #196]	; (8001adc <HAL_ADC_MspInit+0x138>)
 8001a16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a1a:	4a30      	ldr	r2, [pc, #192]	; (8001adc <HAL_ADC_MspInit+0x138>)
 8001a1c:	f043 0320 	orr.w	r3, r3, #32
 8001a20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <HAL_ADC_MspInit+0x138>)
 8001a26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a2a:	f003 0320 	and.w	r3, r3, #32
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <HAL_ADC_MspInit+0x138>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	4a28      	ldr	r2, [pc, #160]	; (8001adc <HAL_ADC_MspInit+0x138>)
 8001a3a:	f043 0320 	orr.w	r3, r3, #32
 8001a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <HAL_ADC_MspInit+0x138>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a68:	4619      	mov	r1, r3
 8001a6a:	481d      	ldr	r0, [pc, #116]	; (8001ae0 <HAL_ADC_MspInit+0x13c>)
 8001a6c:	f004 f85a 	bl	8005b24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a72:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <HAL_ADC_MspInit+0x144>)
 8001a74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a76:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a78:	2209      	movs	r2, #9
 8001a7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a9e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ab4:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001ab6:	f001 ff5d 	bl	8003974 <HAL_DMA_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8001ac0:	f7ff ff50 	bl	8001964 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001ac8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001aca:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ad0:	bf00      	nop
 8001ad2:	37e0      	adds	r7, #224	; 0xe0
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	58024400 	.word	0x58024400
 8001ae0:	58021400 	.word	0x58021400
 8001ae4:	24000738 	.word	0x24000738
 8001ae8:	40020010 	.word	0x40020010

08001aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b0b8      	sub	sp, #224	; 0xe0
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	22bc      	movs	r2, #188	; 0xbc
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f00b f9d9 	bl	800cec4 <memset>
  if(hi2c->Instance==I2C4)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a25      	ldr	r2, [pc, #148]	; (8001bac <HAL_I2C_MspInit+0xc0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d142      	bne.n	8001ba2 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001b1c:	2310      	movs	r3, #16
 8001b1e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b26:	f107 0310 	add.w	r3, r7, #16
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f006 f9d8 	bl	8007ee0 <HAL_RCCEx_PeriphCLKConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b36:	f7ff ff15 	bl	8001964 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_I2C_MspInit+0xc4>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b40:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <HAL_I2C_MspInit+0xc4>)
 8001b42:	f043 0320 	orr.w	r3, r3, #32
 8001b46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_I2C_MspInit+0xc4>)
 8001b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b50:	f003 0320 	and.w	r3, r3, #32
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b58:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b60:	2312      	movs	r3, #18
 8001b62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001b72:	2304      	movs	r3, #4
 8001b74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <HAL_I2C_MspInit+0xc8>)
 8001b80:	f003 ffd0 	bl	8005b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <HAL_I2C_MspInit+0xc4>)
 8001b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b8a:	4a09      	ldr	r2, [pc, #36]	; (8001bb0 <HAL_I2C_MspInit+0xc4>)
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_I2C_MspInit+0xc4>)
 8001b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001ba2:	bf00      	nop
 8001ba4:	37e0      	adds	r7, #224	; 0xe0
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	58001c00 	.word	0x58001c00
 8001bb0:	58024400 	.word	0x58024400
 8001bb4:	58021400 	.word	0x58021400

08001bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <HAL_TIM_Base_MspInit+0xac>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10f      	bne.n	8001bea <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bca:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_TIM_Base_MspInit+0xb0>)
 8001bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd0:	4a25      	ldr	r2, [pc, #148]	; (8001c68 <HAL_TIM_Base_MspInit+0xb0>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_TIM_Base_MspInit+0xb0>)
 8001bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001be8:	e038      	b.n	8001c5c <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM5)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1f      	ldr	r2, [pc, #124]	; (8001c6c <HAL_TIM_Base_MspInit+0xb4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d117      	bne.n	8001c24 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_TIM_Base_MspInit+0xb0>)
 8001bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <HAL_TIM_Base_MspInit+0xb0>)
 8001bfc:	f043 0308 	orr.w	r3, r3, #8
 8001c00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_TIM_Base_MspInit+0xb0>)
 8001c06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	2032      	movs	r0, #50	; 0x32
 8001c18:	f001 fe77 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c1c:	2032      	movs	r0, #50	; 0x32
 8001c1e:	f001 fe8e 	bl	800393e <HAL_NVIC_EnableIRQ>
}
 8001c22:	e01b      	b.n	8001c5c <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM13)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <HAL_TIM_Base_MspInit+0xb8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d116      	bne.n	8001c5c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_TIM_Base_MspInit+0xb0>)
 8001c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <HAL_TIM_Base_MspInit+0xb0>)
 8001c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_TIM_Base_MspInit+0xb0>)
 8001c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	202c      	movs	r0, #44	; 0x2c
 8001c52:	f001 fe5a 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001c56:	202c      	movs	r0, #44	; 0x2c
 8001c58:	f001 fe71 	bl	800393e <HAL_NVIC_EnableIRQ>
}
 8001c5c:	bf00      	nop
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40010000 	.word	0x40010000
 8001c68:	58024400 	.word	0x58024400
 8001c6c:	40000c00 	.word	0x40000c00
 8001c70:	40001c00 	.word	0x40001c00

08001c74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a13      	ldr	r2, [pc, #76]	; (8001ce0 <HAL_TIM_MspPostInit+0x6c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d11f      	bne.n	8001cd6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <HAL_TIM_MspPostInit+0x70>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9c:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <HAL_TIM_MspPostInit+0x70>)
 8001c9e:	f043 0310 	orr.w	r3, r3, #16
 8001ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_TIM_MspPostInit+0x70>)
 8001ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <HAL_TIM_MspPostInit+0x74>)
 8001cd2:	f003 ff27 	bl	8005b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cd6:	bf00      	nop
 8001cd8:	3720      	adds	r7, #32
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	58024400 	.word	0x58024400
 8001ce8:	58021000 	.word	0x58021000

08001cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0b8      	sub	sp, #224	; 0xe0
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	22bc      	movs	r2, #188	; 0xbc
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f00b f8d9 	bl	800cec4 <memset>
  if(huart->Instance==USART3)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a25      	ldr	r2, [pc, #148]	; (8001dac <HAL_UART_MspInit+0xc0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d142      	bne.n	8001da2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f006 f8d8 	bl	8007ee0 <HAL_RCCEx_PeriphCLKConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d36:	f7ff fe15 	bl	8001964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_UART_MspInit+0xc4>)
 8001d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d40:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <HAL_UART_MspInit+0xc4>)
 8001d42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_UART_MspInit+0xc4>)
 8001d4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_UART_MspInit+0xc4>)
 8001d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5e:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <HAL_UART_MspInit+0xc4>)
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_UART_MspInit+0xc4>)
 8001d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d90:	2307      	movs	r3, #7
 8001d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <HAL_UART_MspInit+0xc8>)
 8001d9e:	f003 fec1 	bl	8005b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001da2:	bf00      	nop
 8001da4:	37e0      	adds	r7, #224	; 0xe0
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40004800 	.word	0x40004800
 8001db0:	58024400 	.word	0x58024400
 8001db4:	58020c00 	.word	0x58020c00

08001db8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b0b8      	sub	sp, #224	; 0xe0
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	22bc      	movs	r2, #188	; 0xbc
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f00b f873 	bl	800cec4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a36      	ldr	r2, [pc, #216]	; (8001ebc <HAL_PCD_MspInit+0x104>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d165      	bne.n	8001eb4 <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001de8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001dec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001df2:	2318      	movs	r3, #24
 8001df4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001df6:	2302      	movs	r3, #2
 8001df8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001e02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e06:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001e0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e14:	f107 0310 	add.w	r3, r7, #16
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f006 f861 	bl	8007ee0 <HAL_RCCEx_PeriphCLKConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001e24:	f7ff fd9e 	bl	8001964 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001e28:	f005 f8ae 	bl	8006f88 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_PCD_MspInit+0x108>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e32:	4a23      	ldr	r2, [pc, #140]	; (8001ec0 <HAL_PCD_MspInit+0x108>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e3c:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_PCD_MspInit+0x108>)
 8001e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001e4a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001e4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001e64:	230a      	movs	r3, #10
 8001e66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4814      	ldr	r0, [pc, #80]	; (8001ec4 <HAL_PCD_MspInit+0x10c>)
 8001e72:	f003 fe57 	bl	8005b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <HAL_PCD_MspInit+0x10c>)
 8001e92:	f003 fe47 	bl	8005b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_PCD_MspInit+0x108>)
 8001e98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e9c:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <HAL_PCD_MspInit+0x108>)
 8001e9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ea2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_PCD_MspInit+0x108>)
 8001ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001eb4:	bf00      	nop
 8001eb6:	37e0      	adds	r7, #224	; 0xe0
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40080000 	.word	0x40080000
 8001ec0:	58024400 	.word	0x58024400
 8001ec4:	58020000 	.word	0x58020000

08001ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <NMI_Handler+0x4>

08001ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <HardFault_Handler+0x4>

08001ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <MemManage_Handler+0x4>

08001eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <BusFault_Handler+0x4>

08001ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <UsageFault_Handler+0x4>

08001ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f14:	f000 f8f2 	bl	80020fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <DMA1_Stream0_IRQHandler+0x10>)
 8001f22:	f002 faed 	bl	8004500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	24000738 	.word	0x24000738

08001f30 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001f36:	f008 fb8b 	bl	800a650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	240006e0 	.word	0x240006e0

08001f44 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <TIM5_IRQHandler+0x10>)
 8001f4a:	f008 fb81 	bl	800a650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	24000628 	.word	0x24000628

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f00a ff72 	bl	800ce70 <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	24080000 	.word	0x24080000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	24000108 	.word	0x24000108
 8001fc0:	24000840 	.word	0x24000840

08001fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ffc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fc8:	f7fe fb56 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fce:	490d      	ldr	r1, [pc, #52]	; (8002004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd4:	e002      	b.n	8001fdc <LoopCopyDataInit>

08001fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fda:	3304      	adds	r3, #4

08001fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe0:	d3f9      	bcc.n	8001fd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe4:	4c0a      	ldr	r4, [pc, #40]	; (8002010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe8:	e001      	b.n	8001fee <LoopFillZerobss>

08001fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fec:	3204      	adds	r2, #4

08001fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff0:	d3fb      	bcc.n	8001fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ff2:	f00a ff43 	bl	800ce7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff6:	f7fe fca3 	bl	8000940 <main>
  bx  lr
 8001ffa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ffc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002000:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002004:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8002008:	0800d85c 	.word	0x0800d85c
  ldr r2, =_sbss
 800200c:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 8002010:	24000840 	.word	0x24000840

08002014 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC3_IRQHandler>
	...

08002018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201e:	2003      	movs	r0, #3
 8002020:	f001 fc68 	bl	80038f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002024:	f005 fd86 	bl	8007b34 <HAL_RCC_GetSysClockFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_Init+0x68>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	4913      	ldr	r1, [pc, #76]	; (8002084 <HAL_Init+0x6c>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
 8002040:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_Init+0x68>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_Init+0x6c>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
 8002058:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <HAL_Init+0x70>)
 800205a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800205c:	4a0b      	ldr	r2, [pc, #44]	; (800208c <HAL_Init+0x74>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002062:	2000      	movs	r0, #0
 8002064:	f000 f814 	bl	8002090 <HAL_InitTick>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e002      	b.n	8002078 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002072:	f7ff fc7d 	bl	8001970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	58024400 	.word	0x58024400
 8002084:	0800d7d8 	.word	0x0800d7d8
 8002088:	24000004 	.word	0x24000004
 800208c:	24000000 	.word	0x24000000

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002098:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_InitTick+0x60>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e021      	b.n	80020e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_InitTick+0x64>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_InitTick+0x60>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 fc4d 	bl	800395a <HAL_SYSTICK_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00e      	b.n	80020e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b0f      	cmp	r3, #15
 80020ce:	d80a      	bhi.n	80020e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d0:	2200      	movs	r2, #0
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f001 fc17 	bl	800390a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020dc:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <HAL_InitTick+0x68>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	2400001c 	.word	0x2400001c
 80020f4:	24000000 	.word	0x24000000
 80020f8:	24000018 	.word	0x24000018

080020fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_IncTick+0x20>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_IncTick+0x24>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4413      	add	r3, r2
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <HAL_IncTick+0x24>)
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	2400001c 	.word	0x2400001c
 8002120:	2400082c 	.word	0x2400082c

08002124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return uwTick;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_GetTick+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	2400082c 	.word	0x2400082c

0800213c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff ffee 	bl	8002124 <HAL_GetTick>
 8002148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002154:	d005      	beq.n	8002162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_Delay+0x44>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002162:	bf00      	nop
 8002164:	f7ff ffde 	bl	8002124 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	429a      	cmp	r2, r3
 8002172:	d8f7      	bhi.n	8002164 <HAL_Delay+0x28>
  {
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	2400001c 	.word	0x2400001c

08002184 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <HAL_GetREVID+0x14>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0c1b      	lsrs	r3, r3, #16
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	5c001000 	.word	0x5c001000

0800219c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	609a      	str	r2, [r3, #8]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	609a      	str	r2, [r3, #8]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3360      	adds	r3, #96	; 0x60
 8002216:	461a      	mov	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	430b      	orrs	r3, r1
 8002232:	431a      	orrs	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002238:	bf00      	nop
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	431a      	orrs	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	611a      	str	r2, [r3, #16]
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002276:	b480      	push	{r7}
 8002278:	b087      	sub	sp, #28
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3360      	adds	r3, #96	; 0x60
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	431a      	orrs	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	601a      	str	r2, [r3, #0]
  }
}
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b087      	sub	sp, #28
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3330      	adds	r3, #48	; 0x30
 80022e2:	461a      	mov	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	0a1b      	lsrs	r3, r3, #8
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	4413      	add	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	211f      	movs	r1, #31
 80022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	401a      	ands	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	f003 011f 	and.w	r1, r3, #31
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	431a      	orrs	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800231e:	bf00      	nop
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f023 0203 	bic.w	r2, r3, #3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	60da      	str	r2, [r3, #12]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3314      	adds	r3, #20
 8002360:	461a      	mov	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	0e5b      	lsrs	r3, r3, #25
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	4413      	add	r3, r2
 800236e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	0d1b      	lsrs	r3, r3, #20
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	2107      	movs	r1, #7
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	401a      	ands	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	0d1b      	lsrs	r3, r3, #20
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	fa01 f303 	lsl.w	r3, r1, r3
 8002394:	431a      	orrs	r2, r3
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023c0:	43db      	mvns	r3, r3
 80023c2:	401a      	ands	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f003 0318 	and.w	r3, r3, #24
 80023ca:	4908      	ldr	r1, [pc, #32]	; (80023ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80023cc:	40d9      	lsrs	r1, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	400b      	ands	r3, r1
 80023d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023d6:	431a      	orrs	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	000fffff 	.word	0x000fffff

080023f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 031f 	and.w	r3, r3, #31
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <LL_ADC_DisableDeepPowerDown+0x20>)
 800241a:	4013      	ands	r3, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6093      	str	r3, [r2, #8]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	5fffffc0 	.word	0x5fffffc0

08002430 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002444:	d101      	bne.n	800244a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <LL_ADC_EnableInternalRegulator+0x24>)
 8002466:	4013      	ands	r3, r2
 8002468:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	6fffffc0 	.word	0x6fffffc0

08002480 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002490:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002494:	d101      	bne.n	800249a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <LL_ADC_Enable+0x24>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	7fffffc0 	.word	0x7fffffc0

080024d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <LL_ADC_IsEnabled+0x18>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <LL_ADC_IsEnabled+0x1a>
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <LL_ADC_REG_StartConversion+0x24>)
 8002506:	4013      	ands	r3, r2
 8002508:	f043 0204 	orr.w	r2, r3, #4
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	7fffffc0 	.word	0x7fffffc0

08002520 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d101      	bne.n	8002538 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b08      	cmp	r3, #8
 8002558:	d101      	bne.n	800255e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e18e      	b.n	80028a4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fa05 	bl	80019a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff3f 	bl	8002430 <LL_ADC_IsDeepPowerDownEnabled>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff25 	bl	800240c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff5a 	bl	8002480 <LL_ADC_IsInternalRegulatorEnabled>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d114      	bne.n	80025fc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff ff3e 	bl	8002458 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025dc:	4b9a      	ldr	r3, [pc, #616]	; (8002848 <HAL_ADC_Init+0x2dc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	099b      	lsrs	r3, r3, #6
 80025e2:	4a9a      	ldr	r2, [pc, #616]	; (800284c <HAL_ADC_Init+0x2e0>)
 80025e4:	fba2 2303 	umull	r2, r3, r2, r3
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	3301      	adds	r3, #1
 80025ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025ee:	e002      	b.n	80025f6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f9      	bne.n	80025f0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff3d 	bl	8002480 <LL_ADC_IsInternalRegulatorEnabled>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10d      	bne.n	8002628 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002610:	f043 0210 	orr.w	r2, r3, #16
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff77 	bl	8002520 <LL_ADC_REG_IsConversionOngoing>
 8002632:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	f040 8128 	bne.w	8002892 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f040 8124 	bne.w	8002892 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002652:	f043 0202 	orr.w	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ff36 	bl	80024d0 <LL_ADC_IsEnabled>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d136      	bne.n	80026d8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a78      	ldr	r2, [pc, #480]	; (8002850 <HAL_ADC_Init+0x2e4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d004      	beq.n	800267e <HAL_ADC_Init+0x112>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a76      	ldr	r2, [pc, #472]	; (8002854 <HAL_ADC_Init+0x2e8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10e      	bne.n	800269c <HAL_ADC_Init+0x130>
 800267e:	4874      	ldr	r0, [pc, #464]	; (8002850 <HAL_ADC_Init+0x2e4>)
 8002680:	f7ff ff26 	bl	80024d0 <LL_ADC_IsEnabled>
 8002684:	4604      	mov	r4, r0
 8002686:	4873      	ldr	r0, [pc, #460]	; (8002854 <HAL_ADC_Init+0x2e8>)
 8002688:	f7ff ff22 	bl	80024d0 <LL_ADC_IsEnabled>
 800268c:	4603      	mov	r3, r0
 800268e:	4323      	orrs	r3, r4
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf0c      	ite	eq
 8002694:	2301      	moveq	r3, #1
 8002696:	2300      	movne	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e008      	b.n	80026ae <HAL_ADC_Init+0x142>
 800269c:	486e      	ldr	r0, [pc, #440]	; (8002858 <HAL_ADC_Init+0x2ec>)
 800269e:	f7ff ff17 	bl	80024d0 <LL_ADC_IsEnabled>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d012      	beq.n	80026d8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a66      	ldr	r2, [pc, #408]	; (8002850 <HAL_ADC_Init+0x2e4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d004      	beq.n	80026c6 <HAL_ADC_Init+0x15a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a64      	ldr	r2, [pc, #400]	; (8002854 <HAL_ADC_Init+0x2e8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_Init+0x15e>
 80026c6:	4a65      	ldr	r2, [pc, #404]	; (800285c <HAL_ADC_Init+0x2f0>)
 80026c8:	e000      	b.n	80026cc <HAL_ADC_Init+0x160>
 80026ca:	4a65      	ldr	r2, [pc, #404]	; (8002860 <HAL_ADC_Init+0x2f4>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4619      	mov	r1, r3
 80026d2:	4610      	mov	r0, r2
 80026d4:	f7ff fd62 	bl	800219c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80026d8:	f7ff fd54 	bl	8002184 <HAL_GetREVID>
 80026dc:	4603      	mov	r3, r0
 80026de:	f241 0203 	movw	r2, #4099	; 0x1003
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d914      	bls.n	8002710 <HAL_ADC_Init+0x1a4>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d110      	bne.n	8002710 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7d5b      	ldrb	r3, [r3, #21]
 80026f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026f8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80026fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7f1b      	ldrb	r3, [r3, #28]
 8002704:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002706:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002708:	f043 030c 	orr.w	r3, r3, #12
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	e00d      	b.n	800272c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	7d5b      	ldrb	r3, [r3, #21]
 8002714:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800271a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002720:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7f1b      	ldrb	r3, [r3, #28]
 8002726:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7f1b      	ldrb	r3, [r3, #28]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d106      	bne.n	8002742 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	3b01      	subs	r3, #1
 800273a:	045b      	lsls	r3, r3, #17
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <HAL_ADC_Init+0x2f8>)
 8002766:	4013      	ands	r3, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	69b9      	ldr	r1, [r7, #24]
 800276e:	430b      	orrs	r3, r1
 8002770:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fed2 	bl	8002520 <LL_ADC_REG_IsConversionOngoing>
 800277c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fedf 	bl	8002546 <LL_ADC_INJ_IsConversionOngoing>
 8002788:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d14a      	bne.n	8002826 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d147      	bne.n	8002826 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	7d1b      	ldrb	r3, [r3, #20]
 800279a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <HAL_ADC_Init+0x2fc>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	69b9      	ldr	r1, [r7, #24]
 80027b4:	430b      	orrs	r3, r1
 80027b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d11b      	bne.n	80027fa <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	4b27      	ldr	r3, [pc, #156]	; (800286c <HAL_ADC_Init+0x300>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027d6:	3a01      	subs	r2, #1
 80027d8:	0411      	lsls	r1, r2, #16
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027de:	4311      	orrs	r1, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027e4:	4311      	orrs	r1, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027ea:	430a      	orrs	r2, r1
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	611a      	str	r2, [r3, #16]
 80027f8:	e007      	b.n	800280a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fd89 	bl	8003338 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d120      	bne.n	8002870 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	f023 010f 	bic.w	r1, r3, #15
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	1e5a      	subs	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
 8002846:	e01b      	b.n	8002880 <HAL_ADC_Init+0x314>
 8002848:	24000000 	.word	0x24000000
 800284c:	053e2d63 	.word	0x053e2d63
 8002850:	40022000 	.word	0x40022000
 8002854:	40022100 	.word	0x40022100
 8002858:	58026000 	.word	0x58026000
 800285c:	40022300 	.word	0x40022300
 8002860:	58026300 	.word	0x58026300
 8002864:	fff0c003 	.word	0xfff0c003
 8002868:	ffffbffc 	.word	0xffffbffc
 800286c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 020f 	bic.w	r2, r2, #15
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	f023 0303 	bic.w	r3, r3, #3
 8002888:	f043 0201 	orr.w	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
 8002890:	e007      	b.n	80028a2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	f043 0210 	orr.w	r2, r3, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3724      	adds	r7, #36	; 0x24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd90      	pop	{r4, r7, pc}

080028ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a55      	ldr	r2, [pc, #340]	; (8002a14 <HAL_ADC_Start_DMA+0x168>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d004      	beq.n	80028cc <HAL_ADC_Start_DMA+0x20>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a54      	ldr	r2, [pc, #336]	; (8002a18 <HAL_ADC_Start_DMA+0x16c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d101      	bne.n	80028d0 <HAL_ADC_Start_DMA+0x24>
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_ADC_Start_DMA+0x170>)
 80028ce:	e000      	b.n	80028d2 <HAL_ADC_Start_DMA+0x26>
 80028d0:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <HAL_ADC_Start_DMA+0x174>)
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fd8c 	bl	80023f0 <LL_ADC_GetMultimode>
 80028d8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fe1e 	bl	8002520 <LL_ADC_REG_IsConversionOngoing>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f040 808c 	bne.w	8002a04 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_Start_DMA+0x4e>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e087      	b.n	8002a0a <HAL_ADC_Start_DMA+0x15e>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2b05      	cmp	r3, #5
 800290c:	d002      	beq.n	8002914 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b09      	cmp	r3, #9
 8002912:	d170      	bne.n	80029f6 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fbf1 	bl	80030fc <ADC_Enable>
 800291a:	4603      	mov	r3, r0
 800291c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d163      	bne.n	80029ec <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002928:	4b3e      	ldr	r3, [pc, #248]	; (8002a24 <HAL_ADC_Start_DMA+0x178>)
 800292a:	4013      	ands	r3, r2
 800292c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a37      	ldr	r2, [pc, #220]	; (8002a18 <HAL_ADC_Start_DMA+0x16c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d002      	beq.n	8002944 <HAL_ADC_Start_DMA+0x98>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	e000      	b.n	8002946 <HAL_ADC_Start_DMA+0x9a>
 8002944:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <HAL_ADC_Start_DMA+0x168>)
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	4293      	cmp	r3, r2
 800294c:	d002      	beq.n	8002954 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	f023 0206 	bic.w	r2, r3, #6
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	659a      	str	r2, [r3, #88]	; 0x58
 8002978:	e002      	b.n	8002980 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002984:	4a28      	ldr	r2, [pc, #160]	; (8002a28 <HAL_ADC_Start_DMA+0x17c>)
 8002986:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298c:	4a27      	ldr	r2, [pc, #156]	; (8002a2c <HAL_ADC_Start_DMA+0x180>)
 800298e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002994:	4a26      	ldr	r2, [pc, #152]	; (8002a30 <HAL_ADC_Start_DMA+0x184>)
 8002996:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	221c      	movs	r2, #28
 800299e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0210 	orr.w	r2, r2, #16
 80029b6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	4619      	mov	r1, r3
 80029c2:	4610      	mov	r0, r2
 80029c4:	f7ff fcb1 	bl	800232a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3340      	adds	r3, #64	; 0x40
 80029d2:	4619      	mov	r1, r3
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f001 fb28 	bl	800402c <HAL_DMA_Start_IT>
 80029dc:	4603      	mov	r3, r0
 80029de:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fd87 	bl	80024f8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80029ea:	e00d      	b.n	8002a08 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80029f4:	e008      	b.n	8002a08 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002a02:	e001      	b.n	8002a08 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
 8002a06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40022000 	.word	0x40022000
 8002a18:	40022100 	.word	0x40022100
 8002a1c:	40022300 	.word	0x40022300
 8002a20:	58026300 	.word	0x58026300
 8002a24:	fffff0fe 	.word	0xfffff0fe
 8002a28:	08003211 	.word	0x08003211
 8002a2c:	080032e9 	.word	0x080032e9
 8002a30:	08003305 	.word	0x08003305

08002a34 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b0a1      	sub	sp, #132	; 0x84
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4a9d      	ldr	r2, [pc, #628]	; (8002cec <HAL_ADC_ConfigChannel+0x290>)
 8002a76:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x2a>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e321      	b.n	80030ca <HAL_ADC_ConfigChannel+0x66e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fd44 	bl	8002520 <LL_ADC_REG_IsConversionOngoing>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f040 8306 	bne.w	80030ac <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d108      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x62>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0e9b      	lsrs	r3, r3, #26
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	e016      	b.n	8002aec <HAL_ADC_ConfigChannel+0x90>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ace:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	e003      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	69d1      	ldr	r1, [r2, #28]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	430b      	orrs	r3, r1
 8002af8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6859      	ldr	r1, [r3, #4]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f7ff fbe3 	bl	80022d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fd05 	bl	8002520 <LL_ADC_REG_IsConversionOngoing>
 8002b16:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fd12 	bl	8002546 <LL_ADC_INJ_IsConversionOngoing>
 8002b22:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 80b3 	bne.w	8002c92 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f040 80af 	bne.w	8002c92 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	6819      	ldr	r1, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	461a      	mov	r2, r3
 8002b42:	f7ff fc05 	bl	8002350 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b46:	4b6a      	ldr	r3, [pc, #424]	; (8002cf0 <HAL_ADC_ConfigChannel+0x294>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b52:	d10b      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x110>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	e01d      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x14c>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x136>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	e00a      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x14c>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d027      	beq.n	8002c02 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6919      	ldr	r1, [r3, #16]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bc0:	f7ff fb20 	bl	8002204 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6919      	ldr	r1, [r3, #16]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	7e5b      	ldrb	r3, [r3, #25]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d102      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x17e>
 8002bd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002bd8:	e000      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x180>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	f7ff fb4a 	bl	8002276 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6919      	ldr	r1, [r3, #16]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	7e1b      	ldrb	r3, [r3, #24]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d102      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x19c>
 8002bf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bf6:	e000      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x19e>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f7ff fb22 	bl	8002244 <LL_ADC_SetDataRightShift>
 8002c00:	e047      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	069b      	lsls	r3, r3, #26
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d107      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c24:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	069b      	lsls	r3, r3, #26
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d107      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c48:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	069b      	lsls	r3, r3, #26
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d107      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c6c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	069b      	lsls	r3, r3, #26
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d107      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c90:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fc1a 	bl	80024d0 <LL_ADC_IsEnabled>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 820d 	bne.w	80030be <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	6819      	ldr	r1, [r3, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	f7ff fb79 	bl	80023a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	4a0c      	ldr	r2, [pc, #48]	; (8002cec <HAL_ADC_ConfigChannel+0x290>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	f040 8133 	bne.w	8002f28 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d110      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x298>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0e9b      	lsrs	r3, r3, #26
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	2b09      	cmp	r3, #9
 8002ce0:	bf94      	ite	ls
 8002ce2:	2301      	movls	r3, #1
 8002ce4:	2300      	movhi	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	e01e      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x2cc>
 8002cea:	bf00      	nop
 8002cec:	47ff0000 	.word	0x47ff0000
 8002cf0:	5c001000 	.word	0x5c001000
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	e003      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2b09      	cmp	r3, #9
 8002d20:	bf94      	ite	ls
 8002d22:	2301      	movls	r3, #1
 8002d24:	2300      	movhi	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d079      	beq.n	8002e20 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d107      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x2ec>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	0e9b      	lsrs	r3, r3, #26
 8002d3e:	3301      	adds	r3, #1
 8002d40:	069b      	lsls	r3, r3, #26
 8002d42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d46:	e015      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x318>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d58:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002d60:	2320      	movs	r3, #32
 8002d62:	e003      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	069b      	lsls	r3, r3, #26
 8002d70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d109      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x338>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	3301      	adds	r3, #1
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	e017      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x368>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002dac:	2320      	movs	r3, #32
 8002dae:	e003      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	3301      	adds	r3, #1
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	ea42 0103 	orr.w	r1, r2, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10a      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x38e>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	0e9b      	lsrs	r3, r3, #26
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	051b      	lsls	r3, r3, #20
 8002de8:	e018      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x3c0>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002e02:	2320      	movs	r3, #32
 8002e04:	e003      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	f003 021f 	and.w	r2, r3, #31
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	e07e      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d107      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x3e0>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	0e9b      	lsrs	r3, r3, #26
 8002e32:	3301      	adds	r3, #1
 8002e34:	069b      	lsls	r3, r3, #26
 8002e36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e3a:	e015      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x40c>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e54:	2320      	movs	r3, #32
 8002e56:	e003      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	069b      	lsls	r3, r3, #26
 8002e64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x42c>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0e9b      	lsrs	r3, r3, #26
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	2101      	movs	r1, #1
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	e017      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x45c>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	61bb      	str	r3, [r7, #24]
  return result;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002ea0:	2320      	movs	r3, #32
 8002ea2:	e003      	b.n	8002eac <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	3301      	adds	r3, #1
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	ea42 0103 	orr.w	r1, r2, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10d      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x488>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	0e9b      	lsrs	r3, r3, #26
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	3b1e      	subs	r3, #30
 8002edc:	051b      	lsls	r3, r3, #20
 8002ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	e01b      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x4c0>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	60fb      	str	r3, [r7, #12]
  return result;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002efc:	2320      	movs	r3, #32
 8002efe:	e003      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f003 021f 	and.w	r2, r3, #31
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	3b1e      	subs	r3, #30
 8002f16:	051b      	lsls	r3, r3, #20
 8002f18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	6892      	ldr	r2, [r2, #8]
 8002f22:	4619      	mov	r1, r3
 8002f24:	f7ff fa14 	bl	8002350 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f280 80c6 	bge.w	80030be <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a67      	ldr	r2, [pc, #412]	; (80030d4 <HAL_ADC_ConfigChannel+0x678>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <HAL_ADC_ConfigChannel+0x4ea>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a65      	ldr	r2, [pc, #404]	; (80030d8 <HAL_ADC_ConfigChannel+0x67c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x4ee>
 8002f46:	4b65      	ldr	r3, [pc, #404]	; (80030dc <HAL_ADC_ConfigChannel+0x680>)
 8002f48:	e000      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x4f0>
 8002f4a:	4b65      	ldr	r3, [pc, #404]	; (80030e0 <HAL_ADC_ConfigChannel+0x684>)
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff f94b 	bl	80021e8 <LL_ADC_GetCommonPathInternalCh>
 8002f52:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a5e      	ldr	r2, [pc, #376]	; (80030d4 <HAL_ADC_ConfigChannel+0x678>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <HAL_ADC_ConfigChannel+0x50c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a5d      	ldr	r2, [pc, #372]	; (80030d8 <HAL_ADC_ConfigChannel+0x67c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d10e      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x52a>
 8002f68:	485a      	ldr	r0, [pc, #360]	; (80030d4 <HAL_ADC_ConfigChannel+0x678>)
 8002f6a:	f7ff fab1 	bl	80024d0 <LL_ADC_IsEnabled>
 8002f6e:	4604      	mov	r4, r0
 8002f70:	4859      	ldr	r0, [pc, #356]	; (80030d8 <HAL_ADC_ConfigChannel+0x67c>)
 8002f72:	f7ff faad 	bl	80024d0 <LL_ADC_IsEnabled>
 8002f76:	4603      	mov	r3, r0
 8002f78:	4323      	orrs	r3, r4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	e008      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x53c>
 8002f86:	4857      	ldr	r0, [pc, #348]	; (80030e4 <HAL_ADC_ConfigChannel+0x688>)
 8002f88:	f7ff faa2 	bl	80024d0 <LL_ADC_IsEnabled>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bf0c      	ite	eq
 8002f92:	2301      	moveq	r3, #1
 8002f94:	2300      	movne	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d07d      	beq.n	8003098 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a51      	ldr	r2, [pc, #324]	; (80030e8 <HAL_ADC_ConfigChannel+0x68c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d130      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x5ac>
 8002fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d12b      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a4b      	ldr	r2, [pc, #300]	; (80030e4 <HAL_ADC_ConfigChannel+0x688>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	f040 8081 	bne.w	80030be <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a44      	ldr	r2, [pc, #272]	; (80030d4 <HAL_ADC_ConfigChannel+0x678>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <HAL_ADC_ConfigChannel+0x574>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a43      	ldr	r2, [pc, #268]	; (80030d8 <HAL_ADC_ConfigChannel+0x67c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x578>
 8002fd0:	4a42      	ldr	r2, [pc, #264]	; (80030dc <HAL_ADC_ConfigChannel+0x680>)
 8002fd2:	e000      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x57a>
 8002fd4:	4a42      	ldr	r2, [pc, #264]	; (80030e0 <HAL_ADC_ConfigChannel+0x684>)
 8002fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	f7ff f8ef 	bl	80021c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fe4:	4b41      	ldr	r3, [pc, #260]	; (80030ec <HAL_ADC_ConfigChannel+0x690>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	4a41      	ldr	r2, [pc, #260]	; (80030f0 <HAL_ADC_ConfigChannel+0x694>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	099b      	lsrs	r3, r3, #6
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ff8:	e002      	b.n	8003000 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f9      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003006:	e05a      	b.n	80030be <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a39      	ldr	r2, [pc, #228]	; (80030f4 <HAL_ADC_ConfigChannel+0x698>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d11e      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x5f4>
 8003012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d119      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a30      	ldr	r2, [pc, #192]	; (80030e4 <HAL_ADC_ConfigChannel+0x688>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d14b      	bne.n	80030be <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a2a      	ldr	r2, [pc, #168]	; (80030d4 <HAL_ADC_ConfigChannel+0x678>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d004      	beq.n	800303a <HAL_ADC_ConfigChannel+0x5de>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <HAL_ADC_ConfigChannel+0x67c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d101      	bne.n	800303e <HAL_ADC_ConfigChannel+0x5e2>
 800303a:	4a28      	ldr	r2, [pc, #160]	; (80030dc <HAL_ADC_ConfigChannel+0x680>)
 800303c:	e000      	b.n	8003040 <HAL_ADC_ConfigChannel+0x5e4>
 800303e:	4a28      	ldr	r2, [pc, #160]	; (80030e0 <HAL_ADC_ConfigChannel+0x684>)
 8003040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003046:	4619      	mov	r1, r3
 8003048:	4610      	mov	r0, r2
 800304a:	f7ff f8ba 	bl	80021c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800304e:	e036      	b.n	80030be <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a28      	ldr	r2, [pc, #160]	; (80030f8 <HAL_ADC_ConfigChannel+0x69c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d131      	bne.n	80030be <HAL_ADC_ConfigChannel+0x662>
 800305a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d12c      	bne.n	80030be <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1e      	ldr	r2, [pc, #120]	; (80030e4 <HAL_ADC_ConfigChannel+0x688>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d127      	bne.n	80030be <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <HAL_ADC_ConfigChannel+0x678>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d004      	beq.n	8003082 <HAL_ADC_ConfigChannel+0x626>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a16      	ldr	r2, [pc, #88]	; (80030d8 <HAL_ADC_ConfigChannel+0x67c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d101      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x62a>
 8003082:	4a16      	ldr	r2, [pc, #88]	; (80030dc <HAL_ADC_ConfigChannel+0x680>)
 8003084:	e000      	b.n	8003088 <HAL_ADC_ConfigChannel+0x62c>
 8003086:	4a16      	ldr	r2, [pc, #88]	; (80030e0 <HAL_ADC_ConfigChannel+0x684>)
 8003088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800308e:	4619      	mov	r1, r3
 8003090:	4610      	mov	r0, r2
 8003092:	f7ff f896 	bl	80021c2 <LL_ADC_SetCommonPathInternalCh>
 8003096:	e012      	b.n	80030be <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309c:	f043 0220 	orr.w	r2, r3, #32
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80030aa:	e008      	b.n	80030be <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b0:	f043 0220 	orr.w	r2, r3, #32
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3784      	adds	r7, #132	; 0x84
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd90      	pop	{r4, r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40022000 	.word	0x40022000
 80030d8:	40022100 	.word	0x40022100
 80030dc:	40022300 	.word	0x40022300
 80030e0:	58026300 	.word	0x58026300
 80030e4:	58026000 	.word	0x58026000
 80030e8:	cb840000 	.word	0xcb840000
 80030ec:	24000000 	.word	0x24000000
 80030f0:	053e2d63 	.word	0x053e2d63
 80030f4:	c7520000 	.word	0xc7520000
 80030f8:	cfb80000 	.word	0xcfb80000

080030fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff f9e1 	bl	80024d0 <LL_ADC_IsEnabled>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d16e      	bne.n	80031f2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	4b38      	ldr	r3, [pc, #224]	; (80031fc <ADC_Enable+0x100>)
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	f043 0210 	orr.w	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003132:	f043 0201 	orr.w	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e05a      	b.n	80031f4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff f9b0 	bl	80024a8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003148:	f7fe ffec 	bl	8002124 <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a2b      	ldr	r2, [pc, #172]	; (8003200 <ADC_Enable+0x104>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d004      	beq.n	8003162 <ADC_Enable+0x66>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a29      	ldr	r2, [pc, #164]	; (8003204 <ADC_Enable+0x108>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <ADC_Enable+0x6a>
 8003162:	4b29      	ldr	r3, [pc, #164]	; (8003208 <ADC_Enable+0x10c>)
 8003164:	e000      	b.n	8003168 <ADC_Enable+0x6c>
 8003166:	4b29      	ldr	r3, [pc, #164]	; (800320c <ADC_Enable+0x110>)
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff f941 	bl	80023f0 <LL_ADC_GetMultimode>
 800316e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a23      	ldr	r2, [pc, #140]	; (8003204 <ADC_Enable+0x108>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d002      	beq.n	8003180 <ADC_Enable+0x84>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	e000      	b.n	8003182 <ADC_Enable+0x86>
 8003180:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <ADC_Enable+0x104>)
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	4293      	cmp	r3, r2
 8003188:	d02c      	beq.n	80031e4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d130      	bne.n	80031f2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003190:	e028      	b.n	80031e4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff f99a 	bl	80024d0 <LL_ADC_IsEnabled>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d104      	bne.n	80031ac <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff f97e 	bl	80024a8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031ac:	f7fe ffba 	bl	8002124 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d914      	bls.n	80031e4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d00d      	beq.n	80031e4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031cc:	f043 0210 	orr.w	r2, r3, #16
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	f043 0201 	orr.w	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e007      	b.n	80031f4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d1cf      	bne.n	8003192 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	8000003f 	.word	0x8000003f
 8003200:	40022000 	.word	0x40022000
 8003204:	40022100 	.word	0x40022100
 8003208:	40022300 	.word	0x40022300
 800320c:	58026300 	.word	0x58026300

08003210 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003222:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003226:	2b00      	cmp	r3, #0
 8003228:	d14b      	bne.n	80032c2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d021      	beq.n	8003288 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff f82f 	bl	80022ac <LL_ADC_REG_IsTriggerSourceSWStart>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d032      	beq.n	80032ba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d12b      	bne.n	80032ba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003266:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d11f      	bne.n	80032ba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f043 0201 	orr.w	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
 8003286:	e018      	b.n	80032ba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d111      	bne.n	80032ba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d105      	bne.n	80032ba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b2:	f043 0201 	orr.w	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f7fe f810 	bl	80012e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032c0:	e00e      	b.n	80032e0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f7ff fbba 	bl	8002a48 <HAL_ADC_ErrorCallback>
}
 80032d4:	e004      	b.n	80032e0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
}
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f7ff fb9c 	bl	8002a34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	f043 0204 	orr.w	r2, r3, #4
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f7ff fb8c 	bl	8002a48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a79      	ldr	r2, [pc, #484]	; (800352c <ADC_ConfigureBoostMode+0x1f4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d004      	beq.n	8003354 <ADC_ConfigureBoostMode+0x1c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a78      	ldr	r2, [pc, #480]	; (8003530 <ADC_ConfigureBoostMode+0x1f8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d109      	bne.n	8003368 <ADC_ConfigureBoostMode+0x30>
 8003354:	4b77      	ldr	r3, [pc, #476]	; (8003534 <ADC_ConfigureBoostMode+0x1fc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	e008      	b.n	800337a <ADC_ConfigureBoostMode+0x42>
 8003368:	4b73      	ldr	r3, [pc, #460]	; (8003538 <ADC_ConfigureBoostMode+0x200>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d01c      	beq.n	80033b8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800337e:	f004 fd53 	bl	8007e28 <HAL_RCC_GetHCLKFreq>
 8003382:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800338c:	d010      	beq.n	80033b0 <ADC_ConfigureBoostMode+0x78>
 800338e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003392:	d871      	bhi.n	8003478 <ADC_ConfigureBoostMode+0x140>
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d002      	beq.n	80033a0 <ADC_ConfigureBoostMode+0x68>
 800339a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800339e:	d16b      	bne.n	8003478 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	60fb      	str	r3, [r7, #12]
        break;
 80033ae:	e066      	b.n	800347e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	60fb      	str	r3, [r7, #12]
        break;
 80033b6:	e062      	b.n	800347e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80033b8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80033bc:	f005 fcd0 	bl	8008d60 <HAL_RCCEx_GetPeriphCLKFreq>
 80033c0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80033ca:	d051      	beq.n	8003470 <ADC_ConfigureBoostMode+0x138>
 80033cc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80033d0:	d854      	bhi.n	800347c <ADC_ConfigureBoostMode+0x144>
 80033d2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80033d6:	d047      	beq.n	8003468 <ADC_ConfigureBoostMode+0x130>
 80033d8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80033dc:	d84e      	bhi.n	800347c <ADC_ConfigureBoostMode+0x144>
 80033de:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80033e2:	d03d      	beq.n	8003460 <ADC_ConfigureBoostMode+0x128>
 80033e4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80033e8:	d848      	bhi.n	800347c <ADC_ConfigureBoostMode+0x144>
 80033ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ee:	d033      	beq.n	8003458 <ADC_ConfigureBoostMode+0x120>
 80033f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033f4:	d842      	bhi.n	800347c <ADC_ConfigureBoostMode+0x144>
 80033f6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80033fa:	d029      	beq.n	8003450 <ADC_ConfigureBoostMode+0x118>
 80033fc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003400:	d83c      	bhi.n	800347c <ADC_ConfigureBoostMode+0x144>
 8003402:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003406:	d01a      	beq.n	800343e <ADC_ConfigureBoostMode+0x106>
 8003408:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800340c:	d836      	bhi.n	800347c <ADC_ConfigureBoostMode+0x144>
 800340e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003412:	d014      	beq.n	800343e <ADC_ConfigureBoostMode+0x106>
 8003414:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003418:	d830      	bhi.n	800347c <ADC_ConfigureBoostMode+0x144>
 800341a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800341e:	d00e      	beq.n	800343e <ADC_ConfigureBoostMode+0x106>
 8003420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003424:	d82a      	bhi.n	800347c <ADC_ConfigureBoostMode+0x144>
 8003426:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800342a:	d008      	beq.n	800343e <ADC_ConfigureBoostMode+0x106>
 800342c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003430:	d824      	bhi.n	800347c <ADC_ConfigureBoostMode+0x144>
 8003432:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003436:	d002      	beq.n	800343e <ADC_ConfigureBoostMode+0x106>
 8003438:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800343c:	d11e      	bne.n	800347c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	0c9b      	lsrs	r3, r3, #18
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	fbb2 f3f3 	udiv	r3, r2, r3
 800344c:	60fb      	str	r3, [r7, #12]
        break;
 800344e:	e016      	b.n	800347e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	60fb      	str	r3, [r7, #12]
        break;
 8003456:	e012      	b.n	800347e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	60fb      	str	r3, [r7, #12]
        break;
 800345e:	e00e      	b.n	800347e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	099b      	lsrs	r3, r3, #6
 8003464:	60fb      	str	r3, [r7, #12]
        break;
 8003466:	e00a      	b.n	800347e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	09db      	lsrs	r3, r3, #7
 800346c:	60fb      	str	r3, [r7, #12]
        break;
 800346e:	e006      	b.n	800347e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	0a1b      	lsrs	r3, r3, #8
 8003474:	60fb      	str	r3, [r7, #12]
        break;
 8003476:	e002      	b.n	800347e <ADC_ConfigureBoostMode+0x146>
        break;
 8003478:	bf00      	nop
 800347a:	e000      	b.n	800347e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800347c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800347e:	f7fe fe81 	bl	8002184 <HAL_GetREVID>
 8003482:	4603      	mov	r3, r0
 8003484:	f241 0203 	movw	r2, #4099	; 0x1003
 8003488:	4293      	cmp	r3, r2
 800348a:	d815      	bhi.n	80034b8 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4a2b      	ldr	r2, [pc, #172]	; (800353c <ADC_ConfigureBoostMode+0x204>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d908      	bls.n	80034a6 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80034a4:	e03e      	b.n	8003524 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034b4:	609a      	str	r2, [r3, #8]
}
 80034b6:	e035      	b.n	8003524 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	085b      	lsrs	r3, r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a1f      	ldr	r2, [pc, #124]	; (8003540 <ADC_ConfigureBoostMode+0x208>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d808      	bhi.n	80034d8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034d4:	609a      	str	r2, [r3, #8]
}
 80034d6:	e025      	b.n	8003524 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a1a      	ldr	r2, [pc, #104]	; (8003544 <ADC_ConfigureBoostMode+0x20c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d80a      	bhi.n	80034f6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f2:	609a      	str	r2, [r3, #8]
}
 80034f4:	e016      	b.n	8003524 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a13      	ldr	r2, [pc, #76]	; (8003548 <ADC_ConfigureBoostMode+0x210>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d80a      	bhi.n	8003514 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003510:	609a      	str	r2, [r3, #8]
}
 8003512:	e007      	b.n	8003524 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003522:	609a      	str	r2, [r3, #8]
}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40022000 	.word	0x40022000
 8003530:	40022100 	.word	0x40022100
 8003534:	40022300 	.word	0x40022300
 8003538:	58026300 	.word	0x58026300
 800353c:	01312d00 	.word	0x01312d00
 8003540:	005f5e10 	.word	0x005f5e10
 8003544:	00bebc20 	.word	0x00bebc20
 8003548:	017d7840 	.word	0x017d7840

0800354c <LL_ADC_IsEnabled>:
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <LL_ADC_IsEnabled+0x18>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <LL_ADC_IsEnabled+0x1a>
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <LL_ADC_REG_IsConversionOngoing>:
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b04      	cmp	r3, #4
 8003584:	d101      	bne.n	800358a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b09f      	sub	sp, #124	; 0x7c
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e0be      	b.n	8003734 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a5c      	ldr	r2, [pc, #368]	; (800373c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d102      	bne.n	80035d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035d0:	4b5b      	ldr	r3, [pc, #364]	; (8003740 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	e001      	b.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e09d      	b.n	8003734 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff ffb9 	bl	8003572 <LL_ADC_REG_IsConversionOngoing>
 8003600:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ffb3 	bl	8003572 <LL_ADC_REG_IsConversionOngoing>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d17f      	bne.n	8003712 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003614:	2b00      	cmp	r3, #0
 8003616:	d17c      	bne.n	8003712 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a47      	ldr	r2, [pc, #284]	; (800373c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d004      	beq.n	800362c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a46      	ldr	r2, [pc, #280]	; (8003740 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d101      	bne.n	8003630 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800362c:	4b45      	ldr	r3, [pc, #276]	; (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800362e:	e000      	b.n	8003632 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003630:	4b45      	ldr	r3, [pc, #276]	; (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003632:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d039      	beq.n	80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800363c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	431a      	orrs	r2, r3
 800364a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a3a      	ldr	r2, [pc, #232]	; (800373c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d004      	beq.n	8003662 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a38      	ldr	r2, [pc, #224]	; (8003740 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d10e      	bne.n	8003680 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003662:	4836      	ldr	r0, [pc, #216]	; (800373c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003664:	f7ff ff72 	bl	800354c <LL_ADC_IsEnabled>
 8003668:	4604      	mov	r4, r0
 800366a:	4835      	ldr	r0, [pc, #212]	; (8003740 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800366c:	f7ff ff6e 	bl	800354c <LL_ADC_IsEnabled>
 8003670:	4603      	mov	r3, r0
 8003672:	4323      	orrs	r3, r4
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	e008      	b.n	8003692 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003680:	4832      	ldr	r0, [pc, #200]	; (800374c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003682:	f7ff ff63 	bl	800354c <LL_ADC_IsEnabled>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf0c      	ite	eq
 800368c:	2301      	moveq	r3, #1
 800368e:	2300      	movne	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d047      	beq.n	8003726 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	4b2d      	ldr	r3, [pc, #180]	; (8003750 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800369c:	4013      	ands	r3, r2
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	6811      	ldr	r1, [r2, #0]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	6892      	ldr	r2, [r2, #8]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	431a      	orrs	r2, r3
 80036aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036ae:	e03a      	b.n	8003726 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80036b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1e      	ldr	r2, [pc, #120]	; (800373c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d004      	beq.n	80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1d      	ldr	r2, [pc, #116]	; (8003740 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d10e      	bne.n	80036ee <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80036d0:	481a      	ldr	r0, [pc, #104]	; (800373c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036d2:	f7ff ff3b 	bl	800354c <LL_ADC_IsEnabled>
 80036d6:	4604      	mov	r4, r0
 80036d8:	4819      	ldr	r0, [pc, #100]	; (8003740 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036da:	f7ff ff37 	bl	800354c <LL_ADC_IsEnabled>
 80036de:	4603      	mov	r3, r0
 80036e0:	4323      	orrs	r3, r4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	bf0c      	ite	eq
 80036e6:	2301      	moveq	r3, #1
 80036e8:	2300      	movne	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	e008      	b.n	8003700 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80036ee:	4817      	ldr	r0, [pc, #92]	; (800374c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80036f0:	f7ff ff2c 	bl	800354c <LL_ADC_IsEnabled>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bf0c      	ite	eq
 80036fa:	2301      	moveq	r3, #1
 80036fc:	2300      	movne	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d010      	beq.n	8003726 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800370a:	4013      	ands	r3, r2
 800370c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800370e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003710:	e009      	b.n	8003726 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	f043 0220 	orr.w	r2, r3, #32
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003724:	e000      	b.n	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003726:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003730:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003734:	4618      	mov	r0, r3
 8003736:	377c      	adds	r7, #124	; 0x7c
 8003738:	46bd      	mov	sp, r7
 800373a:	bd90      	pop	{r4, r7, pc}
 800373c:	40022000 	.word	0x40022000
 8003740:	40022100 	.word	0x40022100
 8003744:	40022300 	.word	0x40022300
 8003748:	58026300 	.word	0x58026300
 800374c:	58026000 	.word	0x58026000
 8003750:	fffff0e0 	.word	0xfffff0e0

08003754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <__NVIC_SetPriorityGrouping+0x40>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 800377e:	4313      	orrs	r3, r2
 8003780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003782:	4a04      	ldr	r2, [pc, #16]	; (8003794 <__NVIC_SetPriorityGrouping+0x40>)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	60d3      	str	r3, [r2, #12]
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	e000ed00 	.word	0xe000ed00
 8003798:	05fa0000 	.word	0x05fa0000

0800379c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <__NVIC_GetPriorityGrouping+0x18>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0307 	and.w	r3, r3, #7
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	db0b      	blt.n	80037e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	f003 021f 	and.w	r2, r3, #31
 80037d0:	4907      	ldr	r1, [pc, #28]	; (80037f0 <__NVIC_EnableIRQ+0x38>)
 80037d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2001      	movs	r0, #1
 80037da:	fa00 f202 	lsl.w	r2, r0, r2
 80037de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000e100 	.word	0xe000e100

080037f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	6039      	str	r1, [r7, #0]
 80037fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003804:	2b00      	cmp	r3, #0
 8003806:	db0a      	blt.n	800381e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	490c      	ldr	r1, [pc, #48]	; (8003840 <__NVIC_SetPriority+0x4c>)
 800380e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003812:	0112      	lsls	r2, r2, #4
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	440b      	add	r3, r1
 8003818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800381c:	e00a      	b.n	8003834 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4908      	ldr	r1, [pc, #32]	; (8003844 <__NVIC_SetPriority+0x50>)
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	3b04      	subs	r3, #4
 800382c:	0112      	lsls	r2, r2, #4
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	440b      	add	r3, r1
 8003832:	761a      	strb	r2, [r3, #24]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	e000e100 	.word	0xe000e100
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003848:	b480      	push	{r7}
 800384a:	b089      	sub	sp, #36	; 0x24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f1c3 0307 	rsb	r3, r3, #7
 8003862:	2b04      	cmp	r3, #4
 8003864:	bf28      	it	cs
 8003866:	2304      	movcs	r3, #4
 8003868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3304      	adds	r3, #4
 800386e:	2b06      	cmp	r3, #6
 8003870:	d902      	bls.n	8003878 <NVIC_EncodePriority+0x30>
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3b03      	subs	r3, #3
 8003876:	e000      	b.n	800387a <NVIC_EncodePriority+0x32>
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800387c:	f04f 32ff 	mov.w	r2, #4294967295
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	401a      	ands	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003890:	f04f 31ff 	mov.w	r1, #4294967295
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	43d9      	mvns	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a0:	4313      	orrs	r3, r2
         );
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c0:	d301      	bcc.n	80038c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038c2:	2301      	movs	r3, #1
 80038c4:	e00f      	b.n	80038e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c6:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <SysTick_Config+0x40>)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ce:	210f      	movs	r1, #15
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	f7ff ff8e 	bl	80037f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <SysTick_Config+0x40>)
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038de:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <SysTick_Config+0x40>)
 80038e0:	2207      	movs	r2, #7
 80038e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	e000e010 	.word	0xe000e010

080038f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff29 	bl	8003754 <__NVIC_SetPriorityGrouping>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b086      	sub	sp, #24
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003918:	f7ff ff40 	bl	800379c <__NVIC_GetPriorityGrouping>
 800391c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	6978      	ldr	r0, [r7, #20]
 8003924:	f7ff ff90 	bl	8003848 <NVIC_EncodePriority>
 8003928:	4602      	mov	r2, r0
 800392a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff5f 	bl	80037f4 <__NVIC_SetPriority>
}
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	4603      	mov	r3, r0
 8003946:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff33 	bl	80037b8 <__NVIC_EnableIRQ>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff ffa4 	bl	80038b0 <SysTick_Config>
 8003968:	4603      	mov	r3, r0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800397c:	f7fe fbd2 	bl	8002124 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e316      	b.n	8003fba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a66      	ldr	r2, [pc, #408]	; (8003b2c <HAL_DMA_Init+0x1b8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d04a      	beq.n	8003a2c <HAL_DMA_Init+0xb8>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a65      	ldr	r2, [pc, #404]	; (8003b30 <HAL_DMA_Init+0x1bc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d045      	beq.n	8003a2c <HAL_DMA_Init+0xb8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a63      	ldr	r2, [pc, #396]	; (8003b34 <HAL_DMA_Init+0x1c0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d040      	beq.n	8003a2c <HAL_DMA_Init+0xb8>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a62      	ldr	r2, [pc, #392]	; (8003b38 <HAL_DMA_Init+0x1c4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d03b      	beq.n	8003a2c <HAL_DMA_Init+0xb8>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a60      	ldr	r2, [pc, #384]	; (8003b3c <HAL_DMA_Init+0x1c8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d036      	beq.n	8003a2c <HAL_DMA_Init+0xb8>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a5f      	ldr	r2, [pc, #380]	; (8003b40 <HAL_DMA_Init+0x1cc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d031      	beq.n	8003a2c <HAL_DMA_Init+0xb8>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a5d      	ldr	r2, [pc, #372]	; (8003b44 <HAL_DMA_Init+0x1d0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d02c      	beq.n	8003a2c <HAL_DMA_Init+0xb8>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a5c      	ldr	r2, [pc, #368]	; (8003b48 <HAL_DMA_Init+0x1d4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d027      	beq.n	8003a2c <HAL_DMA_Init+0xb8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a5a      	ldr	r2, [pc, #360]	; (8003b4c <HAL_DMA_Init+0x1d8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d022      	beq.n	8003a2c <HAL_DMA_Init+0xb8>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a59      	ldr	r2, [pc, #356]	; (8003b50 <HAL_DMA_Init+0x1dc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d01d      	beq.n	8003a2c <HAL_DMA_Init+0xb8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a57      	ldr	r2, [pc, #348]	; (8003b54 <HAL_DMA_Init+0x1e0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d018      	beq.n	8003a2c <HAL_DMA_Init+0xb8>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a56      	ldr	r2, [pc, #344]	; (8003b58 <HAL_DMA_Init+0x1e4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d013      	beq.n	8003a2c <HAL_DMA_Init+0xb8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a54      	ldr	r2, [pc, #336]	; (8003b5c <HAL_DMA_Init+0x1e8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00e      	beq.n	8003a2c <HAL_DMA_Init+0xb8>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a53      	ldr	r2, [pc, #332]	; (8003b60 <HAL_DMA_Init+0x1ec>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d009      	beq.n	8003a2c <HAL_DMA_Init+0xb8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a51      	ldr	r2, [pc, #324]	; (8003b64 <HAL_DMA_Init+0x1f0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_DMA_Init+0xb8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a50      	ldr	r2, [pc, #320]	; (8003b68 <HAL_DMA_Init+0x1f4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <HAL_DMA_Init+0xbc>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <HAL_DMA_Init+0xbe>
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 813b 	beq.w	8003cae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a37      	ldr	r2, [pc, #220]	; (8003b2c <HAL_DMA_Init+0x1b8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d04a      	beq.n	8003ae8 <HAL_DMA_Init+0x174>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a36      	ldr	r2, [pc, #216]	; (8003b30 <HAL_DMA_Init+0x1bc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d045      	beq.n	8003ae8 <HAL_DMA_Init+0x174>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a34      	ldr	r2, [pc, #208]	; (8003b34 <HAL_DMA_Init+0x1c0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d040      	beq.n	8003ae8 <HAL_DMA_Init+0x174>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a33      	ldr	r2, [pc, #204]	; (8003b38 <HAL_DMA_Init+0x1c4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d03b      	beq.n	8003ae8 <HAL_DMA_Init+0x174>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a31      	ldr	r2, [pc, #196]	; (8003b3c <HAL_DMA_Init+0x1c8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d036      	beq.n	8003ae8 <HAL_DMA_Init+0x174>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a30      	ldr	r2, [pc, #192]	; (8003b40 <HAL_DMA_Init+0x1cc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d031      	beq.n	8003ae8 <HAL_DMA_Init+0x174>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2e      	ldr	r2, [pc, #184]	; (8003b44 <HAL_DMA_Init+0x1d0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d02c      	beq.n	8003ae8 <HAL_DMA_Init+0x174>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2d      	ldr	r2, [pc, #180]	; (8003b48 <HAL_DMA_Init+0x1d4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d027      	beq.n	8003ae8 <HAL_DMA_Init+0x174>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a2b      	ldr	r2, [pc, #172]	; (8003b4c <HAL_DMA_Init+0x1d8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d022      	beq.n	8003ae8 <HAL_DMA_Init+0x174>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a2a      	ldr	r2, [pc, #168]	; (8003b50 <HAL_DMA_Init+0x1dc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d01d      	beq.n	8003ae8 <HAL_DMA_Init+0x174>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a28      	ldr	r2, [pc, #160]	; (8003b54 <HAL_DMA_Init+0x1e0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d018      	beq.n	8003ae8 <HAL_DMA_Init+0x174>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a27      	ldr	r2, [pc, #156]	; (8003b58 <HAL_DMA_Init+0x1e4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d013      	beq.n	8003ae8 <HAL_DMA_Init+0x174>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a25      	ldr	r2, [pc, #148]	; (8003b5c <HAL_DMA_Init+0x1e8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00e      	beq.n	8003ae8 <HAL_DMA_Init+0x174>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a24      	ldr	r2, [pc, #144]	; (8003b60 <HAL_DMA_Init+0x1ec>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d009      	beq.n	8003ae8 <HAL_DMA_Init+0x174>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a22      	ldr	r2, [pc, #136]	; (8003b64 <HAL_DMA_Init+0x1f0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d004      	beq.n	8003ae8 <HAL_DMA_Init+0x174>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a21      	ldr	r2, [pc, #132]	; (8003b68 <HAL_DMA_Init+0x1f4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d108      	bne.n	8003afa <HAL_DMA_Init+0x186>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	e007      	b.n	8003b0a <HAL_DMA_Init+0x196>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b0a:	e02f      	b.n	8003b6c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b0c:	f7fe fb0a 	bl	8002124 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b05      	cmp	r3, #5
 8003b18:	d928      	bls.n	8003b6c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2203      	movs	r2, #3
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e246      	b.n	8003fba <HAL_DMA_Init+0x646>
 8003b2c:	40020010 	.word	0x40020010
 8003b30:	40020028 	.word	0x40020028
 8003b34:	40020040 	.word	0x40020040
 8003b38:	40020058 	.word	0x40020058
 8003b3c:	40020070 	.word	0x40020070
 8003b40:	40020088 	.word	0x40020088
 8003b44:	400200a0 	.word	0x400200a0
 8003b48:	400200b8 	.word	0x400200b8
 8003b4c:	40020410 	.word	0x40020410
 8003b50:	40020428 	.word	0x40020428
 8003b54:	40020440 	.word	0x40020440
 8003b58:	40020458 	.word	0x40020458
 8003b5c:	40020470 	.word	0x40020470
 8003b60:	40020488 	.word	0x40020488
 8003b64:	400204a0 	.word	0x400204a0
 8003b68:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1c8      	bne.n	8003b0c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4b83      	ldr	r3, [pc, #524]	; (8003d94 <HAL_DMA_Init+0x420>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003b92:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003baa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d107      	bne.n	8003bd0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003bd0:	4b71      	ldr	r3, [pc, #452]	; (8003d98 <HAL_DMA_Init+0x424>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4b71      	ldr	r3, [pc, #452]	; (8003d9c <HAL_DMA_Init+0x428>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bdc:	d328      	bcc.n	8003c30 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b28      	cmp	r3, #40	; 0x28
 8003be4:	d903      	bls.n	8003bee <HAL_DMA_Init+0x27a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b2e      	cmp	r3, #46	; 0x2e
 8003bec:	d917      	bls.n	8003c1e <HAL_DMA_Init+0x2aa>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b3e      	cmp	r3, #62	; 0x3e
 8003bf4:	d903      	bls.n	8003bfe <HAL_DMA_Init+0x28a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b42      	cmp	r3, #66	; 0x42
 8003bfc:	d90f      	bls.n	8003c1e <HAL_DMA_Init+0x2aa>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b46      	cmp	r3, #70	; 0x46
 8003c04:	d903      	bls.n	8003c0e <HAL_DMA_Init+0x29a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b48      	cmp	r3, #72	; 0x48
 8003c0c:	d907      	bls.n	8003c1e <HAL_DMA_Init+0x2aa>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b4e      	cmp	r3, #78	; 0x4e
 8003c14:	d905      	bls.n	8003c22 <HAL_DMA_Init+0x2ae>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b52      	cmp	r3, #82	; 0x52
 8003c1c:	d801      	bhi.n	8003c22 <HAL_DMA_Init+0x2ae>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <HAL_DMA_Init+0x2b0>
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c2e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f023 0307 	bic.w	r3, r3, #7
 8003c46:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d117      	bne.n	8003c8a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00e      	beq.n	8003c8a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f001 fdcf 	bl	8005810 <DMA_CheckFifoParam>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2240      	movs	r2, #64	; 0x40
 8003c7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e197      	b.n	8003fba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f001 fd0a 	bl	80056ac <DMA_CalcBaseAndBitshift>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	223f      	movs	r2, #63	; 0x3f
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	e0cd      	b.n	8003e4a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a3b      	ldr	r2, [pc, #236]	; (8003da0 <HAL_DMA_Init+0x42c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d022      	beq.n	8003cfe <HAL_DMA_Init+0x38a>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a39      	ldr	r2, [pc, #228]	; (8003da4 <HAL_DMA_Init+0x430>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01d      	beq.n	8003cfe <HAL_DMA_Init+0x38a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a38      	ldr	r2, [pc, #224]	; (8003da8 <HAL_DMA_Init+0x434>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d018      	beq.n	8003cfe <HAL_DMA_Init+0x38a>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a36      	ldr	r2, [pc, #216]	; (8003dac <HAL_DMA_Init+0x438>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <HAL_DMA_Init+0x38a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a35      	ldr	r2, [pc, #212]	; (8003db0 <HAL_DMA_Init+0x43c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00e      	beq.n	8003cfe <HAL_DMA_Init+0x38a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a33      	ldr	r2, [pc, #204]	; (8003db4 <HAL_DMA_Init+0x440>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d009      	beq.n	8003cfe <HAL_DMA_Init+0x38a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a32      	ldr	r2, [pc, #200]	; (8003db8 <HAL_DMA_Init+0x444>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d004      	beq.n	8003cfe <HAL_DMA_Init+0x38a>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a30      	ldr	r2, [pc, #192]	; (8003dbc <HAL_DMA_Init+0x448>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d101      	bne.n	8003d02 <HAL_DMA_Init+0x38e>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_DMA_Init+0x390>
 8003d02:	2300      	movs	r3, #0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8097 	beq.w	8003e38 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a24      	ldr	r2, [pc, #144]	; (8003da0 <HAL_DMA_Init+0x42c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d021      	beq.n	8003d58 <HAL_DMA_Init+0x3e4>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <HAL_DMA_Init+0x430>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01c      	beq.n	8003d58 <HAL_DMA_Init+0x3e4>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a21      	ldr	r2, [pc, #132]	; (8003da8 <HAL_DMA_Init+0x434>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d017      	beq.n	8003d58 <HAL_DMA_Init+0x3e4>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1f      	ldr	r2, [pc, #124]	; (8003dac <HAL_DMA_Init+0x438>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d012      	beq.n	8003d58 <HAL_DMA_Init+0x3e4>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1e      	ldr	r2, [pc, #120]	; (8003db0 <HAL_DMA_Init+0x43c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00d      	beq.n	8003d58 <HAL_DMA_Init+0x3e4>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <HAL_DMA_Init+0x440>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d008      	beq.n	8003d58 <HAL_DMA_Init+0x3e4>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <HAL_DMA_Init+0x444>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <HAL_DMA_Init+0x3e4>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a19      	ldr	r2, [pc, #100]	; (8003dbc <HAL_DMA_Init+0x448>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <HAL_DMA_Init+0x44c>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d020      	beq.n	8003dc4 <HAL_DMA_Init+0x450>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b80      	cmp	r3, #128	; 0x80
 8003d88:	d102      	bne.n	8003d90 <HAL_DMA_Init+0x41c>
 8003d8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d8e:	e01a      	b.n	8003dc6 <HAL_DMA_Init+0x452>
 8003d90:	2300      	movs	r3, #0
 8003d92:	e018      	b.n	8003dc6 <HAL_DMA_Init+0x452>
 8003d94:	fe10803f 	.word	0xfe10803f
 8003d98:	5c001000 	.word	0x5c001000
 8003d9c:	ffff0000 	.word	0xffff0000
 8003da0:	58025408 	.word	0x58025408
 8003da4:	5802541c 	.word	0x5802541c
 8003da8:	58025430 	.word	0x58025430
 8003dac:	58025444 	.word	0x58025444
 8003db0:	58025458 	.word	0x58025458
 8003db4:	5802546c 	.word	0x5802546c
 8003db8:	58025480 	.word	0x58025480
 8003dbc:	58025494 	.word	0x58025494
 8003dc0:	fffe000f 	.word	0xfffe000f
 8003dc4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68d2      	ldr	r2, [r2, #12]
 8003dca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003dcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003dd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ddc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003de4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003dec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003df4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4b6e      	ldr	r3, [pc, #440]	; (8003fc4 <HAL_DMA_Init+0x650>)
 8003e0c:	4413      	add	r3, r2
 8003e0e:	4a6e      	ldr	r2, [pc, #440]	; (8003fc8 <HAL_DMA_Init+0x654>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	009a      	lsls	r2, r3, #2
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f001 fc45 	bl	80056ac <DMA_CalcBaseAndBitshift>
 8003e22:	4603      	mov	r3, r0
 8003e24:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	2201      	movs	r2, #1
 8003e30:	409a      	lsls	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	e008      	b.n	8003e4a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2240      	movs	r2, #64	; 0x40
 8003e3c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2203      	movs	r2, #3
 8003e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0b7      	b.n	8003fba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a5f      	ldr	r2, [pc, #380]	; (8003fcc <HAL_DMA_Init+0x658>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d072      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a5d      	ldr	r2, [pc, #372]	; (8003fd0 <HAL_DMA_Init+0x65c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d06d      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a5c      	ldr	r2, [pc, #368]	; (8003fd4 <HAL_DMA_Init+0x660>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d068      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a5a      	ldr	r2, [pc, #360]	; (8003fd8 <HAL_DMA_Init+0x664>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d063      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a59      	ldr	r2, [pc, #356]	; (8003fdc <HAL_DMA_Init+0x668>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d05e      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a57      	ldr	r2, [pc, #348]	; (8003fe0 <HAL_DMA_Init+0x66c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d059      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a56      	ldr	r2, [pc, #344]	; (8003fe4 <HAL_DMA_Init+0x670>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d054      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a54      	ldr	r2, [pc, #336]	; (8003fe8 <HAL_DMA_Init+0x674>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d04f      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a53      	ldr	r2, [pc, #332]	; (8003fec <HAL_DMA_Init+0x678>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d04a      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a51      	ldr	r2, [pc, #324]	; (8003ff0 <HAL_DMA_Init+0x67c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d045      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a50      	ldr	r2, [pc, #320]	; (8003ff4 <HAL_DMA_Init+0x680>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d040      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a4e      	ldr	r2, [pc, #312]	; (8003ff8 <HAL_DMA_Init+0x684>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d03b      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a4d      	ldr	r2, [pc, #308]	; (8003ffc <HAL_DMA_Init+0x688>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d036      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a4b      	ldr	r2, [pc, #300]	; (8004000 <HAL_DMA_Init+0x68c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d031      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a4a      	ldr	r2, [pc, #296]	; (8004004 <HAL_DMA_Init+0x690>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d02c      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a48      	ldr	r2, [pc, #288]	; (8004008 <HAL_DMA_Init+0x694>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d027      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a47      	ldr	r2, [pc, #284]	; (800400c <HAL_DMA_Init+0x698>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d022      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a45      	ldr	r2, [pc, #276]	; (8004010 <HAL_DMA_Init+0x69c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01d      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a44      	ldr	r2, [pc, #272]	; (8004014 <HAL_DMA_Init+0x6a0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d018      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a42      	ldr	r2, [pc, #264]	; (8004018 <HAL_DMA_Init+0x6a4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a41      	ldr	r2, [pc, #260]	; (800401c <HAL_DMA_Init+0x6a8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00e      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a3f      	ldr	r2, [pc, #252]	; (8004020 <HAL_DMA_Init+0x6ac>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a3e      	ldr	r2, [pc, #248]	; (8004024 <HAL_DMA_Init+0x6b0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_DMA_Init+0x5c6>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a3c      	ldr	r2, [pc, #240]	; (8004028 <HAL_DMA_Init+0x6b4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d101      	bne.n	8003f3e <HAL_DMA_Init+0x5ca>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_DMA_Init+0x5cc>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d032      	beq.n	8003faa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f001 fcdf 	bl	8005908 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b80      	cmp	r3, #128	; 0x80
 8003f50:	d102      	bne.n	8003f58 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f6c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d010      	beq.n	8003f98 <HAL_DMA_Init+0x624>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d80c      	bhi.n	8003f98 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f001 fd5c 	bl	8005a3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	e008      	b.n	8003faa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	a7fdabf8 	.word	0xa7fdabf8
 8003fc8:	cccccccd 	.word	0xcccccccd
 8003fcc:	40020010 	.word	0x40020010
 8003fd0:	40020028 	.word	0x40020028
 8003fd4:	40020040 	.word	0x40020040
 8003fd8:	40020058 	.word	0x40020058
 8003fdc:	40020070 	.word	0x40020070
 8003fe0:	40020088 	.word	0x40020088
 8003fe4:	400200a0 	.word	0x400200a0
 8003fe8:	400200b8 	.word	0x400200b8
 8003fec:	40020410 	.word	0x40020410
 8003ff0:	40020428 	.word	0x40020428
 8003ff4:	40020440 	.word	0x40020440
 8003ff8:	40020458 	.word	0x40020458
 8003ffc:	40020470 	.word	0x40020470
 8004000:	40020488 	.word	0x40020488
 8004004:	400204a0 	.word	0x400204a0
 8004008:	400204b8 	.word	0x400204b8
 800400c:	58025408 	.word	0x58025408
 8004010:	5802541c 	.word	0x5802541c
 8004014:	58025430 	.word	0x58025430
 8004018:	58025444 	.word	0x58025444
 800401c:	58025458 	.word	0x58025458
 8004020:	5802546c 	.word	0x5802546c
 8004024:	58025480 	.word	0x58025480
 8004028:	58025494 	.word	0x58025494

0800402c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e226      	b.n	8004496 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_DMA_Start_IT+0x2a>
 8004052:	2302      	movs	r3, #2
 8004054:	e21f      	b.n	8004496 <HAL_DMA_Start_IT+0x46a>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b01      	cmp	r3, #1
 8004068:	f040 820a 	bne.w	8004480 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a68      	ldr	r2, [pc, #416]	; (8004220 <HAL_DMA_Start_IT+0x1f4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d04a      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a66      	ldr	r2, [pc, #408]	; (8004224 <HAL_DMA_Start_IT+0x1f8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d045      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a65      	ldr	r2, [pc, #404]	; (8004228 <HAL_DMA_Start_IT+0x1fc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d040      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a63      	ldr	r2, [pc, #396]	; (800422c <HAL_DMA_Start_IT+0x200>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d03b      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a62      	ldr	r2, [pc, #392]	; (8004230 <HAL_DMA_Start_IT+0x204>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d036      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a60      	ldr	r2, [pc, #384]	; (8004234 <HAL_DMA_Start_IT+0x208>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d031      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a5f      	ldr	r2, [pc, #380]	; (8004238 <HAL_DMA_Start_IT+0x20c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d02c      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a5d      	ldr	r2, [pc, #372]	; (800423c <HAL_DMA_Start_IT+0x210>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d027      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a5c      	ldr	r2, [pc, #368]	; (8004240 <HAL_DMA_Start_IT+0x214>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d022      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a5a      	ldr	r2, [pc, #360]	; (8004244 <HAL_DMA_Start_IT+0x218>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01d      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a59      	ldr	r2, [pc, #356]	; (8004248 <HAL_DMA_Start_IT+0x21c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d018      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a57      	ldr	r2, [pc, #348]	; (800424c <HAL_DMA_Start_IT+0x220>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a56      	ldr	r2, [pc, #344]	; (8004250 <HAL_DMA_Start_IT+0x224>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00e      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a54      	ldr	r2, [pc, #336]	; (8004254 <HAL_DMA_Start_IT+0x228>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d009      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a53      	ldr	r2, [pc, #332]	; (8004258 <HAL_DMA_Start_IT+0x22c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d004      	beq.n	800411a <HAL_DMA_Start_IT+0xee>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a51      	ldr	r2, [pc, #324]	; (800425c <HAL_DMA_Start_IT+0x230>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d108      	bne.n	800412c <HAL_DMA_Start_IT+0x100>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0201 	bic.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e007      	b.n	800413c <HAL_DMA_Start_IT+0x110>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f001 f906 	bl	8005354 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a34      	ldr	r2, [pc, #208]	; (8004220 <HAL_DMA_Start_IT+0x1f4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d04a      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a33      	ldr	r2, [pc, #204]	; (8004224 <HAL_DMA_Start_IT+0x1f8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d045      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a31      	ldr	r2, [pc, #196]	; (8004228 <HAL_DMA_Start_IT+0x1fc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d040      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a30      	ldr	r2, [pc, #192]	; (800422c <HAL_DMA_Start_IT+0x200>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d03b      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2e      	ldr	r2, [pc, #184]	; (8004230 <HAL_DMA_Start_IT+0x204>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d036      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2d      	ldr	r2, [pc, #180]	; (8004234 <HAL_DMA_Start_IT+0x208>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d031      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a2b      	ldr	r2, [pc, #172]	; (8004238 <HAL_DMA_Start_IT+0x20c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d02c      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2a      	ldr	r2, [pc, #168]	; (800423c <HAL_DMA_Start_IT+0x210>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d027      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a28      	ldr	r2, [pc, #160]	; (8004240 <HAL_DMA_Start_IT+0x214>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d022      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a27      	ldr	r2, [pc, #156]	; (8004244 <HAL_DMA_Start_IT+0x218>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d01d      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a25      	ldr	r2, [pc, #148]	; (8004248 <HAL_DMA_Start_IT+0x21c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d018      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a24      	ldr	r2, [pc, #144]	; (800424c <HAL_DMA_Start_IT+0x220>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d013      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a22      	ldr	r2, [pc, #136]	; (8004250 <HAL_DMA_Start_IT+0x224>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00e      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a21      	ldr	r2, [pc, #132]	; (8004254 <HAL_DMA_Start_IT+0x228>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d009      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1f      	ldr	r2, [pc, #124]	; (8004258 <HAL_DMA_Start_IT+0x22c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d004      	beq.n	80041e8 <HAL_DMA_Start_IT+0x1bc>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1e      	ldr	r2, [pc, #120]	; (800425c <HAL_DMA_Start_IT+0x230>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d101      	bne.n	80041ec <HAL_DMA_Start_IT+0x1c0>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <HAL_DMA_Start_IT+0x1c2>
 80041ec:	2300      	movs	r3, #0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d036      	beq.n	8004260 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f023 021e 	bic.w	r2, r3, #30
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0216 	orr.w	r2, r2, #22
 8004204:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d03e      	beq.n	800428c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0208 	orr.w	r2, r2, #8
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	e035      	b.n	800428c <HAL_DMA_Start_IT+0x260>
 8004220:	40020010 	.word	0x40020010
 8004224:	40020028 	.word	0x40020028
 8004228:	40020040 	.word	0x40020040
 800422c:	40020058 	.word	0x40020058
 8004230:	40020070 	.word	0x40020070
 8004234:	40020088 	.word	0x40020088
 8004238:	400200a0 	.word	0x400200a0
 800423c:	400200b8 	.word	0x400200b8
 8004240:	40020410 	.word	0x40020410
 8004244:	40020428 	.word	0x40020428
 8004248:	40020440 	.word	0x40020440
 800424c:	40020458 	.word	0x40020458
 8004250:	40020470 	.word	0x40020470
 8004254:	40020488 	.word	0x40020488
 8004258:	400204a0 	.word	0x400204a0
 800425c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 020e 	bic.w	r2, r3, #14
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 020a 	orr.w	r2, r2, #10
 8004272:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0204 	orr.w	r2, r2, #4
 800428a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a83      	ldr	r2, [pc, #524]	; (80044a0 <HAL_DMA_Start_IT+0x474>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d072      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a82      	ldr	r2, [pc, #520]	; (80044a4 <HAL_DMA_Start_IT+0x478>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d06d      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a80      	ldr	r2, [pc, #512]	; (80044a8 <HAL_DMA_Start_IT+0x47c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d068      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a7f      	ldr	r2, [pc, #508]	; (80044ac <HAL_DMA_Start_IT+0x480>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d063      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a7d      	ldr	r2, [pc, #500]	; (80044b0 <HAL_DMA_Start_IT+0x484>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d05e      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a7c      	ldr	r2, [pc, #496]	; (80044b4 <HAL_DMA_Start_IT+0x488>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d059      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a7a      	ldr	r2, [pc, #488]	; (80044b8 <HAL_DMA_Start_IT+0x48c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d054      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a79      	ldr	r2, [pc, #484]	; (80044bc <HAL_DMA_Start_IT+0x490>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d04f      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a77      	ldr	r2, [pc, #476]	; (80044c0 <HAL_DMA_Start_IT+0x494>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d04a      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a76      	ldr	r2, [pc, #472]	; (80044c4 <HAL_DMA_Start_IT+0x498>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d045      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a74      	ldr	r2, [pc, #464]	; (80044c8 <HAL_DMA_Start_IT+0x49c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d040      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a73      	ldr	r2, [pc, #460]	; (80044cc <HAL_DMA_Start_IT+0x4a0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d03b      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a71      	ldr	r2, [pc, #452]	; (80044d0 <HAL_DMA_Start_IT+0x4a4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d036      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a70      	ldr	r2, [pc, #448]	; (80044d4 <HAL_DMA_Start_IT+0x4a8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d031      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a6e      	ldr	r2, [pc, #440]	; (80044d8 <HAL_DMA_Start_IT+0x4ac>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d02c      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a6d      	ldr	r2, [pc, #436]	; (80044dc <HAL_DMA_Start_IT+0x4b0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d027      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a6b      	ldr	r2, [pc, #428]	; (80044e0 <HAL_DMA_Start_IT+0x4b4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d022      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a6a      	ldr	r2, [pc, #424]	; (80044e4 <HAL_DMA_Start_IT+0x4b8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d01d      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a68      	ldr	r2, [pc, #416]	; (80044e8 <HAL_DMA_Start_IT+0x4bc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d018      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a67      	ldr	r2, [pc, #412]	; (80044ec <HAL_DMA_Start_IT+0x4c0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a65      	ldr	r2, [pc, #404]	; (80044f0 <HAL_DMA_Start_IT+0x4c4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00e      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a64      	ldr	r2, [pc, #400]	; (80044f4 <HAL_DMA_Start_IT+0x4c8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d009      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a62      	ldr	r2, [pc, #392]	; (80044f8 <HAL_DMA_Start_IT+0x4cc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_DMA_Start_IT+0x350>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a61      	ldr	r2, [pc, #388]	; (80044fc <HAL_DMA_Start_IT+0x4d0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d101      	bne.n	8004380 <HAL_DMA_Start_IT+0x354>
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <HAL_DMA_Start_IT+0x356>
 8004380:	2300      	movs	r3, #0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01a      	beq.n	80043bc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d007      	beq.n	80043a4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a37      	ldr	r2, [pc, #220]	; (80044a0 <HAL_DMA_Start_IT+0x474>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d04a      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a36      	ldr	r2, [pc, #216]	; (80044a4 <HAL_DMA_Start_IT+0x478>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d045      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a34      	ldr	r2, [pc, #208]	; (80044a8 <HAL_DMA_Start_IT+0x47c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d040      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a33      	ldr	r2, [pc, #204]	; (80044ac <HAL_DMA_Start_IT+0x480>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d03b      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a31      	ldr	r2, [pc, #196]	; (80044b0 <HAL_DMA_Start_IT+0x484>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d036      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a30      	ldr	r2, [pc, #192]	; (80044b4 <HAL_DMA_Start_IT+0x488>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d031      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2e      	ldr	r2, [pc, #184]	; (80044b8 <HAL_DMA_Start_IT+0x48c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d02c      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2d      	ldr	r2, [pc, #180]	; (80044bc <HAL_DMA_Start_IT+0x490>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d027      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2b      	ldr	r2, [pc, #172]	; (80044c0 <HAL_DMA_Start_IT+0x494>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d022      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2a      	ldr	r2, [pc, #168]	; (80044c4 <HAL_DMA_Start_IT+0x498>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d01d      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a28      	ldr	r2, [pc, #160]	; (80044c8 <HAL_DMA_Start_IT+0x49c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d018      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a27      	ldr	r2, [pc, #156]	; (80044cc <HAL_DMA_Start_IT+0x4a0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a25      	ldr	r2, [pc, #148]	; (80044d0 <HAL_DMA_Start_IT+0x4a4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00e      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a24      	ldr	r2, [pc, #144]	; (80044d4 <HAL_DMA_Start_IT+0x4a8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d009      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a22      	ldr	r2, [pc, #136]	; (80044d8 <HAL_DMA_Start_IT+0x4ac>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <HAL_DMA_Start_IT+0x430>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a21      	ldr	r2, [pc, #132]	; (80044dc <HAL_DMA_Start_IT+0x4b0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d108      	bne.n	800446e <HAL_DMA_Start_IT+0x442>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	e012      	b.n	8004494 <HAL_DMA_Start_IT+0x468>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0201 	orr.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e009      	b.n	8004494 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800448e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004494:	7dfb      	ldrb	r3, [r7, #23]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40020010 	.word	0x40020010
 80044a4:	40020028 	.word	0x40020028
 80044a8:	40020040 	.word	0x40020040
 80044ac:	40020058 	.word	0x40020058
 80044b0:	40020070 	.word	0x40020070
 80044b4:	40020088 	.word	0x40020088
 80044b8:	400200a0 	.word	0x400200a0
 80044bc:	400200b8 	.word	0x400200b8
 80044c0:	40020410 	.word	0x40020410
 80044c4:	40020428 	.word	0x40020428
 80044c8:	40020440 	.word	0x40020440
 80044cc:	40020458 	.word	0x40020458
 80044d0:	40020470 	.word	0x40020470
 80044d4:	40020488 	.word	0x40020488
 80044d8:	400204a0 	.word	0x400204a0
 80044dc:	400204b8 	.word	0x400204b8
 80044e0:	58025408 	.word	0x58025408
 80044e4:	5802541c 	.word	0x5802541c
 80044e8:	58025430 	.word	0x58025430
 80044ec:	58025444 	.word	0x58025444
 80044f0:	58025458 	.word	0x58025458
 80044f4:	5802546c 	.word	0x5802546c
 80044f8:	58025480 	.word	0x58025480
 80044fc:	58025494 	.word	0x58025494

08004500 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08a      	sub	sp, #40	; 0x28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800450c:	4b67      	ldr	r3, [pc, #412]	; (80046ac <HAL_DMA_IRQHandler+0x1ac>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a67      	ldr	r2, [pc, #412]	; (80046b0 <HAL_DMA_IRQHandler+0x1b0>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	0a9b      	lsrs	r3, r3, #10
 8004518:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a5f      	ldr	r2, [pc, #380]	; (80046b4 <HAL_DMA_IRQHandler+0x1b4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d04a      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a5d      	ldr	r2, [pc, #372]	; (80046b8 <HAL_DMA_IRQHandler+0x1b8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d045      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a5c      	ldr	r2, [pc, #368]	; (80046bc <HAL_DMA_IRQHandler+0x1bc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d040      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a5a      	ldr	r2, [pc, #360]	; (80046c0 <HAL_DMA_IRQHandler+0x1c0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d03b      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a59      	ldr	r2, [pc, #356]	; (80046c4 <HAL_DMA_IRQHandler+0x1c4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d036      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a57      	ldr	r2, [pc, #348]	; (80046c8 <HAL_DMA_IRQHandler+0x1c8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d031      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a56      	ldr	r2, [pc, #344]	; (80046cc <HAL_DMA_IRQHandler+0x1cc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d02c      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a54      	ldr	r2, [pc, #336]	; (80046d0 <HAL_DMA_IRQHandler+0x1d0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d027      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a53      	ldr	r2, [pc, #332]	; (80046d4 <HAL_DMA_IRQHandler+0x1d4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d022      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a51      	ldr	r2, [pc, #324]	; (80046d8 <HAL_DMA_IRQHandler+0x1d8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01d      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a50      	ldr	r2, [pc, #320]	; (80046dc <HAL_DMA_IRQHandler+0x1dc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d018      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a4e      	ldr	r2, [pc, #312]	; (80046e0 <HAL_DMA_IRQHandler+0x1e0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d013      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a4d      	ldr	r2, [pc, #308]	; (80046e4 <HAL_DMA_IRQHandler+0x1e4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00e      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a4b      	ldr	r2, [pc, #300]	; (80046e8 <HAL_DMA_IRQHandler+0x1e8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d009      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a4a      	ldr	r2, [pc, #296]	; (80046ec <HAL_DMA_IRQHandler+0x1ec>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d004      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a48      	ldr	r2, [pc, #288]	; (80046f0 <HAL_DMA_IRQHandler+0x1f0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d101      	bne.n	80045d6 <HAL_DMA_IRQHandler+0xd6>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <HAL_DMA_IRQHandler+0xd8>
 80045d6:	2300      	movs	r3, #0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 842b 	beq.w	8004e34 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	2208      	movs	r2, #8
 80045e8:	409a      	lsls	r2, r3
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 80a2 	beq.w	8004738 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a2e      	ldr	r2, [pc, #184]	; (80046b4 <HAL_DMA_IRQHandler+0x1b4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d04a      	beq.n	8004694 <HAL_DMA_IRQHandler+0x194>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a2d      	ldr	r2, [pc, #180]	; (80046b8 <HAL_DMA_IRQHandler+0x1b8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d045      	beq.n	8004694 <HAL_DMA_IRQHandler+0x194>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a2b      	ldr	r2, [pc, #172]	; (80046bc <HAL_DMA_IRQHandler+0x1bc>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d040      	beq.n	8004694 <HAL_DMA_IRQHandler+0x194>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a2a      	ldr	r2, [pc, #168]	; (80046c0 <HAL_DMA_IRQHandler+0x1c0>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d03b      	beq.n	8004694 <HAL_DMA_IRQHandler+0x194>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a28      	ldr	r2, [pc, #160]	; (80046c4 <HAL_DMA_IRQHandler+0x1c4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d036      	beq.n	8004694 <HAL_DMA_IRQHandler+0x194>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a27      	ldr	r2, [pc, #156]	; (80046c8 <HAL_DMA_IRQHandler+0x1c8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d031      	beq.n	8004694 <HAL_DMA_IRQHandler+0x194>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a25      	ldr	r2, [pc, #148]	; (80046cc <HAL_DMA_IRQHandler+0x1cc>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d02c      	beq.n	8004694 <HAL_DMA_IRQHandler+0x194>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a24      	ldr	r2, [pc, #144]	; (80046d0 <HAL_DMA_IRQHandler+0x1d0>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d027      	beq.n	8004694 <HAL_DMA_IRQHandler+0x194>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a22      	ldr	r2, [pc, #136]	; (80046d4 <HAL_DMA_IRQHandler+0x1d4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d022      	beq.n	8004694 <HAL_DMA_IRQHandler+0x194>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a21      	ldr	r2, [pc, #132]	; (80046d8 <HAL_DMA_IRQHandler+0x1d8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d01d      	beq.n	8004694 <HAL_DMA_IRQHandler+0x194>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1f      	ldr	r2, [pc, #124]	; (80046dc <HAL_DMA_IRQHandler+0x1dc>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d018      	beq.n	8004694 <HAL_DMA_IRQHandler+0x194>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <HAL_DMA_IRQHandler+0x1e0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <HAL_DMA_IRQHandler+0x194>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1c      	ldr	r2, [pc, #112]	; (80046e4 <HAL_DMA_IRQHandler+0x1e4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00e      	beq.n	8004694 <HAL_DMA_IRQHandler+0x194>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1b      	ldr	r2, [pc, #108]	; (80046e8 <HAL_DMA_IRQHandler+0x1e8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d009      	beq.n	8004694 <HAL_DMA_IRQHandler+0x194>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a19      	ldr	r2, [pc, #100]	; (80046ec <HAL_DMA_IRQHandler+0x1ec>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_DMA_IRQHandler+0x194>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <HAL_DMA_IRQHandler+0x1f0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d12f      	bne.n	80046f4 <HAL_DMA_IRQHandler+0x1f4>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bf14      	ite	ne
 80046a2:	2301      	movne	r3, #1
 80046a4:	2300      	moveq	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	e02e      	b.n	8004708 <HAL_DMA_IRQHandler+0x208>
 80046aa:	bf00      	nop
 80046ac:	24000000 	.word	0x24000000
 80046b0:	1b4e81b5 	.word	0x1b4e81b5
 80046b4:	40020010 	.word	0x40020010
 80046b8:	40020028 	.word	0x40020028
 80046bc:	40020040 	.word	0x40020040
 80046c0:	40020058 	.word	0x40020058
 80046c4:	40020070 	.word	0x40020070
 80046c8:	40020088 	.word	0x40020088
 80046cc:	400200a0 	.word	0x400200a0
 80046d0:	400200b8 	.word	0x400200b8
 80046d4:	40020410 	.word	0x40020410
 80046d8:	40020428 	.word	0x40020428
 80046dc:	40020440 	.word	0x40020440
 80046e0:	40020458 	.word	0x40020458
 80046e4:	40020470 	.word	0x40020470
 80046e8:	40020488 	.word	0x40020488
 80046ec:	400204a0 	.word	0x400204a0
 80046f0:	400204b8 	.word	0x400204b8
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bf14      	ite	ne
 8004702:	2301      	movne	r3, #1
 8004704:	2300      	moveq	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d015      	beq.n	8004738 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0204 	bic.w	r2, r2, #4
 800471a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	2208      	movs	r2, #8
 8004726:	409a      	lsls	r2, r3
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	f043 0201 	orr.w	r2, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	fa22 f303 	lsr.w	r3, r2, r3
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d06e      	beq.n	800482c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a69      	ldr	r2, [pc, #420]	; (80048f8 <HAL_DMA_IRQHandler+0x3f8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d04a      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2ee>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a67      	ldr	r2, [pc, #412]	; (80048fc <HAL_DMA_IRQHandler+0x3fc>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d045      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2ee>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a66      	ldr	r2, [pc, #408]	; (8004900 <HAL_DMA_IRQHandler+0x400>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d040      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2ee>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a64      	ldr	r2, [pc, #400]	; (8004904 <HAL_DMA_IRQHandler+0x404>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d03b      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2ee>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a63      	ldr	r2, [pc, #396]	; (8004908 <HAL_DMA_IRQHandler+0x408>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d036      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2ee>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a61      	ldr	r2, [pc, #388]	; (800490c <HAL_DMA_IRQHandler+0x40c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d031      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2ee>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a60      	ldr	r2, [pc, #384]	; (8004910 <HAL_DMA_IRQHandler+0x410>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d02c      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2ee>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a5e      	ldr	r2, [pc, #376]	; (8004914 <HAL_DMA_IRQHandler+0x414>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d027      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2ee>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a5d      	ldr	r2, [pc, #372]	; (8004918 <HAL_DMA_IRQHandler+0x418>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d022      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2ee>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a5b      	ldr	r2, [pc, #364]	; (800491c <HAL_DMA_IRQHandler+0x41c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01d      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2ee>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a5a      	ldr	r2, [pc, #360]	; (8004920 <HAL_DMA_IRQHandler+0x420>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d018      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2ee>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a58      	ldr	r2, [pc, #352]	; (8004924 <HAL_DMA_IRQHandler+0x424>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d013      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2ee>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a57      	ldr	r2, [pc, #348]	; (8004928 <HAL_DMA_IRQHandler+0x428>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00e      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2ee>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a55      	ldr	r2, [pc, #340]	; (800492c <HAL_DMA_IRQHandler+0x42c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2ee>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a54      	ldr	r2, [pc, #336]	; (8004930 <HAL_DMA_IRQHandler+0x430>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2ee>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a52      	ldr	r2, [pc, #328]	; (8004934 <HAL_DMA_IRQHandler+0x434>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d10a      	bne.n	8004804 <HAL_DMA_IRQHandler+0x304>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf14      	ite	ne
 80047fc:	2301      	movne	r3, #1
 80047fe:	2300      	moveq	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	e003      	b.n	800480c <HAL_DMA_IRQHandler+0x30c>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2300      	movs	r3, #0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00d      	beq.n	800482c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004814:	f003 031f 	and.w	r3, r3, #31
 8004818:	2201      	movs	r2, #1
 800481a:	409a      	lsls	r2, r3
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004824:	f043 0202 	orr.w	r2, r3, #2
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	2204      	movs	r2, #4
 8004836:	409a      	lsls	r2, r3
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 808f 	beq.w	8004960 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a2c      	ldr	r2, [pc, #176]	; (80048f8 <HAL_DMA_IRQHandler+0x3f8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d04a      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x3e2>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a2a      	ldr	r2, [pc, #168]	; (80048fc <HAL_DMA_IRQHandler+0x3fc>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d045      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x3e2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a29      	ldr	r2, [pc, #164]	; (8004900 <HAL_DMA_IRQHandler+0x400>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d040      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x3e2>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a27      	ldr	r2, [pc, #156]	; (8004904 <HAL_DMA_IRQHandler+0x404>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d03b      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x3e2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a26      	ldr	r2, [pc, #152]	; (8004908 <HAL_DMA_IRQHandler+0x408>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d036      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x3e2>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a24      	ldr	r2, [pc, #144]	; (800490c <HAL_DMA_IRQHandler+0x40c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d031      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x3e2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a23      	ldr	r2, [pc, #140]	; (8004910 <HAL_DMA_IRQHandler+0x410>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d02c      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x3e2>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a21      	ldr	r2, [pc, #132]	; (8004914 <HAL_DMA_IRQHandler+0x414>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d027      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x3e2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a20      	ldr	r2, [pc, #128]	; (8004918 <HAL_DMA_IRQHandler+0x418>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d022      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x3e2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1e      	ldr	r2, [pc, #120]	; (800491c <HAL_DMA_IRQHandler+0x41c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01d      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x3e2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <HAL_DMA_IRQHandler+0x420>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d018      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x3e2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1b      	ldr	r2, [pc, #108]	; (8004924 <HAL_DMA_IRQHandler+0x424>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d013      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x3e2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1a      	ldr	r2, [pc, #104]	; (8004928 <HAL_DMA_IRQHandler+0x428>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00e      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x3e2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_DMA_IRQHandler+0x42c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d009      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x3e2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a17      	ldr	r2, [pc, #92]	; (8004930 <HAL_DMA_IRQHandler+0x430>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d004      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x3e2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a15      	ldr	r2, [pc, #84]	; (8004934 <HAL_DMA_IRQHandler+0x434>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d12a      	bne.n	8004938 <HAL_DMA_IRQHandler+0x438>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bf14      	ite	ne
 80048f0:	2301      	movne	r3, #1
 80048f2:	2300      	moveq	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e023      	b.n	8004940 <HAL_DMA_IRQHandler+0x440>
 80048f8:	40020010 	.word	0x40020010
 80048fc:	40020028 	.word	0x40020028
 8004900:	40020040 	.word	0x40020040
 8004904:	40020058 	.word	0x40020058
 8004908:	40020070 	.word	0x40020070
 800490c:	40020088 	.word	0x40020088
 8004910:	400200a0 	.word	0x400200a0
 8004914:	400200b8 	.word	0x400200b8
 8004918:	40020410 	.word	0x40020410
 800491c:	40020428 	.word	0x40020428
 8004920:	40020440 	.word	0x40020440
 8004924:	40020458 	.word	0x40020458
 8004928:	40020470 	.word	0x40020470
 800492c:	40020488 	.word	0x40020488
 8004930:	400204a0 	.word	0x400204a0
 8004934:	400204b8 	.word	0x400204b8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00d      	beq.n	8004960 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004948:	f003 031f 	and.w	r3, r3, #31
 800494c:	2204      	movs	r2, #4
 800494e:	409a      	lsls	r2, r3
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004958:	f043 0204 	orr.w	r2, r3, #4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	f003 031f 	and.w	r3, r3, #31
 8004968:	2210      	movs	r2, #16
 800496a:	409a      	lsls	r2, r3
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80a6 	beq.w	8004ac2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a85      	ldr	r2, [pc, #532]	; (8004b90 <HAL_DMA_IRQHandler+0x690>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d04a      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x516>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a83      	ldr	r2, [pc, #524]	; (8004b94 <HAL_DMA_IRQHandler+0x694>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d045      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x516>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a82      	ldr	r2, [pc, #520]	; (8004b98 <HAL_DMA_IRQHandler+0x698>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d040      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x516>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a80      	ldr	r2, [pc, #512]	; (8004b9c <HAL_DMA_IRQHandler+0x69c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d03b      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x516>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a7f      	ldr	r2, [pc, #508]	; (8004ba0 <HAL_DMA_IRQHandler+0x6a0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d036      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x516>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a7d      	ldr	r2, [pc, #500]	; (8004ba4 <HAL_DMA_IRQHandler+0x6a4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d031      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x516>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a7c      	ldr	r2, [pc, #496]	; (8004ba8 <HAL_DMA_IRQHandler+0x6a8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d02c      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x516>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a7a      	ldr	r2, [pc, #488]	; (8004bac <HAL_DMA_IRQHandler+0x6ac>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d027      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x516>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a79      	ldr	r2, [pc, #484]	; (8004bb0 <HAL_DMA_IRQHandler+0x6b0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d022      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x516>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a77      	ldr	r2, [pc, #476]	; (8004bb4 <HAL_DMA_IRQHandler+0x6b4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d01d      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x516>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a76      	ldr	r2, [pc, #472]	; (8004bb8 <HAL_DMA_IRQHandler+0x6b8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d018      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x516>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a74      	ldr	r2, [pc, #464]	; (8004bbc <HAL_DMA_IRQHandler+0x6bc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d013      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x516>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a73      	ldr	r2, [pc, #460]	; (8004bc0 <HAL_DMA_IRQHandler+0x6c0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00e      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x516>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a71      	ldr	r2, [pc, #452]	; (8004bc4 <HAL_DMA_IRQHandler+0x6c4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d009      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x516>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a70      	ldr	r2, [pc, #448]	; (8004bc8 <HAL_DMA_IRQHandler+0x6c8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d004      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x516>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a6e      	ldr	r2, [pc, #440]	; (8004bcc <HAL_DMA_IRQHandler+0x6cc>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d10a      	bne.n	8004a2c <HAL_DMA_IRQHandler+0x52c>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bf14      	ite	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	2300      	moveq	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	e009      	b.n	8004a40 <HAL_DMA_IRQHandler+0x540>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bf14      	ite	ne
 8004a3a:	2301      	movne	r3, #1
 8004a3c:	2300      	moveq	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d03e      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	2210      	movs	r2, #16
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d018      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d108      	bne.n	8004a82 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d024      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	4798      	blx	r3
 8004a80:	e01f      	b.n	8004ac2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d01b      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	4798      	blx	r3
 8004a92:	e016      	b.n	8004ac2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d107      	bne.n	8004ab2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0208 	bic.w	r2, r2, #8
 8004ab0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	2220      	movs	r2, #32
 8004acc:	409a      	lsls	r2, r3
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8110 	beq.w	8004cf8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a2c      	ldr	r2, [pc, #176]	; (8004b90 <HAL_DMA_IRQHandler+0x690>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d04a      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x678>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a2b      	ldr	r2, [pc, #172]	; (8004b94 <HAL_DMA_IRQHandler+0x694>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d045      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x678>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a29      	ldr	r2, [pc, #164]	; (8004b98 <HAL_DMA_IRQHandler+0x698>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d040      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x678>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a28      	ldr	r2, [pc, #160]	; (8004b9c <HAL_DMA_IRQHandler+0x69c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d03b      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x678>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a26      	ldr	r2, [pc, #152]	; (8004ba0 <HAL_DMA_IRQHandler+0x6a0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d036      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x678>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a25      	ldr	r2, [pc, #148]	; (8004ba4 <HAL_DMA_IRQHandler+0x6a4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d031      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x678>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a23      	ldr	r2, [pc, #140]	; (8004ba8 <HAL_DMA_IRQHandler+0x6a8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d02c      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x678>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a22      	ldr	r2, [pc, #136]	; (8004bac <HAL_DMA_IRQHandler+0x6ac>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d027      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x678>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a20      	ldr	r2, [pc, #128]	; (8004bb0 <HAL_DMA_IRQHandler+0x6b0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d022      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x678>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1f      	ldr	r2, [pc, #124]	; (8004bb4 <HAL_DMA_IRQHandler+0x6b4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d01d      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x678>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1d      	ldr	r2, [pc, #116]	; (8004bb8 <HAL_DMA_IRQHandler+0x6b8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d018      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x678>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1c      	ldr	r2, [pc, #112]	; (8004bbc <HAL_DMA_IRQHandler+0x6bc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d013      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x678>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1a      	ldr	r2, [pc, #104]	; (8004bc0 <HAL_DMA_IRQHandler+0x6c0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00e      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x678>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a19      	ldr	r2, [pc, #100]	; (8004bc4 <HAL_DMA_IRQHandler+0x6c4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d009      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x678>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a17      	ldr	r2, [pc, #92]	; (8004bc8 <HAL_DMA_IRQHandler+0x6c8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d004      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x678>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a16      	ldr	r2, [pc, #88]	; (8004bcc <HAL_DMA_IRQHandler+0x6cc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d12b      	bne.n	8004bd0 <HAL_DMA_IRQHandler+0x6d0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bf14      	ite	ne
 8004b86:	2301      	movne	r3, #1
 8004b88:	2300      	moveq	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	e02a      	b.n	8004be4 <HAL_DMA_IRQHandler+0x6e4>
 8004b8e:	bf00      	nop
 8004b90:	40020010 	.word	0x40020010
 8004b94:	40020028 	.word	0x40020028
 8004b98:	40020040 	.word	0x40020040
 8004b9c:	40020058 	.word	0x40020058
 8004ba0:	40020070 	.word	0x40020070
 8004ba4:	40020088 	.word	0x40020088
 8004ba8:	400200a0 	.word	0x400200a0
 8004bac:	400200b8 	.word	0x400200b8
 8004bb0:	40020410 	.word	0x40020410
 8004bb4:	40020428 	.word	0x40020428
 8004bb8:	40020440 	.word	0x40020440
 8004bbc:	40020458 	.word	0x40020458
 8004bc0:	40020470 	.word	0x40020470
 8004bc4:	40020488 	.word	0x40020488
 8004bc8:	400204a0 	.word	0x400204a0
 8004bcc:	400204b8 	.word	0x400204b8
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	bf14      	ite	ne
 8004bde:	2301      	movne	r3, #1
 8004be0:	2300      	moveq	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8087 	beq.w	8004cf8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bee:	f003 031f 	and.w	r3, r3, #31
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	409a      	lsls	r2, r3
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d139      	bne.n	8004c7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0216 	bic.w	r2, r2, #22
 8004c14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695a      	ldr	r2, [r3, #20]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d103      	bne.n	8004c36 <HAL_DMA_IRQHandler+0x736>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d007      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0208 	bic.w	r2, r2, #8
 8004c44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	223f      	movs	r2, #63	; 0x3f
 8004c50:	409a      	lsls	r2, r3
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 834a 	beq.w	8005304 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	4798      	blx	r3
          }
          return;
 8004c78:	e344      	b.n	8005304 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d018      	beq.n	8004cba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d108      	bne.n	8004ca8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d02c      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
 8004ca6:	e027      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d023      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	4798      	blx	r3
 8004cb8:	e01e      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10f      	bne.n	8004ce8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0210 	bic.w	r2, r2, #16
 8004cd6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8306 	beq.w	800530e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8088 	beq.w	8004e20 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2204      	movs	r2, #4
 8004d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a7a      	ldr	r2, [pc, #488]	; (8004f08 <HAL_DMA_IRQHandler+0xa08>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d04a      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x8b8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a79      	ldr	r2, [pc, #484]	; (8004f0c <HAL_DMA_IRQHandler+0xa0c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d045      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x8b8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a77      	ldr	r2, [pc, #476]	; (8004f10 <HAL_DMA_IRQHandler+0xa10>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d040      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x8b8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a76      	ldr	r2, [pc, #472]	; (8004f14 <HAL_DMA_IRQHandler+0xa14>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d03b      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x8b8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a74      	ldr	r2, [pc, #464]	; (8004f18 <HAL_DMA_IRQHandler+0xa18>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d036      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x8b8>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a73      	ldr	r2, [pc, #460]	; (8004f1c <HAL_DMA_IRQHandler+0xa1c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d031      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x8b8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a71      	ldr	r2, [pc, #452]	; (8004f20 <HAL_DMA_IRQHandler+0xa20>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d02c      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x8b8>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a70      	ldr	r2, [pc, #448]	; (8004f24 <HAL_DMA_IRQHandler+0xa24>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d027      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x8b8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a6e      	ldr	r2, [pc, #440]	; (8004f28 <HAL_DMA_IRQHandler+0xa28>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d022      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x8b8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a6d      	ldr	r2, [pc, #436]	; (8004f2c <HAL_DMA_IRQHandler+0xa2c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d01d      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x8b8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a6b      	ldr	r2, [pc, #428]	; (8004f30 <HAL_DMA_IRQHandler+0xa30>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d018      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x8b8>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a6a      	ldr	r2, [pc, #424]	; (8004f34 <HAL_DMA_IRQHandler+0xa34>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d013      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x8b8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a68      	ldr	r2, [pc, #416]	; (8004f38 <HAL_DMA_IRQHandler+0xa38>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00e      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x8b8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a67      	ldr	r2, [pc, #412]	; (8004f3c <HAL_DMA_IRQHandler+0xa3c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d009      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x8b8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a65      	ldr	r2, [pc, #404]	; (8004f40 <HAL_DMA_IRQHandler+0xa40>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d004      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x8b8>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a64      	ldr	r2, [pc, #400]	; (8004f44 <HAL_DMA_IRQHandler+0xa44>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d108      	bne.n	8004dca <HAL_DMA_IRQHandler+0x8ca>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0201 	bic.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	e007      	b.n	8004dda <HAL_DMA_IRQHandler+0x8da>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0201 	bic.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d307      	bcc.n	8004df6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f2      	bne.n	8004dda <HAL_DMA_IRQHandler+0x8da>
 8004df4:	e000      	b.n	8004df8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004df6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d004      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2203      	movs	r2, #3
 8004e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004e16:	e003      	b.n	8004e20 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8272 	beq.w	800530e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	4798      	blx	r3
 8004e32:	e26c      	b.n	800530e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a43      	ldr	r2, [pc, #268]	; (8004f48 <HAL_DMA_IRQHandler+0xa48>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d022      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x984>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a42      	ldr	r2, [pc, #264]	; (8004f4c <HAL_DMA_IRQHandler+0xa4c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d01d      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x984>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a40      	ldr	r2, [pc, #256]	; (8004f50 <HAL_DMA_IRQHandler+0xa50>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d018      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x984>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a3f      	ldr	r2, [pc, #252]	; (8004f54 <HAL_DMA_IRQHandler+0xa54>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d013      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x984>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a3d      	ldr	r2, [pc, #244]	; (8004f58 <HAL_DMA_IRQHandler+0xa58>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00e      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x984>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a3c      	ldr	r2, [pc, #240]	; (8004f5c <HAL_DMA_IRQHandler+0xa5c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d009      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x984>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a3a      	ldr	r2, [pc, #232]	; (8004f60 <HAL_DMA_IRQHandler+0xa60>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x984>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a39      	ldr	r2, [pc, #228]	; (8004f64 <HAL_DMA_IRQHandler+0xa64>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d101      	bne.n	8004e88 <HAL_DMA_IRQHandler+0x988>
 8004e84:	2301      	movs	r3, #1
 8004e86:	e000      	b.n	8004e8a <HAL_DMA_IRQHandler+0x98a>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 823f 	beq.w	800530e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	2204      	movs	r2, #4
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80cd 	beq.w	8005048 <HAL_DMA_IRQHandler+0xb48>
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80c7 	beq.w	8005048 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ebe:	f003 031f 	and.w	r3, r3, #31
 8004ec2:	2204      	movs	r2, #4
 8004ec4:	409a      	lsls	r2, r3
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d049      	beq.n	8004f68 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d109      	bne.n	8004ef2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 8210 	beq.w	8005308 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ef0:	e20a      	b.n	8005308 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 8206 	beq.w	8005308 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f04:	e200      	b.n	8005308 <HAL_DMA_IRQHandler+0xe08>
 8004f06:	bf00      	nop
 8004f08:	40020010 	.word	0x40020010
 8004f0c:	40020028 	.word	0x40020028
 8004f10:	40020040 	.word	0x40020040
 8004f14:	40020058 	.word	0x40020058
 8004f18:	40020070 	.word	0x40020070
 8004f1c:	40020088 	.word	0x40020088
 8004f20:	400200a0 	.word	0x400200a0
 8004f24:	400200b8 	.word	0x400200b8
 8004f28:	40020410 	.word	0x40020410
 8004f2c:	40020428 	.word	0x40020428
 8004f30:	40020440 	.word	0x40020440
 8004f34:	40020458 	.word	0x40020458
 8004f38:	40020470 	.word	0x40020470
 8004f3c:	40020488 	.word	0x40020488
 8004f40:	400204a0 	.word	0x400204a0
 8004f44:	400204b8 	.word	0x400204b8
 8004f48:	58025408 	.word	0x58025408
 8004f4c:	5802541c 	.word	0x5802541c
 8004f50:	58025430 	.word	0x58025430
 8004f54:	58025444 	.word	0x58025444
 8004f58:	58025458 	.word	0x58025458
 8004f5c:	5802546c 	.word	0x5802546c
 8004f60:	58025480 	.word	0x58025480
 8004f64:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d160      	bne.n	8005034 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a8c      	ldr	r2, [pc, #560]	; (80051a8 <HAL_DMA_IRQHandler+0xca8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d04a      	beq.n	8005012 <HAL_DMA_IRQHandler+0xb12>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a8a      	ldr	r2, [pc, #552]	; (80051ac <HAL_DMA_IRQHandler+0xcac>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d045      	beq.n	8005012 <HAL_DMA_IRQHandler+0xb12>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a89      	ldr	r2, [pc, #548]	; (80051b0 <HAL_DMA_IRQHandler+0xcb0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d040      	beq.n	8005012 <HAL_DMA_IRQHandler+0xb12>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a87      	ldr	r2, [pc, #540]	; (80051b4 <HAL_DMA_IRQHandler+0xcb4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d03b      	beq.n	8005012 <HAL_DMA_IRQHandler+0xb12>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a86      	ldr	r2, [pc, #536]	; (80051b8 <HAL_DMA_IRQHandler+0xcb8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d036      	beq.n	8005012 <HAL_DMA_IRQHandler+0xb12>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a84      	ldr	r2, [pc, #528]	; (80051bc <HAL_DMA_IRQHandler+0xcbc>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d031      	beq.n	8005012 <HAL_DMA_IRQHandler+0xb12>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a83      	ldr	r2, [pc, #524]	; (80051c0 <HAL_DMA_IRQHandler+0xcc0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d02c      	beq.n	8005012 <HAL_DMA_IRQHandler+0xb12>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a81      	ldr	r2, [pc, #516]	; (80051c4 <HAL_DMA_IRQHandler+0xcc4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d027      	beq.n	8005012 <HAL_DMA_IRQHandler+0xb12>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a80      	ldr	r2, [pc, #512]	; (80051c8 <HAL_DMA_IRQHandler+0xcc8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d022      	beq.n	8005012 <HAL_DMA_IRQHandler+0xb12>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a7e      	ldr	r2, [pc, #504]	; (80051cc <HAL_DMA_IRQHandler+0xccc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d01d      	beq.n	8005012 <HAL_DMA_IRQHandler+0xb12>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a7d      	ldr	r2, [pc, #500]	; (80051d0 <HAL_DMA_IRQHandler+0xcd0>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d018      	beq.n	8005012 <HAL_DMA_IRQHandler+0xb12>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a7b      	ldr	r2, [pc, #492]	; (80051d4 <HAL_DMA_IRQHandler+0xcd4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d013      	beq.n	8005012 <HAL_DMA_IRQHandler+0xb12>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a7a      	ldr	r2, [pc, #488]	; (80051d8 <HAL_DMA_IRQHandler+0xcd8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00e      	beq.n	8005012 <HAL_DMA_IRQHandler+0xb12>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a78      	ldr	r2, [pc, #480]	; (80051dc <HAL_DMA_IRQHandler+0xcdc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d009      	beq.n	8005012 <HAL_DMA_IRQHandler+0xb12>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a77      	ldr	r2, [pc, #476]	; (80051e0 <HAL_DMA_IRQHandler+0xce0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d004      	beq.n	8005012 <HAL_DMA_IRQHandler+0xb12>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a75      	ldr	r2, [pc, #468]	; (80051e4 <HAL_DMA_IRQHandler+0xce4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d108      	bne.n	8005024 <HAL_DMA_IRQHandler+0xb24>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0208 	bic.w	r2, r2, #8
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	e007      	b.n	8005034 <HAL_DMA_IRQHandler+0xb34>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0204 	bic.w	r2, r2, #4
 8005032:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8165 	beq.w	8005308 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005046:	e15f      	b.n	8005308 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504c:	f003 031f 	and.w	r3, r3, #31
 8005050:	2202      	movs	r2, #2
 8005052:	409a      	lsls	r2, r3
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	4013      	ands	r3, r2
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80c5 	beq.w	80051e8 <HAL_DMA_IRQHandler+0xce8>
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80bf 	beq.w	80051e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2202      	movs	r2, #2
 8005074:	409a      	lsls	r2, r3
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d018      	beq.n	80050b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 813a 	beq.w	800530c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050a0:	e134      	b.n	800530c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8130 	beq.w	800530c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050b4:	e12a      	b.n	800530c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d168      	bne.n	8005192 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a38      	ldr	r2, [pc, #224]	; (80051a8 <HAL_DMA_IRQHandler+0xca8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d04a      	beq.n	8005160 <HAL_DMA_IRQHandler+0xc60>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a37      	ldr	r2, [pc, #220]	; (80051ac <HAL_DMA_IRQHandler+0xcac>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d045      	beq.n	8005160 <HAL_DMA_IRQHandler+0xc60>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a35      	ldr	r2, [pc, #212]	; (80051b0 <HAL_DMA_IRQHandler+0xcb0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d040      	beq.n	8005160 <HAL_DMA_IRQHandler+0xc60>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a34      	ldr	r2, [pc, #208]	; (80051b4 <HAL_DMA_IRQHandler+0xcb4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d03b      	beq.n	8005160 <HAL_DMA_IRQHandler+0xc60>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a32      	ldr	r2, [pc, #200]	; (80051b8 <HAL_DMA_IRQHandler+0xcb8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d036      	beq.n	8005160 <HAL_DMA_IRQHandler+0xc60>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a31      	ldr	r2, [pc, #196]	; (80051bc <HAL_DMA_IRQHandler+0xcbc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d031      	beq.n	8005160 <HAL_DMA_IRQHandler+0xc60>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a2f      	ldr	r2, [pc, #188]	; (80051c0 <HAL_DMA_IRQHandler+0xcc0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d02c      	beq.n	8005160 <HAL_DMA_IRQHandler+0xc60>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a2e      	ldr	r2, [pc, #184]	; (80051c4 <HAL_DMA_IRQHandler+0xcc4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d027      	beq.n	8005160 <HAL_DMA_IRQHandler+0xc60>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a2c      	ldr	r2, [pc, #176]	; (80051c8 <HAL_DMA_IRQHandler+0xcc8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d022      	beq.n	8005160 <HAL_DMA_IRQHandler+0xc60>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a2b      	ldr	r2, [pc, #172]	; (80051cc <HAL_DMA_IRQHandler+0xccc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d01d      	beq.n	8005160 <HAL_DMA_IRQHandler+0xc60>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <HAL_DMA_IRQHandler+0xcd0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d018      	beq.n	8005160 <HAL_DMA_IRQHandler+0xc60>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a28      	ldr	r2, [pc, #160]	; (80051d4 <HAL_DMA_IRQHandler+0xcd4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d013      	beq.n	8005160 <HAL_DMA_IRQHandler+0xc60>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a26      	ldr	r2, [pc, #152]	; (80051d8 <HAL_DMA_IRQHandler+0xcd8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00e      	beq.n	8005160 <HAL_DMA_IRQHandler+0xc60>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a25      	ldr	r2, [pc, #148]	; (80051dc <HAL_DMA_IRQHandler+0xcdc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d009      	beq.n	8005160 <HAL_DMA_IRQHandler+0xc60>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a23      	ldr	r2, [pc, #140]	; (80051e0 <HAL_DMA_IRQHandler+0xce0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <HAL_DMA_IRQHandler+0xc60>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a22      	ldr	r2, [pc, #136]	; (80051e4 <HAL_DMA_IRQHandler+0xce4>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d108      	bne.n	8005172 <HAL_DMA_IRQHandler+0xc72>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0214 	bic.w	r2, r2, #20
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	e007      	b.n	8005182 <HAL_DMA_IRQHandler+0xc82>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 020a 	bic.w	r2, r2, #10
 8005180:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 80b8 	beq.w	800530c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051a4:	e0b2      	b.n	800530c <HAL_DMA_IRQHandler+0xe0c>
 80051a6:	bf00      	nop
 80051a8:	40020010 	.word	0x40020010
 80051ac:	40020028 	.word	0x40020028
 80051b0:	40020040 	.word	0x40020040
 80051b4:	40020058 	.word	0x40020058
 80051b8:	40020070 	.word	0x40020070
 80051bc:	40020088 	.word	0x40020088
 80051c0:	400200a0 	.word	0x400200a0
 80051c4:	400200b8 	.word	0x400200b8
 80051c8:	40020410 	.word	0x40020410
 80051cc:	40020428 	.word	0x40020428
 80051d0:	40020440 	.word	0x40020440
 80051d4:	40020458 	.word	0x40020458
 80051d8:	40020470 	.word	0x40020470
 80051dc:	40020488 	.word	0x40020488
 80051e0:	400204a0 	.word	0x400204a0
 80051e4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	2208      	movs	r2, #8
 80051f2:	409a      	lsls	r2, r3
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 8088 	beq.w	800530e <HAL_DMA_IRQHandler+0xe0e>
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8082 	beq.w	800530e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a41      	ldr	r2, [pc, #260]	; (8005314 <HAL_DMA_IRQHandler+0xe14>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d04a      	beq.n	80052aa <HAL_DMA_IRQHandler+0xdaa>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a3f      	ldr	r2, [pc, #252]	; (8005318 <HAL_DMA_IRQHandler+0xe18>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d045      	beq.n	80052aa <HAL_DMA_IRQHandler+0xdaa>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a3e      	ldr	r2, [pc, #248]	; (800531c <HAL_DMA_IRQHandler+0xe1c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d040      	beq.n	80052aa <HAL_DMA_IRQHandler+0xdaa>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a3c      	ldr	r2, [pc, #240]	; (8005320 <HAL_DMA_IRQHandler+0xe20>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d03b      	beq.n	80052aa <HAL_DMA_IRQHandler+0xdaa>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a3b      	ldr	r2, [pc, #236]	; (8005324 <HAL_DMA_IRQHandler+0xe24>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d036      	beq.n	80052aa <HAL_DMA_IRQHandler+0xdaa>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a39      	ldr	r2, [pc, #228]	; (8005328 <HAL_DMA_IRQHandler+0xe28>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d031      	beq.n	80052aa <HAL_DMA_IRQHandler+0xdaa>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a38      	ldr	r2, [pc, #224]	; (800532c <HAL_DMA_IRQHandler+0xe2c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d02c      	beq.n	80052aa <HAL_DMA_IRQHandler+0xdaa>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a36      	ldr	r2, [pc, #216]	; (8005330 <HAL_DMA_IRQHandler+0xe30>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d027      	beq.n	80052aa <HAL_DMA_IRQHandler+0xdaa>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a35      	ldr	r2, [pc, #212]	; (8005334 <HAL_DMA_IRQHandler+0xe34>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d022      	beq.n	80052aa <HAL_DMA_IRQHandler+0xdaa>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a33      	ldr	r2, [pc, #204]	; (8005338 <HAL_DMA_IRQHandler+0xe38>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d01d      	beq.n	80052aa <HAL_DMA_IRQHandler+0xdaa>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a32      	ldr	r2, [pc, #200]	; (800533c <HAL_DMA_IRQHandler+0xe3c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d018      	beq.n	80052aa <HAL_DMA_IRQHandler+0xdaa>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a30      	ldr	r2, [pc, #192]	; (8005340 <HAL_DMA_IRQHandler+0xe40>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d013      	beq.n	80052aa <HAL_DMA_IRQHandler+0xdaa>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a2f      	ldr	r2, [pc, #188]	; (8005344 <HAL_DMA_IRQHandler+0xe44>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00e      	beq.n	80052aa <HAL_DMA_IRQHandler+0xdaa>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a2d      	ldr	r2, [pc, #180]	; (8005348 <HAL_DMA_IRQHandler+0xe48>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d009      	beq.n	80052aa <HAL_DMA_IRQHandler+0xdaa>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a2c      	ldr	r2, [pc, #176]	; (800534c <HAL_DMA_IRQHandler+0xe4c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d004      	beq.n	80052aa <HAL_DMA_IRQHandler+0xdaa>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a2a      	ldr	r2, [pc, #168]	; (8005350 <HAL_DMA_IRQHandler+0xe50>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d108      	bne.n	80052bc <HAL_DMA_IRQHandler+0xdbc>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 021c 	bic.w	r2, r2, #28
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	e007      	b.n	80052cc <HAL_DMA_IRQHandler+0xdcc>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 020e 	bic.w	r2, r2, #14
 80052ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d0:	f003 031f 	and.w	r3, r3, #31
 80052d4:	2201      	movs	r2, #1
 80052d6:	409a      	lsls	r2, r3
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d009      	beq.n	800530e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	4798      	blx	r3
 8005302:	e004      	b.n	800530e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005304:	bf00      	nop
 8005306:	e002      	b.n	800530e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005308:	bf00      	nop
 800530a:	e000      	b.n	800530e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800530c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800530e:	3728      	adds	r7, #40	; 0x28
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40020010 	.word	0x40020010
 8005318:	40020028 	.word	0x40020028
 800531c:	40020040 	.word	0x40020040
 8005320:	40020058 	.word	0x40020058
 8005324:	40020070 	.word	0x40020070
 8005328:	40020088 	.word	0x40020088
 800532c:	400200a0 	.word	0x400200a0
 8005330:	400200b8 	.word	0x400200b8
 8005334:	40020410 	.word	0x40020410
 8005338:	40020428 	.word	0x40020428
 800533c:	40020440 	.word	0x40020440
 8005340:	40020458 	.word	0x40020458
 8005344:	40020470 	.word	0x40020470
 8005348:	40020488 	.word	0x40020488
 800534c:	400204a0 	.word	0x400204a0
 8005350:	400204b8 	.word	0x400204b8

08005354 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005366:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a84      	ldr	r2, [pc, #528]	; (8005584 <DMA_SetConfig+0x230>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d072      	beq.n	800545e <DMA_SetConfig+0x10a>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a82      	ldr	r2, [pc, #520]	; (8005588 <DMA_SetConfig+0x234>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d06d      	beq.n	800545e <DMA_SetConfig+0x10a>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a81      	ldr	r2, [pc, #516]	; (800558c <DMA_SetConfig+0x238>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d068      	beq.n	800545e <DMA_SetConfig+0x10a>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a7f      	ldr	r2, [pc, #508]	; (8005590 <DMA_SetConfig+0x23c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d063      	beq.n	800545e <DMA_SetConfig+0x10a>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a7e      	ldr	r2, [pc, #504]	; (8005594 <DMA_SetConfig+0x240>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d05e      	beq.n	800545e <DMA_SetConfig+0x10a>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a7c      	ldr	r2, [pc, #496]	; (8005598 <DMA_SetConfig+0x244>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d059      	beq.n	800545e <DMA_SetConfig+0x10a>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a7b      	ldr	r2, [pc, #492]	; (800559c <DMA_SetConfig+0x248>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d054      	beq.n	800545e <DMA_SetConfig+0x10a>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a79      	ldr	r2, [pc, #484]	; (80055a0 <DMA_SetConfig+0x24c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d04f      	beq.n	800545e <DMA_SetConfig+0x10a>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a78      	ldr	r2, [pc, #480]	; (80055a4 <DMA_SetConfig+0x250>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d04a      	beq.n	800545e <DMA_SetConfig+0x10a>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a76      	ldr	r2, [pc, #472]	; (80055a8 <DMA_SetConfig+0x254>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d045      	beq.n	800545e <DMA_SetConfig+0x10a>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a75      	ldr	r2, [pc, #468]	; (80055ac <DMA_SetConfig+0x258>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d040      	beq.n	800545e <DMA_SetConfig+0x10a>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a73      	ldr	r2, [pc, #460]	; (80055b0 <DMA_SetConfig+0x25c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d03b      	beq.n	800545e <DMA_SetConfig+0x10a>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a72      	ldr	r2, [pc, #456]	; (80055b4 <DMA_SetConfig+0x260>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d036      	beq.n	800545e <DMA_SetConfig+0x10a>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a70      	ldr	r2, [pc, #448]	; (80055b8 <DMA_SetConfig+0x264>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d031      	beq.n	800545e <DMA_SetConfig+0x10a>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a6f      	ldr	r2, [pc, #444]	; (80055bc <DMA_SetConfig+0x268>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d02c      	beq.n	800545e <DMA_SetConfig+0x10a>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a6d      	ldr	r2, [pc, #436]	; (80055c0 <DMA_SetConfig+0x26c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d027      	beq.n	800545e <DMA_SetConfig+0x10a>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a6c      	ldr	r2, [pc, #432]	; (80055c4 <DMA_SetConfig+0x270>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d022      	beq.n	800545e <DMA_SetConfig+0x10a>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a6a      	ldr	r2, [pc, #424]	; (80055c8 <DMA_SetConfig+0x274>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d01d      	beq.n	800545e <DMA_SetConfig+0x10a>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a69      	ldr	r2, [pc, #420]	; (80055cc <DMA_SetConfig+0x278>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d018      	beq.n	800545e <DMA_SetConfig+0x10a>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a67      	ldr	r2, [pc, #412]	; (80055d0 <DMA_SetConfig+0x27c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d013      	beq.n	800545e <DMA_SetConfig+0x10a>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a66      	ldr	r2, [pc, #408]	; (80055d4 <DMA_SetConfig+0x280>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00e      	beq.n	800545e <DMA_SetConfig+0x10a>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a64      	ldr	r2, [pc, #400]	; (80055d8 <DMA_SetConfig+0x284>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d009      	beq.n	800545e <DMA_SetConfig+0x10a>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a63      	ldr	r2, [pc, #396]	; (80055dc <DMA_SetConfig+0x288>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d004      	beq.n	800545e <DMA_SetConfig+0x10a>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a61      	ldr	r2, [pc, #388]	; (80055e0 <DMA_SetConfig+0x28c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d101      	bne.n	8005462 <DMA_SetConfig+0x10e>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <DMA_SetConfig+0x110>
 8005462:	2300      	movs	r3, #0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00d      	beq.n	8005484 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005470:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d004      	beq.n	8005484 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005482:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a3e      	ldr	r2, [pc, #248]	; (8005584 <DMA_SetConfig+0x230>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d04a      	beq.n	8005524 <DMA_SetConfig+0x1d0>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a3d      	ldr	r2, [pc, #244]	; (8005588 <DMA_SetConfig+0x234>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d045      	beq.n	8005524 <DMA_SetConfig+0x1d0>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a3b      	ldr	r2, [pc, #236]	; (800558c <DMA_SetConfig+0x238>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d040      	beq.n	8005524 <DMA_SetConfig+0x1d0>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a3a      	ldr	r2, [pc, #232]	; (8005590 <DMA_SetConfig+0x23c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d03b      	beq.n	8005524 <DMA_SetConfig+0x1d0>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a38      	ldr	r2, [pc, #224]	; (8005594 <DMA_SetConfig+0x240>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d036      	beq.n	8005524 <DMA_SetConfig+0x1d0>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a37      	ldr	r2, [pc, #220]	; (8005598 <DMA_SetConfig+0x244>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d031      	beq.n	8005524 <DMA_SetConfig+0x1d0>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a35      	ldr	r2, [pc, #212]	; (800559c <DMA_SetConfig+0x248>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d02c      	beq.n	8005524 <DMA_SetConfig+0x1d0>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a34      	ldr	r2, [pc, #208]	; (80055a0 <DMA_SetConfig+0x24c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d027      	beq.n	8005524 <DMA_SetConfig+0x1d0>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a32      	ldr	r2, [pc, #200]	; (80055a4 <DMA_SetConfig+0x250>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d022      	beq.n	8005524 <DMA_SetConfig+0x1d0>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a31      	ldr	r2, [pc, #196]	; (80055a8 <DMA_SetConfig+0x254>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d01d      	beq.n	8005524 <DMA_SetConfig+0x1d0>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a2f      	ldr	r2, [pc, #188]	; (80055ac <DMA_SetConfig+0x258>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d018      	beq.n	8005524 <DMA_SetConfig+0x1d0>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a2e      	ldr	r2, [pc, #184]	; (80055b0 <DMA_SetConfig+0x25c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d013      	beq.n	8005524 <DMA_SetConfig+0x1d0>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a2c      	ldr	r2, [pc, #176]	; (80055b4 <DMA_SetConfig+0x260>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00e      	beq.n	8005524 <DMA_SetConfig+0x1d0>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a2b      	ldr	r2, [pc, #172]	; (80055b8 <DMA_SetConfig+0x264>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d009      	beq.n	8005524 <DMA_SetConfig+0x1d0>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a29      	ldr	r2, [pc, #164]	; (80055bc <DMA_SetConfig+0x268>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <DMA_SetConfig+0x1d0>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a28      	ldr	r2, [pc, #160]	; (80055c0 <DMA_SetConfig+0x26c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d101      	bne.n	8005528 <DMA_SetConfig+0x1d4>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <DMA_SetConfig+0x1d6>
 8005528:	2300      	movs	r3, #0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d05a      	beq.n	80055e4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005532:	f003 031f 	and.w	r3, r3, #31
 8005536:	223f      	movs	r2, #63	; 0x3f
 8005538:	409a      	lsls	r2, r3
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800554c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d108      	bne.n	8005570 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800556e:	e087      	b.n	8005680 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	60da      	str	r2, [r3, #12]
}
 8005580:	e07e      	b.n	8005680 <DMA_SetConfig+0x32c>
 8005582:	bf00      	nop
 8005584:	40020010 	.word	0x40020010
 8005588:	40020028 	.word	0x40020028
 800558c:	40020040 	.word	0x40020040
 8005590:	40020058 	.word	0x40020058
 8005594:	40020070 	.word	0x40020070
 8005598:	40020088 	.word	0x40020088
 800559c:	400200a0 	.word	0x400200a0
 80055a0:	400200b8 	.word	0x400200b8
 80055a4:	40020410 	.word	0x40020410
 80055a8:	40020428 	.word	0x40020428
 80055ac:	40020440 	.word	0x40020440
 80055b0:	40020458 	.word	0x40020458
 80055b4:	40020470 	.word	0x40020470
 80055b8:	40020488 	.word	0x40020488
 80055bc:	400204a0 	.word	0x400204a0
 80055c0:	400204b8 	.word	0x400204b8
 80055c4:	58025408 	.word	0x58025408
 80055c8:	5802541c 	.word	0x5802541c
 80055cc:	58025430 	.word	0x58025430
 80055d0:	58025444 	.word	0x58025444
 80055d4:	58025458 	.word	0x58025458
 80055d8:	5802546c 	.word	0x5802546c
 80055dc:	58025480 	.word	0x58025480
 80055e0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a28      	ldr	r2, [pc, #160]	; (800568c <DMA_SetConfig+0x338>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d022      	beq.n	8005634 <DMA_SetConfig+0x2e0>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a27      	ldr	r2, [pc, #156]	; (8005690 <DMA_SetConfig+0x33c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d01d      	beq.n	8005634 <DMA_SetConfig+0x2e0>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a25      	ldr	r2, [pc, #148]	; (8005694 <DMA_SetConfig+0x340>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d018      	beq.n	8005634 <DMA_SetConfig+0x2e0>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a24      	ldr	r2, [pc, #144]	; (8005698 <DMA_SetConfig+0x344>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d013      	beq.n	8005634 <DMA_SetConfig+0x2e0>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a22      	ldr	r2, [pc, #136]	; (800569c <DMA_SetConfig+0x348>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00e      	beq.n	8005634 <DMA_SetConfig+0x2e0>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a21      	ldr	r2, [pc, #132]	; (80056a0 <DMA_SetConfig+0x34c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d009      	beq.n	8005634 <DMA_SetConfig+0x2e0>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1f      	ldr	r2, [pc, #124]	; (80056a4 <DMA_SetConfig+0x350>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d004      	beq.n	8005634 <DMA_SetConfig+0x2e0>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a1e      	ldr	r2, [pc, #120]	; (80056a8 <DMA_SetConfig+0x354>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d101      	bne.n	8005638 <DMA_SetConfig+0x2e4>
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <DMA_SetConfig+0x2e6>
 8005638:	2300      	movs	r3, #0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d020      	beq.n	8005680 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	2201      	movs	r2, #1
 8005648:	409a      	lsls	r2, r3
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	2b40      	cmp	r3, #64	; 0x40
 800565c:	d108      	bne.n	8005670 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	60da      	str	r2, [r3, #12]
}
 800566e:	e007      	b.n	8005680 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	60da      	str	r2, [r3, #12]
}
 8005680:	bf00      	nop
 8005682:	371c      	adds	r7, #28
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	58025408 	.word	0x58025408
 8005690:	5802541c 	.word	0x5802541c
 8005694:	58025430 	.word	0x58025430
 8005698:	58025444 	.word	0x58025444
 800569c:	58025458 	.word	0x58025458
 80056a0:	5802546c 	.word	0x5802546c
 80056a4:	58025480 	.word	0x58025480
 80056a8:	58025494 	.word	0x58025494

080056ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a42      	ldr	r2, [pc, #264]	; (80057c4 <DMA_CalcBaseAndBitshift+0x118>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d04a      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xa8>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a41      	ldr	r2, [pc, #260]	; (80057c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d045      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xa8>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a3f      	ldr	r2, [pc, #252]	; (80057cc <DMA_CalcBaseAndBitshift+0x120>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d040      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xa8>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a3e      	ldr	r2, [pc, #248]	; (80057d0 <DMA_CalcBaseAndBitshift+0x124>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d03b      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xa8>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a3c      	ldr	r2, [pc, #240]	; (80057d4 <DMA_CalcBaseAndBitshift+0x128>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d036      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xa8>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a3b      	ldr	r2, [pc, #236]	; (80057d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d031      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xa8>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a39      	ldr	r2, [pc, #228]	; (80057dc <DMA_CalcBaseAndBitshift+0x130>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d02c      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xa8>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a38      	ldr	r2, [pc, #224]	; (80057e0 <DMA_CalcBaseAndBitshift+0x134>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d027      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xa8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a36      	ldr	r2, [pc, #216]	; (80057e4 <DMA_CalcBaseAndBitshift+0x138>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d022      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xa8>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a35      	ldr	r2, [pc, #212]	; (80057e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d01d      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xa8>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a33      	ldr	r2, [pc, #204]	; (80057ec <DMA_CalcBaseAndBitshift+0x140>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d018      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xa8>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a32      	ldr	r2, [pc, #200]	; (80057f0 <DMA_CalcBaseAndBitshift+0x144>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d013      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xa8>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a30      	ldr	r2, [pc, #192]	; (80057f4 <DMA_CalcBaseAndBitshift+0x148>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00e      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xa8>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a2f      	ldr	r2, [pc, #188]	; (80057f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d009      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xa8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a2d      	ldr	r2, [pc, #180]	; (80057fc <DMA_CalcBaseAndBitshift+0x150>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d004      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xa8>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a2c      	ldr	r2, [pc, #176]	; (8005800 <DMA_CalcBaseAndBitshift+0x154>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d101      	bne.n	8005758 <DMA_CalcBaseAndBitshift+0xac>
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <DMA_CalcBaseAndBitshift+0xae>
 8005758:	2300      	movs	r3, #0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d024      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	3b10      	subs	r3, #16
 8005766:	4a27      	ldr	r2, [pc, #156]	; (8005804 <DMA_CalcBaseAndBitshift+0x158>)
 8005768:	fba2 2303 	umull	r2, r3, r2, r3
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	4a24      	ldr	r2, [pc, #144]	; (8005808 <DMA_CalcBaseAndBitshift+0x15c>)
 8005778:	5cd3      	ldrb	r3, [r2, r3]
 800577a:	461a      	mov	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b03      	cmp	r3, #3
 8005784:	d908      	bls.n	8005798 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	4b1f      	ldr	r3, [pc, #124]	; (800580c <DMA_CalcBaseAndBitshift+0x160>)
 800578e:	4013      	ands	r3, r2
 8005790:	1d1a      	adds	r2, r3, #4
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	659a      	str	r2, [r3, #88]	; 0x58
 8005796:	e00d      	b.n	80057b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	4b1b      	ldr	r3, [pc, #108]	; (800580c <DMA_CalcBaseAndBitshift+0x160>)
 80057a0:	4013      	ands	r3, r2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6593      	str	r3, [r2, #88]	; 0x58
 80057a6:	e005      	b.n	80057b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	40020010 	.word	0x40020010
 80057c8:	40020028 	.word	0x40020028
 80057cc:	40020040 	.word	0x40020040
 80057d0:	40020058 	.word	0x40020058
 80057d4:	40020070 	.word	0x40020070
 80057d8:	40020088 	.word	0x40020088
 80057dc:	400200a0 	.word	0x400200a0
 80057e0:	400200b8 	.word	0x400200b8
 80057e4:	40020410 	.word	0x40020410
 80057e8:	40020428 	.word	0x40020428
 80057ec:	40020440 	.word	0x40020440
 80057f0:	40020458 	.word	0x40020458
 80057f4:	40020470 	.word	0x40020470
 80057f8:	40020488 	.word	0x40020488
 80057fc:	400204a0 	.word	0x400204a0
 8005800:	400204b8 	.word	0x400204b8
 8005804:	aaaaaaab 	.word	0xaaaaaaab
 8005808:	0800d7e8 	.word	0x0800d7e8
 800580c:	fffffc00 	.word	0xfffffc00

08005810 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d120      	bne.n	8005866 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	2b03      	cmp	r3, #3
 800582a:	d858      	bhi.n	80058de <DMA_CheckFifoParam+0xce>
 800582c:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <DMA_CheckFifoParam+0x24>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	08005845 	.word	0x08005845
 8005838:	08005857 	.word	0x08005857
 800583c:	08005845 	.word	0x08005845
 8005840:	080058df 	.word	0x080058df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d048      	beq.n	80058e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005854:	e045      	b.n	80058e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800585e:	d142      	bne.n	80058e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005864:	e03f      	b.n	80058e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586e:	d123      	bne.n	80058b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	2b03      	cmp	r3, #3
 8005876:	d838      	bhi.n	80058ea <DMA_CheckFifoParam+0xda>
 8005878:	a201      	add	r2, pc, #4	; (adr r2, 8005880 <DMA_CheckFifoParam+0x70>)
 800587a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587e:	bf00      	nop
 8005880:	08005891 	.word	0x08005891
 8005884:	08005897 	.word	0x08005897
 8005888:	08005891 	.word	0x08005891
 800588c:	080058a9 	.word	0x080058a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
        break;
 8005894:	e030      	b.n	80058f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d025      	beq.n	80058ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058a6:	e022      	b.n	80058ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058b0:	d11f      	bne.n	80058f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058b6:	e01c      	b.n	80058f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d902      	bls.n	80058c6 <DMA_CheckFifoParam+0xb6>
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d003      	beq.n	80058cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80058c4:	e018      	b.n	80058f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
        break;
 80058ca:	e015      	b.n	80058f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00e      	beq.n	80058f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
    break;
 80058dc:	e00b      	b.n	80058f6 <DMA_CheckFifoParam+0xe6>
        break;
 80058de:	bf00      	nop
 80058e0:	e00a      	b.n	80058f8 <DMA_CheckFifoParam+0xe8>
        break;
 80058e2:	bf00      	nop
 80058e4:	e008      	b.n	80058f8 <DMA_CheckFifoParam+0xe8>
        break;
 80058e6:	bf00      	nop
 80058e8:	e006      	b.n	80058f8 <DMA_CheckFifoParam+0xe8>
        break;
 80058ea:	bf00      	nop
 80058ec:	e004      	b.n	80058f8 <DMA_CheckFifoParam+0xe8>
        break;
 80058ee:	bf00      	nop
 80058f0:	e002      	b.n	80058f8 <DMA_CheckFifoParam+0xe8>
        break;
 80058f2:	bf00      	nop
 80058f4:	e000      	b.n	80058f8 <DMA_CheckFifoParam+0xe8>
    break;
 80058f6:	bf00      	nop
    }
  }

  return status;
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop

08005908 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a38      	ldr	r2, [pc, #224]	; (80059fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d022      	beq.n	8005966 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a36      	ldr	r2, [pc, #216]	; (8005a00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d01d      	beq.n	8005966 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a35      	ldr	r2, [pc, #212]	; (8005a04 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d018      	beq.n	8005966 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a33      	ldr	r2, [pc, #204]	; (8005a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d013      	beq.n	8005966 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a32      	ldr	r2, [pc, #200]	; (8005a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00e      	beq.n	8005966 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a30      	ldr	r2, [pc, #192]	; (8005a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d009      	beq.n	8005966 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a2f      	ldr	r2, [pc, #188]	; (8005a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d004      	beq.n	8005966 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a2d      	ldr	r2, [pc, #180]	; (8005a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d101      	bne.n	800596a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800596a:	2300      	movs	r3, #0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01a      	beq.n	80059a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	3b08      	subs	r3, #8
 8005978:	4a28      	ldr	r2, [pc, #160]	; (8005a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	091b      	lsrs	r3, r3, #4
 8005980:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	461a      	mov	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a24      	ldr	r2, [pc, #144]	; (8005a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005994:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 031f 	and.w	r3, r3, #31
 800599c:	2201      	movs	r2, #1
 800599e:	409a      	lsls	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80059a4:	e024      	b.n	80059f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	3b10      	subs	r3, #16
 80059ae:	4a1e      	ldr	r2, [pc, #120]	; (8005a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80059b0:	fba2 2303 	umull	r2, r3, r2, r3
 80059b4:	091b      	lsrs	r3, r3, #4
 80059b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4a1c      	ldr	r2, [pc, #112]	; (8005a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d806      	bhi.n	80059ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d902      	bls.n	80059ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3308      	adds	r3, #8
 80059cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4b18      	ldr	r3, [pc, #96]	; (8005a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	461a      	mov	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a16      	ldr	r2, [pc, #88]	; (8005a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80059e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f003 031f 	and.w	r3, r3, #31
 80059e8:	2201      	movs	r2, #1
 80059ea:	409a      	lsls	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	669a      	str	r2, [r3, #104]	; 0x68
}
 80059f0:	bf00      	nop
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	58025408 	.word	0x58025408
 8005a00:	5802541c 	.word	0x5802541c
 8005a04:	58025430 	.word	0x58025430
 8005a08:	58025444 	.word	0x58025444
 8005a0c:	58025458 	.word	0x58025458
 8005a10:	5802546c 	.word	0x5802546c
 8005a14:	58025480 	.word	0x58025480
 8005a18:	58025494 	.word	0x58025494
 8005a1c:	cccccccd 	.word	0xcccccccd
 8005a20:	16009600 	.word	0x16009600
 8005a24:	58025880 	.word	0x58025880
 8005a28:	aaaaaaab 	.word	0xaaaaaaab
 8005a2c:	400204b8 	.word	0x400204b8
 8005a30:	4002040f 	.word	0x4002040f
 8005a34:	10008200 	.word	0x10008200
 8005a38:	40020880 	.word	0x40020880

08005a3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d04a      	beq.n	8005ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d847      	bhi.n	8005ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a25      	ldr	r2, [pc, #148]	; (8005af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d022      	beq.n	8005aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a24      	ldr	r2, [pc, #144]	; (8005af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d01d      	beq.n	8005aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a22      	ldr	r2, [pc, #136]	; (8005afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d018      	beq.n	8005aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a21      	ldr	r2, [pc, #132]	; (8005b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d013      	beq.n	8005aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1f      	ldr	r2, [pc, #124]	; (8005b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00e      	beq.n	8005aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1e      	ldr	r2, [pc, #120]	; (8005b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d009      	beq.n	8005aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1c      	ldr	r2, [pc, #112]	; (8005b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d004      	beq.n	8005aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1b      	ldr	r2, [pc, #108]	; (8005b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d101      	bne.n	8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005aac:	2300      	movs	r3, #0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4b17      	ldr	r3, [pc, #92]	; (8005b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	461a      	mov	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a15      	ldr	r2, [pc, #84]	; (8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005ac4:	671a      	str	r2, [r3, #112]	; 0x70
 8005ac6:	e009      	b.n	8005adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4b14      	ldr	r3, [pc, #80]	; (8005b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a11      	ldr	r2, [pc, #68]	; (8005b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005ada:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	409a      	lsls	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	58025408 	.word	0x58025408
 8005af8:	5802541c 	.word	0x5802541c
 8005afc:	58025430 	.word	0x58025430
 8005b00:	58025444 	.word	0x58025444
 8005b04:	58025458 	.word	0x58025458
 8005b08:	5802546c 	.word	0x5802546c
 8005b0c:	58025480 	.word	0x58025480
 8005b10:	58025494 	.word	0x58025494
 8005b14:	1600963f 	.word	0x1600963f
 8005b18:	58025940 	.word	0x58025940
 8005b1c:	1000823f 	.word	0x1000823f
 8005b20:	40020940 	.word	0x40020940

08005b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b089      	sub	sp, #36	; 0x24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b32:	4b89      	ldr	r3, [pc, #548]	; (8005d58 <HAL_GPIO_Init+0x234>)
 8005b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b36:	e194      	b.n	8005e62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	fa01 f303 	lsl.w	r3, r1, r3
 8005b44:	4013      	ands	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 8186 	beq.w	8005e5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d00b      	beq.n	8005b70 <HAL_GPIO_Init+0x4c>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d007      	beq.n	8005b70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b64:	2b11      	cmp	r3, #17
 8005b66:	d003      	beq.n	8005b70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2b12      	cmp	r3, #18
 8005b6e:	d130      	bne.n	8005bd2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	2203      	movs	r2, #3
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	43db      	mvns	r3, r3
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	4013      	ands	r3, r2
 8005b86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	fa02 f303 	lsl.w	r3, r2, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bae:	43db      	mvns	r3, r3
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	091b      	lsrs	r3, r3, #4
 8005bbc:	f003 0201 	and.w	r2, r3, #1
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	2203      	movs	r2, #3
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d003      	beq.n	8005c12 <HAL_GPIO_Init+0xee>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b12      	cmp	r3, #18
 8005c10:	d123      	bne.n	8005c5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	08da      	lsrs	r2, r3, #3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	3208      	adds	r2, #8
 8005c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f003 0307 	and.w	r3, r3, #7
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	220f      	movs	r2, #15
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	4013      	ands	r3, r2
 8005c34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	691a      	ldr	r2, [r3, #16]
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	08da      	lsrs	r2, r3, #3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3208      	adds	r2, #8
 8005c54:	69b9      	ldr	r1, [r7, #24]
 8005c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	2203      	movs	r2, #3
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f003 0203 	and.w	r2, r3, #3
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 80e0 	beq.w	8005e5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c9c:	4b2f      	ldr	r3, [pc, #188]	; (8005d5c <HAL_GPIO_Init+0x238>)
 8005c9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ca2:	4a2e      	ldr	r2, [pc, #184]	; (8005d5c <HAL_GPIO_Init+0x238>)
 8005ca4:	f043 0302 	orr.w	r3, r3, #2
 8005ca8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005cac:	4b2b      	ldr	r3, [pc, #172]	; (8005d5c <HAL_GPIO_Init+0x238>)
 8005cae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cba:	4a29      	ldr	r2, [pc, #164]	; (8005d60 <HAL_GPIO_Init+0x23c>)
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	089b      	lsrs	r3, r3, #2
 8005cc0:	3302      	adds	r3, #2
 8005cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	220f      	movs	r2, #15
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	43db      	mvns	r3, r3
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a20      	ldr	r2, [pc, #128]	; (8005d64 <HAL_GPIO_Init+0x240>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d052      	beq.n	8005d8c <HAL_GPIO_Init+0x268>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a1f      	ldr	r2, [pc, #124]	; (8005d68 <HAL_GPIO_Init+0x244>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d031      	beq.n	8005d52 <HAL_GPIO_Init+0x22e>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a1e      	ldr	r2, [pc, #120]	; (8005d6c <HAL_GPIO_Init+0x248>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d02b      	beq.n	8005d4e <HAL_GPIO_Init+0x22a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a1d      	ldr	r2, [pc, #116]	; (8005d70 <HAL_GPIO_Init+0x24c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d025      	beq.n	8005d4a <HAL_GPIO_Init+0x226>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a1c      	ldr	r2, [pc, #112]	; (8005d74 <HAL_GPIO_Init+0x250>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d01f      	beq.n	8005d46 <HAL_GPIO_Init+0x222>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a1b      	ldr	r2, [pc, #108]	; (8005d78 <HAL_GPIO_Init+0x254>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d019      	beq.n	8005d42 <HAL_GPIO_Init+0x21e>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a1a      	ldr	r2, [pc, #104]	; (8005d7c <HAL_GPIO_Init+0x258>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <HAL_GPIO_Init+0x21a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a19      	ldr	r2, [pc, #100]	; (8005d80 <HAL_GPIO_Init+0x25c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00d      	beq.n	8005d3a <HAL_GPIO_Init+0x216>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a18      	ldr	r2, [pc, #96]	; (8005d84 <HAL_GPIO_Init+0x260>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d007      	beq.n	8005d36 <HAL_GPIO_Init+0x212>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a17      	ldr	r2, [pc, #92]	; (8005d88 <HAL_GPIO_Init+0x264>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d101      	bne.n	8005d32 <HAL_GPIO_Init+0x20e>
 8005d2e:	2309      	movs	r3, #9
 8005d30:	e02d      	b.n	8005d8e <HAL_GPIO_Init+0x26a>
 8005d32:	230a      	movs	r3, #10
 8005d34:	e02b      	b.n	8005d8e <HAL_GPIO_Init+0x26a>
 8005d36:	2308      	movs	r3, #8
 8005d38:	e029      	b.n	8005d8e <HAL_GPIO_Init+0x26a>
 8005d3a:	2307      	movs	r3, #7
 8005d3c:	e027      	b.n	8005d8e <HAL_GPIO_Init+0x26a>
 8005d3e:	2306      	movs	r3, #6
 8005d40:	e025      	b.n	8005d8e <HAL_GPIO_Init+0x26a>
 8005d42:	2305      	movs	r3, #5
 8005d44:	e023      	b.n	8005d8e <HAL_GPIO_Init+0x26a>
 8005d46:	2304      	movs	r3, #4
 8005d48:	e021      	b.n	8005d8e <HAL_GPIO_Init+0x26a>
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e01f      	b.n	8005d8e <HAL_GPIO_Init+0x26a>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e01d      	b.n	8005d8e <HAL_GPIO_Init+0x26a>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e01b      	b.n	8005d8e <HAL_GPIO_Init+0x26a>
 8005d56:	bf00      	nop
 8005d58:	58000080 	.word	0x58000080
 8005d5c:	58024400 	.word	0x58024400
 8005d60:	58000400 	.word	0x58000400
 8005d64:	58020000 	.word	0x58020000
 8005d68:	58020400 	.word	0x58020400
 8005d6c:	58020800 	.word	0x58020800
 8005d70:	58020c00 	.word	0x58020c00
 8005d74:	58021000 	.word	0x58021000
 8005d78:	58021400 	.word	0x58021400
 8005d7c:	58021800 	.word	0x58021800
 8005d80:	58021c00 	.word	0x58021c00
 8005d84:	58022000 	.word	0x58022000
 8005d88:	58022400 	.word	0x58022400
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	f002 0203 	and.w	r2, r2, #3
 8005d94:	0092      	lsls	r2, r2, #2
 8005d96:	4093      	lsls	r3, r2
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d9e:	4938      	ldr	r1, [pc, #224]	; (8005e80 <HAL_GPIO_Init+0x35c>)
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	089b      	lsrs	r3, r3, #2
 8005da4:	3302      	adds	r3, #2
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	43db      	mvns	r3, r3
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	4013      	ands	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	43db      	mvns	r3, r3
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	4013      	ands	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	fa22 f303 	lsr.w	r3, r2, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f47f ae63 	bne.w	8005b38 <HAL_GPIO_Init+0x14>
  }
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	3724      	adds	r7, #36	; 0x24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	58000400 	.word	0x58000400

08005e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	887b      	ldrh	r3, [r7, #2]
 8005e96:	4013      	ands	r3, r2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]
 8005ea0:	e001      	b.n	8005ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	807b      	strh	r3, [r7, #2]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ec4:	787b      	ldrb	r3, [r7, #1]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005eca:	887a      	ldrh	r2, [r7, #2]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ed0:	e003      	b.n	8005eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ed2:	887b      	ldrh	r3, [r7, #2]
 8005ed4:	041a      	lsls	r2, r3, #16
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	619a      	str	r2, [r3, #24]
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b085      	sub	sp, #20
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	460b      	mov	r3, r1
 8005ef0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ef8:	887a      	ldrh	r2, [r7, #2]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4013      	ands	r3, r2
 8005efe:	041a      	lsls	r2, r3, #16
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	43d9      	mvns	r1, r3
 8005f04:	887b      	ldrh	r3, [r7, #2]
 8005f06:	400b      	ands	r3, r1
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	619a      	str	r2, [r3, #24]
}
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
	...

08005f1c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005f24:	4a08      	ldr	r2, [pc, #32]	; (8005f48 <HAL_HSEM_FastTake+0x2c>)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3320      	adds	r3, #32
 8005f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f2e:	4a07      	ldr	r2, [pc, #28]	; (8005f4c <HAL_HSEM_FastTake+0x30>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d101      	bne.n	8005f38 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	e000      	b.n	8005f3a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	58026400 	.word	0x58026400
 8005f4c:	80000300 	.word	0x80000300

08005f50 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005f5a:	4906      	ldr	r1, [pc, #24]	; (8005f74 <HAL_HSEM_Release+0x24>)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	58026400 	.word	0x58026400

08005f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e07f      	b.n	800608a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fb fda4 	bl	8001aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2224      	movs	r2, #36	; 0x24
 8005fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0201 	bic.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d107      	bne.n	8005ff2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fee:	609a      	str	r2, [r3, #8]
 8005ff0:	e006      	b.n	8006000 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ffe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d104      	bne.n	8006012 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006010:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6859      	ldr	r1, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <HAL_I2C_Init+0x11c>)
 800601e:	430b      	orrs	r3, r1
 8006020:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006030:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691a      	ldr	r2, [r3, #16]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	ea42 0103 	orr.w	r1, r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	021a      	lsls	r2, r3, #8
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	69d9      	ldr	r1, [r3, #28]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1a      	ldr	r2, [r3, #32]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	02008000 	.word	0x02008000

08006098 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af02      	add	r7, sp, #8
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	607a      	str	r2, [r7, #4]
 80060a2:	461a      	mov	r2, r3
 80060a4:	460b      	mov	r3, r1
 80060a6:	817b      	strh	r3, [r7, #10]
 80060a8:	4613      	mov	r3, r2
 80060aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	f040 80da 	bne.w	800626e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_I2C_Master_Transmit+0x30>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e0d3      	b.n	8006270 <HAL_I2C_Master_Transmit+0x1d8>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060d0:	f7fc f828 	bl	8002124 <HAL_GetTick>
 80060d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	2319      	movs	r3, #25
 80060dc:	2201      	movs	r2, #1
 80060de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 fbc6 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e0be      	b.n	8006270 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2221      	movs	r2, #33	; 0x21
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2210      	movs	r2, #16
 80060fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	893a      	ldrh	r2, [r7, #8]
 8006112:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611e:	b29b      	uxth	r3, r3
 8006120:	2bff      	cmp	r3, #255	; 0xff
 8006122:	d90e      	bls.n	8006142 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	22ff      	movs	r2, #255	; 0xff
 8006128:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612e:	b2da      	uxtb	r2, r3
 8006130:	8979      	ldrh	r1, [r7, #10]
 8006132:	4b51      	ldr	r3, [pc, #324]	; (8006278 <HAL_I2C_Master_Transmit+0x1e0>)
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 fcbc 	bl	8006ab8 <I2C_TransferConfig>
 8006140:	e06c      	b.n	800621c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006150:	b2da      	uxtb	r2, r3
 8006152:	8979      	ldrh	r1, [r7, #10]
 8006154:	4b48      	ldr	r3, [pc, #288]	; (8006278 <HAL_I2C_Master_Transmit+0x1e0>)
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 fcab 	bl	8006ab8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006162:	e05b      	b.n	800621c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	6a39      	ldr	r1, [r7, #32]
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 fbc3 	bl	80068f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e07b      	b.n	8006270 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	781a      	ldrb	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d034      	beq.n	800621c <HAL_I2C_Master_Transmit+0x184>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d130      	bne.n	800621c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	2200      	movs	r2, #0
 80061c2:	2180      	movs	r1, #128	; 0x80
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fb55 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e04d      	b.n	8006270 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2bff      	cmp	r3, #255	; 0xff
 80061dc:	d90e      	bls.n	80061fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	22ff      	movs	r2, #255	; 0xff
 80061e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	8979      	ldrh	r1, [r7, #10]
 80061ec:	2300      	movs	r3, #0
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fc5f 	bl	8006ab8 <I2C_TransferConfig>
 80061fa:	e00f      	b.n	800621c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620a:	b2da      	uxtb	r2, r3
 800620c:	8979      	ldrh	r1, [r7, #10]
 800620e:	2300      	movs	r3, #0
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 fc4e 	bl	8006ab8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d19e      	bne.n	8006164 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	6a39      	ldr	r1, [r7, #32]
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 fba2 	bl	8006974 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e01a      	b.n	8006270 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2220      	movs	r2, #32
 8006240:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6859      	ldr	r1, [r3, #4]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	4b0b      	ldr	r3, [pc, #44]	; (800627c <HAL_I2C_Master_Transmit+0x1e4>)
 800624e:	400b      	ands	r3, r1
 8006250:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2220      	movs	r2, #32
 8006256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	e000      	b.n	8006270 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800626e:	2302      	movs	r3, #2
  }
}
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	80002000 	.word	0x80002000
 800627c:	fe00e800 	.word	0xfe00e800

08006280 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	4608      	mov	r0, r1
 800628a:	4611      	mov	r1, r2
 800628c:	461a      	mov	r2, r3
 800628e:	4603      	mov	r3, r0
 8006290:	817b      	strh	r3, [r7, #10]
 8006292:	460b      	mov	r3, r1
 8006294:	813b      	strh	r3, [r7, #8]
 8006296:	4613      	mov	r3, r2
 8006298:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	f040 80f9 	bne.w	800649a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <HAL_I2C_Mem_Write+0x34>
 80062ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d105      	bne.n	80062c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e0ed      	b.n	800649c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <HAL_I2C_Mem_Write+0x4e>
 80062ca:	2302      	movs	r3, #2
 80062cc:	e0e6      	b.n	800649c <HAL_I2C_Mem_Write+0x21c>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062d6:	f7fb ff25 	bl	8002124 <HAL_GetTick>
 80062da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	2319      	movs	r3, #25
 80062e2:	2201      	movs	r2, #1
 80062e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 fac3 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e0d1      	b.n	800649c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2221      	movs	r2, #33	; 0x21
 80062fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2240      	movs	r2, #64	; 0x40
 8006304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a3a      	ldr	r2, [r7, #32]
 8006312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006318:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006320:	88f8      	ldrh	r0, [r7, #6]
 8006322:	893a      	ldrh	r2, [r7, #8]
 8006324:	8979      	ldrh	r1, [r7, #10]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	4603      	mov	r3, r0
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 f9d3 	bl	80066dc <I2C_RequestMemoryWrite>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d005      	beq.n	8006348 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e0a9      	b.n	800649c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634c:	b29b      	uxth	r3, r3
 800634e:	2bff      	cmp	r3, #255	; 0xff
 8006350:	d90e      	bls.n	8006370 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	22ff      	movs	r2, #255	; 0xff
 8006356:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800635c:	b2da      	uxtb	r2, r3
 800635e:	8979      	ldrh	r1, [r7, #10]
 8006360:	2300      	movs	r3, #0
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 fba5 	bl	8006ab8 <I2C_TransferConfig>
 800636e:	e00f      	b.n	8006390 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637e:	b2da      	uxtb	r2, r3
 8006380:	8979      	ldrh	r1, [r7, #10]
 8006382:	2300      	movs	r3, #0
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fb94 	bl	8006ab8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 faad 	bl	80068f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e07b      	b.n	800649c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	781a      	ldrb	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d034      	beq.n	8006448 <HAL_I2C_Mem_Write+0x1c8>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d130      	bne.n	8006448 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ec:	2200      	movs	r2, #0
 80063ee:	2180      	movs	r1, #128	; 0x80
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 fa3f 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e04d      	b.n	800649c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006404:	b29b      	uxth	r3, r3
 8006406:	2bff      	cmp	r3, #255	; 0xff
 8006408:	d90e      	bls.n	8006428 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	22ff      	movs	r2, #255	; 0xff
 800640e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006414:	b2da      	uxtb	r2, r3
 8006416:	8979      	ldrh	r1, [r7, #10]
 8006418:	2300      	movs	r3, #0
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fb49 	bl	8006ab8 <I2C_TransferConfig>
 8006426:	e00f      	b.n	8006448 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006436:	b2da      	uxtb	r2, r3
 8006438:	8979      	ldrh	r1, [r7, #10]
 800643a:	2300      	movs	r3, #0
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fb38 	bl	8006ab8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d19e      	bne.n	8006390 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 fa8c 	bl	8006974 <I2C_WaitOnSTOPFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e01a      	b.n	800649c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2220      	movs	r2, #32
 800646c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6859      	ldr	r1, [r3, #4]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <HAL_I2C_Mem_Write+0x224>)
 800647a:	400b      	ands	r3, r1
 800647c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2220      	movs	r2, #32
 8006482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	e000      	b.n	800649c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800649a:	2302      	movs	r3, #2
  }
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	fe00e800 	.word	0xfe00e800

080064a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af02      	add	r7, sp, #8
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	4608      	mov	r0, r1
 80064b2:	4611      	mov	r1, r2
 80064b4:	461a      	mov	r2, r3
 80064b6:	4603      	mov	r3, r0
 80064b8:	817b      	strh	r3, [r7, #10]
 80064ba:	460b      	mov	r3, r1
 80064bc:	813b      	strh	r3, [r7, #8]
 80064be:	4613      	mov	r3, r2
 80064c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b20      	cmp	r3, #32
 80064cc:	f040 80fd 	bne.w	80066ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <HAL_I2C_Mem_Read+0x34>
 80064d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d105      	bne.n	80064e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e0f1      	b.n	80066cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_I2C_Mem_Read+0x4e>
 80064f2:	2302      	movs	r3, #2
 80064f4:	e0ea      	b.n	80066cc <HAL_I2C_Mem_Read+0x224>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064fe:	f7fb fe11 	bl	8002124 <HAL_GetTick>
 8006502:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	2319      	movs	r3, #25
 800650a:	2201      	movs	r2, #1
 800650c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f9af 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e0d5      	b.n	80066cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2222      	movs	r2, #34	; 0x22
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2240      	movs	r2, #64	; 0x40
 800652c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a3a      	ldr	r2, [r7, #32]
 800653a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006540:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006548:	88f8      	ldrh	r0, [r7, #6]
 800654a:	893a      	ldrh	r2, [r7, #8]
 800654c:	8979      	ldrh	r1, [r7, #10]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	4603      	mov	r3, r0
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 f913 	bl	8006784 <I2C_RequestMemoryRead>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e0ad      	b.n	80066cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006574:	b29b      	uxth	r3, r3
 8006576:	2bff      	cmp	r3, #255	; 0xff
 8006578:	d90e      	bls.n	8006598 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	22ff      	movs	r2, #255	; 0xff
 800657e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006584:	b2da      	uxtb	r2, r3
 8006586:	8979      	ldrh	r1, [r7, #10]
 8006588:	4b52      	ldr	r3, [pc, #328]	; (80066d4 <HAL_I2C_Mem_Read+0x22c>)
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 fa91 	bl	8006ab8 <I2C_TransferConfig>
 8006596:	e00f      	b.n	80065b8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659c:	b29a      	uxth	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	8979      	ldrh	r1, [r7, #10]
 80065aa:	4b4a      	ldr	r3, [pc, #296]	; (80066d4 <HAL_I2C_Mem_Read+0x22c>)
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 fa80 	bl	8006ab8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	2200      	movs	r2, #0
 80065c0:	2104      	movs	r1, #4
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 f956 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e07c      	b.n	80066cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	b2d2      	uxtb	r2, r2
 80065de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ee:	3b01      	subs	r3, #1
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006608:	b29b      	uxth	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d034      	beq.n	8006678 <HAL_I2C_Mem_Read+0x1d0>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006612:	2b00      	cmp	r3, #0
 8006614:	d130      	bne.n	8006678 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	2200      	movs	r2, #0
 800661e:	2180      	movs	r1, #128	; 0x80
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 f927 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e04d      	b.n	80066cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006634:	b29b      	uxth	r3, r3
 8006636:	2bff      	cmp	r3, #255	; 0xff
 8006638:	d90e      	bls.n	8006658 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	22ff      	movs	r2, #255	; 0xff
 800663e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006644:	b2da      	uxtb	r2, r3
 8006646:	8979      	ldrh	r1, [r7, #10]
 8006648:	2300      	movs	r3, #0
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 fa31 	bl	8006ab8 <I2C_TransferConfig>
 8006656:	e00f      	b.n	8006678 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006666:	b2da      	uxtb	r2, r3
 8006668:	8979      	ldrh	r1, [r7, #10]
 800666a:	2300      	movs	r3, #0
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 fa20 	bl	8006ab8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d19a      	bne.n	80065b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f000 f974 	bl	8006974 <I2C_WaitOnSTOPFlagUntilTimeout>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e01a      	b.n	80066cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2220      	movs	r2, #32
 800669c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6859      	ldr	r1, [r3, #4]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <HAL_I2C_Mem_Read+0x230>)
 80066aa:	400b      	ands	r3, r1
 80066ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	e000      	b.n	80066cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80066ca:	2302      	movs	r3, #2
  }
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	80002400 	.word	0x80002400
 80066d8:	fe00e800 	.word	0xfe00e800

080066dc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	4608      	mov	r0, r1
 80066e6:	4611      	mov	r1, r2
 80066e8:	461a      	mov	r2, r3
 80066ea:	4603      	mov	r3, r0
 80066ec:	817b      	strh	r3, [r7, #10]
 80066ee:	460b      	mov	r3, r1
 80066f0:	813b      	strh	r3, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066f6:	88fb      	ldrh	r3, [r7, #6]
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	8979      	ldrh	r1, [r7, #10]
 80066fc:	4b20      	ldr	r3, [pc, #128]	; (8006780 <I2C_RequestMemoryWrite+0xa4>)
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f9d7 	bl	8006ab8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	69b9      	ldr	r1, [r7, #24]
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 f8f0 	bl	80068f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e02c      	b.n	8006778 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800671e:	88fb      	ldrh	r3, [r7, #6]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d105      	bne.n	8006730 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006724:	893b      	ldrh	r3, [r7, #8]
 8006726:	b2da      	uxtb	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	629a      	str	r2, [r3, #40]	; 0x28
 800672e:	e015      	b.n	800675c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006730:	893b      	ldrh	r3, [r7, #8]
 8006732:	0a1b      	lsrs	r3, r3, #8
 8006734:	b29b      	uxth	r3, r3
 8006736:	b2da      	uxtb	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	69b9      	ldr	r1, [r7, #24]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 f8d6 	bl	80068f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e012      	b.n	8006778 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006752:	893b      	ldrh	r3, [r7, #8]
 8006754:	b2da      	uxtb	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2200      	movs	r2, #0
 8006764:	2180      	movs	r1, #128	; 0x80
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 f884 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e000      	b.n	8006778 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	80002000 	.word	0x80002000

08006784 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af02      	add	r7, sp, #8
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	4608      	mov	r0, r1
 800678e:	4611      	mov	r1, r2
 8006790:	461a      	mov	r2, r3
 8006792:	4603      	mov	r3, r0
 8006794:	817b      	strh	r3, [r7, #10]
 8006796:	460b      	mov	r3, r1
 8006798:	813b      	strh	r3, [r7, #8]
 800679a:	4613      	mov	r3, r2
 800679c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800679e:	88fb      	ldrh	r3, [r7, #6]
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	8979      	ldrh	r1, [r7, #10]
 80067a4:	4b20      	ldr	r3, [pc, #128]	; (8006828 <I2C_RequestMemoryRead+0xa4>)
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	2300      	movs	r3, #0
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 f984 	bl	8006ab8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067b0:	69fa      	ldr	r2, [r7, #28]
 80067b2:	69b9      	ldr	r1, [r7, #24]
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f89d 	bl	80068f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e02c      	b.n	800681e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067c4:	88fb      	ldrh	r3, [r7, #6]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d105      	bne.n	80067d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067ca:	893b      	ldrh	r3, [r7, #8]
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	629a      	str	r2, [r3, #40]	; 0x28
 80067d4:	e015      	b.n	8006802 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80067d6:	893b      	ldrh	r3, [r7, #8]
 80067d8:	0a1b      	lsrs	r3, r3, #8
 80067da:	b29b      	uxth	r3, r3
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067e4:	69fa      	ldr	r2, [r7, #28]
 80067e6:	69b9      	ldr	r1, [r7, #24]
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 f883 	bl	80068f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e012      	b.n	800681e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067f8:	893b      	ldrh	r3, [r7, #8]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2200      	movs	r2, #0
 800680a:	2140      	movs	r1, #64	; 0x40
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 f831 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	80002000 	.word	0x80002000

0800682c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b02      	cmp	r3, #2
 8006840:	d103      	bne.n	800684a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2200      	movs	r2, #0
 8006848:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b01      	cmp	r3, #1
 8006856:	d007      	beq.n	8006868 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0201 	orr.w	r2, r2, #1
 8006866:	619a      	str	r2, [r3, #24]
  }
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	4613      	mov	r3, r2
 8006882:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006884:	e022      	b.n	80068cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688c:	d01e      	beq.n	80068cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800688e:	f7fb fc49 	bl	8002124 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d302      	bcc.n	80068a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d113      	bne.n	80068cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a8:	f043 0220 	orr.w	r2, r3, #32
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e00f      	b.n	80068ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699a      	ldr	r2, [r3, #24]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4013      	ands	r3, r2
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	429a      	cmp	r2, r3
 80068da:	bf0c      	ite	eq
 80068dc:	2301      	moveq	r3, #1
 80068de:	2300      	movne	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d0cd      	beq.n	8006886 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006900:	e02c      	b.n	800695c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	68b9      	ldr	r1, [r7, #8]
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 f870 	bl	80069ec <I2C_IsAcknowledgeFailed>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e02a      	b.n	800696c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691c:	d01e      	beq.n	800695c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800691e:	f7fb fc01 	bl	8002124 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	429a      	cmp	r2, r3
 800692c:	d302      	bcc.n	8006934 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d113      	bne.n	800695c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006938:	f043 0220 	orr.w	r2, r3, #32
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e007      	b.n	800696c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b02      	cmp	r3, #2
 8006968:	d1cb      	bne.n	8006902 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006980:	e028      	b.n	80069d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 f830 	bl	80069ec <I2C_IsAcknowledgeFailed>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e026      	b.n	80069e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006996:	f7fb fbc5 	bl	8002124 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d302      	bcc.n	80069ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d113      	bne.n	80069d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b0:	f043 0220 	orr.w	r2, r3, #32
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e007      	b.n	80069e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	f003 0320 	and.w	r3, r3, #32
 80069de:	2b20      	cmp	r3, #32
 80069e0:	d1cf      	bne.n	8006982 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f003 0310 	and.w	r3, r3, #16
 8006a02:	2b10      	cmp	r3, #16
 8006a04:	d151      	bne.n	8006aaa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a06:	e022      	b.n	8006a4e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0e:	d01e      	beq.n	8006a4e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a10:	f7fb fb88 	bl	8002124 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d302      	bcc.n	8006a26 <I2C_IsAcknowledgeFailed+0x3a>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d113      	bne.n	8006a4e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2a:	f043 0220 	orr.w	r2, r3, #32
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e02e      	b.n	8006aac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d1d5      	bne.n	8006a08 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2210      	movs	r2, #16
 8006a62:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7ff fedd 	bl	800682c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6859      	ldr	r1, [r3, #4]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	4b0d      	ldr	r3, [pc, #52]	; (8006ab4 <I2C_IsAcknowledgeFailed+0xc8>)
 8006a7e:	400b      	ands	r3, r1
 8006a80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a86:	f043 0204 	orr.w	r2, r3, #4
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	fe00e800 	.word	0xfe00e800

08006ab8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	607b      	str	r3, [r7, #4]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	817b      	strh	r3, [r7, #10]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	0d5b      	lsrs	r3, r3, #21
 8006ad4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006ad8:	4b0d      	ldr	r3, [pc, #52]	; (8006b10 <I2C_TransferConfig+0x58>)
 8006ada:	430b      	orrs	r3, r1
 8006adc:	43db      	mvns	r3, r3
 8006ade:	ea02 0103 	and.w	r1, r2, r3
 8006ae2:	897b      	ldrh	r3, [r7, #10]
 8006ae4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006ae8:	7a7b      	ldrb	r3, [r7, #9]
 8006aea:	041b      	lsls	r3, r3, #16
 8006aec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	431a      	orrs	r2, r3
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	431a      	orrs	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006b02:	bf00      	nop
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	03ff63ff 	.word	0x03ff63ff

08006b14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d138      	bne.n	8006b9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e032      	b.n	8006b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2224      	movs	r2, #36	; 0x24
 8006b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0201 	bic.w	r2, r2, #1
 8006b56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6819      	ldr	r1, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0201 	orr.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	e000      	b.n	8006b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b9c:	2302      	movs	r3, #2
  }
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b085      	sub	sp, #20
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d139      	bne.n	8006c34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e033      	b.n	8006c36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2224      	movs	r2, #36	; 0x24
 8006bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006bfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	021b      	lsls	r3, r3, #8
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0201 	orr.w	r2, r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e000      	b.n	8006c36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c34:	2302      	movs	r3, #2
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006c42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c44:	b08f      	sub	sp, #60	; 0x3c
 8006c46:	af0a      	add	r7, sp, #40	; 0x28
 8006c48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e116      	b.n	8006e82 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fb f8a2 	bl	8001db8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2203      	movs	r2, #3
 8006c78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f005 fe9c 	bl	800c9d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	603b      	str	r3, [r7, #0]
 8006c9e:	687e      	ldr	r6, [r7, #4]
 8006ca0:	466d      	mov	r5, sp
 8006ca2:	f106 0410 	add.w	r4, r6, #16
 8006ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006cb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8006cb6:	1d33      	adds	r3, r6, #4
 8006cb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cba:	6838      	ldr	r0, [r7, #0]
 8006cbc:	f005 fe1a 	bl	800c8f4 <USB_CoreInit>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e0d7      	b.n	8006e82 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f005 fe8a 	bl	800c9f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cde:	2300      	movs	r3, #0
 8006ce0:	73fb      	strb	r3, [r7, #15]
 8006ce2:	e04a      	b.n	8006d7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ce4:	7bfa      	ldrb	r2, [r7, #15]
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	1a9b      	subs	r3, r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	440b      	add	r3, r1
 8006cf2:	333d      	adds	r3, #61	; 0x3d
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006cf8:	7bfa      	ldrb	r2, [r7, #15]
 8006cfa:	6879      	ldr	r1, [r7, #4]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	1a9b      	subs	r3, r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	440b      	add	r3, r1
 8006d06:	333c      	adds	r3, #60	; 0x3c
 8006d08:	7bfa      	ldrb	r2, [r7, #15]
 8006d0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d0c:	7bfa      	ldrb	r2, [r7, #15]
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	b298      	uxth	r0, r3
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	4613      	mov	r3, r2
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	1a9b      	subs	r3, r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	440b      	add	r3, r1
 8006d1e:	3342      	adds	r3, #66	; 0x42
 8006d20:	4602      	mov	r2, r0
 8006d22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006d24:	7bfa      	ldrb	r2, [r7, #15]
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	1a9b      	subs	r3, r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	333f      	adds	r3, #63	; 0x3f
 8006d34:	2200      	movs	r2, #0
 8006d36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006d38:	7bfa      	ldrb	r2, [r7, #15]
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	00db      	lsls	r3, r3, #3
 8006d40:	1a9b      	subs	r3, r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	440b      	add	r3, r1
 8006d46:	3344      	adds	r3, #68	; 0x44
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006d4c:	7bfa      	ldrb	r2, [r7, #15]
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	4613      	mov	r3, r2
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	1a9b      	subs	r3, r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	440b      	add	r3, r1
 8006d5a:	3348      	adds	r3, #72	; 0x48
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006d60:	7bfa      	ldrb	r2, [r7, #15]
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	4613      	mov	r3, r2
 8006d66:	00db      	lsls	r3, r3, #3
 8006d68:	1a9b      	subs	r3, r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	440b      	add	r3, r1
 8006d6e:	3350      	adds	r3, #80	; 0x50
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	3301      	adds	r3, #1
 8006d78:	73fb      	strb	r3, [r7, #15]
 8006d7a:	7bfa      	ldrb	r2, [r7, #15]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d3af      	bcc.n	8006ce4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
 8006d88:	e044      	b.n	8006e14 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d8a:	7bfa      	ldrb	r2, [r7, #15]
 8006d8c:	6879      	ldr	r1, [r7, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	1a9b      	subs	r3, r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	440b      	add	r3, r1
 8006d98:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006da0:	7bfa      	ldrb	r2, [r7, #15]
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	4613      	mov	r3, r2
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	1a9b      	subs	r3, r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	440b      	add	r3, r1
 8006dae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006db2:	7bfa      	ldrb	r2, [r7, #15]
 8006db4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006db6:	7bfa      	ldrb	r2, [r7, #15]
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	1a9b      	subs	r3, r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006dcc:	7bfa      	ldrb	r2, [r7, #15]
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	440b      	add	r3, r1
 8006dda:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006de2:	7bfa      	ldrb	r2, [r7, #15]
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	4613      	mov	r3, r2
 8006de8:	00db      	lsls	r3, r3, #3
 8006dea:	1a9b      	subs	r3, r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	440b      	add	r3, r1
 8006df0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006df4:	2200      	movs	r2, #0
 8006df6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006df8:	7bfa      	ldrb	r2, [r7, #15]
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	1a9b      	subs	r3, r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	440b      	add	r3, r1
 8006e06:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
 8006e10:	3301      	adds	r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]
 8006e14:	7bfa      	ldrb	r2, [r7, #15]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d3b5      	bcc.n	8006d8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	687e      	ldr	r6, [r7, #4]
 8006e26:	466d      	mov	r5, sp
 8006e28:	f106 0410 	add.w	r4, r6, #16
 8006e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006e38:	e885 0003 	stmia.w	r5, {r0, r1}
 8006e3c:	1d33      	adds	r3, r6, #4
 8006e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e40:	6838      	ldr	r0, [r7, #0]
 8006e42:	f005 fe01 	bl	800ca48 <USB_DevInit>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e014      	b.n	8006e82 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d102      	bne.n	8006e76 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f80b 	bl	8006e8c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f005 ffa3 	bl	800cdc6 <USB_DevDisconnect>

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006e8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eba:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <HAL_PCDEx_ActivateLPM+0x44>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	10000003 	.word	0x10000003

08006ed4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006edc:	4b29      	ldr	r3, [pc, #164]	; (8006f84 <HAL_PWREx_ConfigSupply+0xb0>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	2b06      	cmp	r3, #6
 8006ee6:	d00a      	beq.n	8006efe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006ee8:	4b26      	ldr	r3, [pc, #152]	; (8006f84 <HAL_PWREx_ConfigSupply+0xb0>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d001      	beq.n	8006efa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e040      	b.n	8006f7c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	e03e      	b.n	8006f7c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006efe:	4b21      	ldr	r3, [pc, #132]	; (8006f84 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006f06:	491f      	ldr	r1, [pc, #124]	; (8006f84 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006f0e:	f7fb f909 	bl	8002124 <HAL_GetTick>
 8006f12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f14:	e009      	b.n	8006f2a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f16:	f7fb f905 	bl	8002124 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f24:	d901      	bls.n	8006f2a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e028      	b.n	8006f7c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f2a:	4b16      	ldr	r3, [pc, #88]	; (8006f84 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f36:	d1ee      	bne.n	8006f16 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b1e      	cmp	r3, #30
 8006f3c:	d008      	beq.n	8006f50 <HAL_PWREx_ConfigSupply+0x7c>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b2e      	cmp	r3, #46	; 0x2e
 8006f42:	d005      	beq.n	8006f50 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b1d      	cmp	r3, #29
 8006f48:	d002      	beq.n	8006f50 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b2d      	cmp	r3, #45	; 0x2d
 8006f4e:	d114      	bne.n	8006f7a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006f50:	f7fb f8e8 	bl	8002124 <HAL_GetTick>
 8006f54:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006f56:	e009      	b.n	8006f6c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f58:	f7fb f8e4 	bl	8002124 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f66:	d901      	bls.n	8006f6c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e007      	b.n	8006f7c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006f6c:	4b05      	ldr	r3, [pc, #20]	; (8006f84 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f78:	d1ee      	bne.n	8006f58 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	58024800 	.word	0x58024800

08006f88 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006f8c:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	4a04      	ldr	r2, [pc, #16]	; (8006fa4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f96:	60d3      	str	r3, [r2, #12]
}
 8006f98:	bf00      	nop
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	58024800 	.word	0x58024800

08006fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08c      	sub	sp, #48	; 0x30
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e3ff      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 8087 	beq.w	80070d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fc8:	4b99      	ldr	r3, [pc, #612]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fd2:	4b97      	ldr	r3, [pc, #604]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fda:	2b10      	cmp	r3, #16
 8006fdc:	d007      	beq.n	8006fee <HAL_RCC_OscConfig+0x46>
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	2b18      	cmp	r3, #24
 8006fe2:	d110      	bne.n	8007006 <HAL_RCC_OscConfig+0x5e>
 8006fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d10b      	bne.n	8007006 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fee:	4b90      	ldr	r3, [pc, #576]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d06c      	beq.n	80070d4 <HAL_RCC_OscConfig+0x12c>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d168      	bne.n	80070d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e3d9      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800700e:	d106      	bne.n	800701e <HAL_RCC_OscConfig+0x76>
 8007010:	4b87      	ldr	r3, [pc, #540]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a86      	ldr	r2, [pc, #536]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	e02e      	b.n	800707c <HAL_RCC_OscConfig+0xd4>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10c      	bne.n	8007040 <HAL_RCC_OscConfig+0x98>
 8007026:	4b82      	ldr	r3, [pc, #520]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a81      	ldr	r2, [pc, #516]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800702c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	4b7f      	ldr	r3, [pc, #508]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a7e      	ldr	r2, [pc, #504]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	e01d      	b.n	800707c <HAL_RCC_OscConfig+0xd4>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007048:	d10c      	bne.n	8007064 <HAL_RCC_OscConfig+0xbc>
 800704a:	4b79      	ldr	r3, [pc, #484]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a78      	ldr	r2, [pc, #480]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	4b76      	ldr	r3, [pc, #472]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a75      	ldr	r2, [pc, #468]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800705c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	e00b      	b.n	800707c <HAL_RCC_OscConfig+0xd4>
 8007064:	4b72      	ldr	r3, [pc, #456]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a71      	ldr	r2, [pc, #452]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800706a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	4b6f      	ldr	r3, [pc, #444]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a6e      	ldr	r2, [pc, #440]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800707a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d013      	beq.n	80070ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007084:	f7fb f84e 	bl	8002124 <HAL_GetTick>
 8007088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800708a:	e008      	b.n	800709e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800708c:	f7fb f84a 	bl	8002124 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b64      	cmp	r3, #100	; 0x64
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e38d      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800709e:	4b64      	ldr	r3, [pc, #400]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0f0      	beq.n	800708c <HAL_RCC_OscConfig+0xe4>
 80070aa:	e014      	b.n	80070d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ac:	f7fb f83a 	bl	8002124 <HAL_GetTick>
 80070b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070b2:	e008      	b.n	80070c6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070b4:	f7fb f836 	bl	8002124 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	2b64      	cmp	r3, #100	; 0x64
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e379      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070c6:	4b5a      	ldr	r3, [pc, #360]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1f0      	bne.n	80070b4 <HAL_RCC_OscConfig+0x10c>
 80070d2:	e000      	b.n	80070d6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 80ae 	beq.w	8007240 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070e4:	4b52      	ldr	r3, [pc, #328]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070ee:	4b50      	ldr	r3, [pc, #320]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80070f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d007      	beq.n	800710a <HAL_RCC_OscConfig+0x162>
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	2b18      	cmp	r3, #24
 80070fe:	d13a      	bne.n	8007176 <HAL_RCC_OscConfig+0x1ce>
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d135      	bne.n	8007176 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800710a:	4b49      	ldr	r3, [pc, #292]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <HAL_RCC_OscConfig+0x17a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e34b      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007122:	f7fb f82f 	bl	8002184 <HAL_GetREVID>
 8007126:	4603      	mov	r3, r0
 8007128:	f241 0203 	movw	r2, #4099	; 0x1003
 800712c:	4293      	cmp	r3, r2
 800712e:	d817      	bhi.n	8007160 <HAL_RCC_OscConfig+0x1b8>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	2b40      	cmp	r3, #64	; 0x40
 8007136:	d108      	bne.n	800714a <HAL_RCC_OscConfig+0x1a2>
 8007138:	4b3d      	ldr	r3, [pc, #244]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007140:	4a3b      	ldr	r2, [pc, #236]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007146:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007148:	e07a      	b.n	8007240 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800714a:	4b39      	ldr	r3, [pc, #228]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	031b      	lsls	r3, r3, #12
 8007158:	4935      	ldr	r1, [pc, #212]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800715a:	4313      	orrs	r3, r2
 800715c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800715e:	e06f      	b.n	8007240 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007160:	4b33      	ldr	r3, [pc, #204]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	061b      	lsls	r3, r3, #24
 800716e:	4930      	ldr	r1, [pc, #192]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007170:	4313      	orrs	r3, r2
 8007172:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007174:	e064      	b.n	8007240 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d045      	beq.n	800720a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800717e:	4b2c      	ldr	r3, [pc, #176]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f023 0219 	bic.w	r2, r3, #25
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	4929      	ldr	r1, [pc, #164]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800718c:	4313      	orrs	r3, r2
 800718e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007190:	f7fa ffc8 	bl	8002124 <HAL_GetTick>
 8007194:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007198:	f7fa ffc4 	bl	8002124 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e307      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071aa:	4b21      	ldr	r3, [pc, #132]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0304 	and.w	r3, r3, #4
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0f0      	beq.n	8007198 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071b6:	f7fa ffe5 	bl	8002184 <HAL_GetREVID>
 80071ba:	4603      	mov	r3, r0
 80071bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d817      	bhi.n	80071f4 <HAL_RCC_OscConfig+0x24c>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	2b40      	cmp	r3, #64	; 0x40
 80071ca:	d108      	bne.n	80071de <HAL_RCC_OscConfig+0x236>
 80071cc:	4b18      	ldr	r3, [pc, #96]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80071d4:	4a16      	ldr	r2, [pc, #88]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80071d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071da:	6053      	str	r3, [r2, #4]
 80071dc:	e030      	b.n	8007240 <HAL_RCC_OscConfig+0x298>
 80071de:	4b14      	ldr	r3, [pc, #80]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	031b      	lsls	r3, r3, #12
 80071ec:	4910      	ldr	r1, [pc, #64]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	604b      	str	r3, [r1, #4]
 80071f2:	e025      	b.n	8007240 <HAL_RCC_OscConfig+0x298>
 80071f4:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	061b      	lsls	r3, r3, #24
 8007202:	490b      	ldr	r1, [pc, #44]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007204:	4313      	orrs	r3, r2
 8007206:	604b      	str	r3, [r1, #4]
 8007208:	e01a      	b.n	8007240 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800720a:	4b09      	ldr	r3, [pc, #36]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a08      	ldr	r2, [pc, #32]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007210:	f023 0301 	bic.w	r3, r3, #1
 8007214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007216:	f7fa ff85 	bl	8002124 <HAL_GetTick>
 800721a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800721c:	e00a      	b.n	8007234 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800721e:	f7fa ff81 	bl	8002124 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	2b02      	cmp	r3, #2
 800722a:	d903      	bls.n	8007234 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e2c4      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
 8007230:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007234:	4ba4      	ldr	r3, [pc, #656]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1ee      	bne.n	800721e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0310 	and.w	r3, r3, #16
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 80a9 	beq.w	80073a0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800724e:	4b9e      	ldr	r3, [pc, #632]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007256:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007258:	4b9b      	ldr	r3, [pc, #620]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 800725a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b08      	cmp	r3, #8
 8007262:	d007      	beq.n	8007274 <HAL_RCC_OscConfig+0x2cc>
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	2b18      	cmp	r3, #24
 8007268:	d13a      	bne.n	80072e0 <HAL_RCC_OscConfig+0x338>
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f003 0303 	and.w	r3, r3, #3
 8007270:	2b01      	cmp	r3, #1
 8007272:	d135      	bne.n	80072e0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007274:	4b94      	ldr	r3, [pc, #592]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727c:	2b00      	cmp	r3, #0
 800727e:	d005      	beq.n	800728c <HAL_RCC_OscConfig+0x2e4>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	69db      	ldr	r3, [r3, #28]
 8007284:	2b80      	cmp	r3, #128	; 0x80
 8007286:	d001      	beq.n	800728c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e296      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800728c:	f7fa ff7a 	bl	8002184 <HAL_GetREVID>
 8007290:	4603      	mov	r3, r0
 8007292:	f241 0203 	movw	r2, #4099	; 0x1003
 8007296:	4293      	cmp	r3, r2
 8007298:	d817      	bhi.n	80072ca <HAL_RCC_OscConfig+0x322>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	2b20      	cmp	r3, #32
 80072a0:	d108      	bne.n	80072b4 <HAL_RCC_OscConfig+0x30c>
 80072a2:	4b89      	ldr	r3, [pc, #548]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80072aa:	4a87      	ldr	r2, [pc, #540]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 80072ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072b0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072b2:	e075      	b.n	80073a0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072b4:	4b84      	ldr	r3, [pc, #528]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	069b      	lsls	r3, r3, #26
 80072c2:	4981      	ldr	r1, [pc, #516]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072c8:	e06a      	b.n	80073a0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072ca:	4b7f      	ldr	r3, [pc, #508]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	061b      	lsls	r3, r3, #24
 80072d8:	497b      	ldr	r1, [pc, #492]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072de:	e05f      	b.n	80073a0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	69db      	ldr	r3, [r3, #28]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d042      	beq.n	800736e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80072e8:	4b77      	ldr	r3, [pc, #476]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a76      	ldr	r2, [pc, #472]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 80072ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f4:	f7fa ff16 	bl	8002124 <HAL_GetTick>
 80072f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072fa:	e008      	b.n	800730e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80072fc:	f7fa ff12 	bl	8002124 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b02      	cmp	r3, #2
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e255      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800730e:	4b6e      	ldr	r3, [pc, #440]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0f0      	beq.n	80072fc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800731a:	f7fa ff33 	bl	8002184 <HAL_GetREVID>
 800731e:	4603      	mov	r3, r0
 8007320:	f241 0203 	movw	r2, #4099	; 0x1003
 8007324:	4293      	cmp	r3, r2
 8007326:	d817      	bhi.n	8007358 <HAL_RCC_OscConfig+0x3b0>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	2b20      	cmp	r3, #32
 800732e:	d108      	bne.n	8007342 <HAL_RCC_OscConfig+0x39a>
 8007330:	4b65      	ldr	r3, [pc, #404]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007338:	4a63      	ldr	r2, [pc, #396]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 800733a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800733e:	6053      	str	r3, [r2, #4]
 8007340:	e02e      	b.n	80073a0 <HAL_RCC_OscConfig+0x3f8>
 8007342:	4b61      	ldr	r3, [pc, #388]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	069b      	lsls	r3, r3, #26
 8007350:	495d      	ldr	r1, [pc, #372]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007352:	4313      	orrs	r3, r2
 8007354:	604b      	str	r3, [r1, #4]
 8007356:	e023      	b.n	80073a0 <HAL_RCC_OscConfig+0x3f8>
 8007358:	4b5b      	ldr	r3, [pc, #364]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	061b      	lsls	r3, r3, #24
 8007366:	4958      	ldr	r1, [pc, #352]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007368:	4313      	orrs	r3, r2
 800736a:	60cb      	str	r3, [r1, #12]
 800736c:	e018      	b.n	80073a0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800736e:	4b56      	ldr	r3, [pc, #344]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a55      	ldr	r2, [pc, #340]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800737a:	f7fa fed3 	bl	8002124 <HAL_GetTick>
 800737e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007380:	e008      	b.n	8007394 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007382:	f7fa fecf 	bl	8002124 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d901      	bls.n	8007394 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e212      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007394:	4b4c      	ldr	r3, [pc, #304]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1f0      	bne.n	8007382 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d036      	beq.n	800741a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d019      	beq.n	80073e8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073b4:	4b44      	ldr	r3, [pc, #272]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 80073b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b8:	4a43      	ldr	r2, [pc, #268]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 80073ba:	f043 0301 	orr.w	r3, r3, #1
 80073be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c0:	f7fa feb0 	bl	8002124 <HAL_GetTick>
 80073c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073c6:	e008      	b.n	80073da <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073c8:	f7fa feac 	bl	8002124 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d901      	bls.n	80073da <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e1ef      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073da:	4b3b      	ldr	r3, [pc, #236]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 80073dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d0f0      	beq.n	80073c8 <HAL_RCC_OscConfig+0x420>
 80073e6:	e018      	b.n	800741a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073e8:	4b37      	ldr	r3, [pc, #220]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 80073ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ec:	4a36      	ldr	r2, [pc, #216]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 80073ee:	f023 0301 	bic.w	r3, r3, #1
 80073f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f4:	f7fa fe96 	bl	8002124 <HAL_GetTick>
 80073f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073fa:	e008      	b.n	800740e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073fc:	f7fa fe92 	bl	8002124 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e1d5      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800740e:	4b2e      	ldr	r3, [pc, #184]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1f0      	bne.n	80073fc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	2b00      	cmp	r3, #0
 8007424:	d036      	beq.n	8007494 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d019      	beq.n	8007462 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800742e:	4b26      	ldr	r3, [pc, #152]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a25      	ldr	r2, [pc, #148]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007434:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007438:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800743a:	f7fa fe73 	bl	8002124 <HAL_GetTick>
 800743e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007440:	e008      	b.n	8007454 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007442:	f7fa fe6f 	bl	8002124 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	2b02      	cmp	r3, #2
 800744e:	d901      	bls.n	8007454 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e1b2      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007454:	4b1c      	ldr	r3, [pc, #112]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d0f0      	beq.n	8007442 <HAL_RCC_OscConfig+0x49a>
 8007460:	e018      	b.n	8007494 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007462:	4b19      	ldr	r3, [pc, #100]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a18      	ldr	r2, [pc, #96]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 8007468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800746c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800746e:	f7fa fe59 	bl	8002124 <HAL_GetTick>
 8007472:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007474:	e008      	b.n	8007488 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007476:	f7fa fe55 	bl	8002124 <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d901      	bls.n	8007488 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e198      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007488:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <HAL_RCC_OscConfig+0x520>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1f0      	bne.n	8007476 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 8085 	beq.w	80075ac <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80074a2:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <HAL_RCC_OscConfig+0x524>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a09      	ldr	r2, [pc, #36]	; (80074cc <HAL_RCC_OscConfig+0x524>)
 80074a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074ae:	f7fa fe39 	bl	8002124 <HAL_GetTick>
 80074b2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074b4:	e00c      	b.n	80074d0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80074b6:	f7fa fe35 	bl	8002124 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b64      	cmp	r3, #100	; 0x64
 80074c2:	d905      	bls.n	80074d0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e178      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
 80074c8:	58024400 	.word	0x58024400
 80074cc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074d0:	4b96      	ldr	r3, [pc, #600]	; (800772c <HAL_RCC_OscConfig+0x784>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0ec      	beq.n	80074b6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d106      	bne.n	80074f2 <HAL_RCC_OscConfig+0x54a>
 80074e4:	4b92      	ldr	r3, [pc, #584]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80074e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e8:	4a91      	ldr	r2, [pc, #580]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80074ea:	f043 0301 	orr.w	r3, r3, #1
 80074ee:	6713      	str	r3, [r2, #112]	; 0x70
 80074f0:	e02d      	b.n	800754e <HAL_RCC_OscConfig+0x5a6>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10c      	bne.n	8007514 <HAL_RCC_OscConfig+0x56c>
 80074fa:	4b8d      	ldr	r3, [pc, #564]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80074fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fe:	4a8c      	ldr	r2, [pc, #560]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007500:	f023 0301 	bic.w	r3, r3, #1
 8007504:	6713      	str	r3, [r2, #112]	; 0x70
 8007506:	4b8a      	ldr	r3, [pc, #552]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800750a:	4a89      	ldr	r2, [pc, #548]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 800750c:	f023 0304 	bic.w	r3, r3, #4
 8007510:	6713      	str	r3, [r2, #112]	; 0x70
 8007512:	e01c      	b.n	800754e <HAL_RCC_OscConfig+0x5a6>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2b05      	cmp	r3, #5
 800751a:	d10c      	bne.n	8007536 <HAL_RCC_OscConfig+0x58e>
 800751c:	4b84      	ldr	r3, [pc, #528]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 800751e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007520:	4a83      	ldr	r2, [pc, #524]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007522:	f043 0304 	orr.w	r3, r3, #4
 8007526:	6713      	str	r3, [r2, #112]	; 0x70
 8007528:	4b81      	ldr	r3, [pc, #516]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 800752a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752c:	4a80      	ldr	r2, [pc, #512]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 800752e:	f043 0301 	orr.w	r3, r3, #1
 8007532:	6713      	str	r3, [r2, #112]	; 0x70
 8007534:	e00b      	b.n	800754e <HAL_RCC_OscConfig+0x5a6>
 8007536:	4b7e      	ldr	r3, [pc, #504]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753a:	4a7d      	ldr	r2, [pc, #500]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 800753c:	f023 0301 	bic.w	r3, r3, #1
 8007540:	6713      	str	r3, [r2, #112]	; 0x70
 8007542:	4b7b      	ldr	r3, [pc, #492]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007546:	4a7a      	ldr	r2, [pc, #488]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007548:	f023 0304 	bic.w	r3, r3, #4
 800754c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d015      	beq.n	8007582 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007556:	f7fa fde5 	bl	8002124 <HAL_GetTick>
 800755a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800755c:	e00a      	b.n	8007574 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800755e:	f7fa fde1 	bl	8002124 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	f241 3288 	movw	r2, #5000	; 0x1388
 800756c:	4293      	cmp	r3, r2
 800756e:	d901      	bls.n	8007574 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e122      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007574:	4b6e      	ldr	r3, [pc, #440]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007578:	f003 0302 	and.w	r3, r3, #2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0ee      	beq.n	800755e <HAL_RCC_OscConfig+0x5b6>
 8007580:	e014      	b.n	80075ac <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007582:	f7fa fdcf 	bl	8002124 <HAL_GetTick>
 8007586:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007588:	e00a      	b.n	80075a0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800758a:	f7fa fdcb 	bl	8002124 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	f241 3288 	movw	r2, #5000	; 0x1388
 8007598:	4293      	cmp	r3, r2
 800759a:	d901      	bls.n	80075a0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e10c      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075a0:	4b63      	ldr	r3, [pc, #396]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1ee      	bne.n	800758a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 8101 	beq.w	80077b8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80075b6:	4b5e      	ldr	r3, [pc, #376]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075be:	2b18      	cmp	r3, #24
 80075c0:	f000 80bc 	beq.w	800773c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	f040 8095 	bne.w	80076f8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ce:	4b58      	ldr	r3, [pc, #352]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a57      	ldr	r2, [pc, #348]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80075d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075da:	f7fa fda3 	bl	8002124 <HAL_GetTick>
 80075de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075e0:	e008      	b.n	80075f4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075e2:	f7fa fd9f 	bl	8002124 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d901      	bls.n	80075f4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e0e2      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075f4:	4b4e      	ldr	r3, [pc, #312]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1f0      	bne.n	80075e2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007600:	4b4b      	ldr	r3, [pc, #300]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007604:	4b4b      	ldr	r3, [pc, #300]	; (8007734 <HAL_RCC_OscConfig+0x78c>)
 8007606:	4013      	ands	r3, r2
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007610:	0112      	lsls	r2, r2, #4
 8007612:	430a      	orrs	r2, r1
 8007614:	4946      	ldr	r1, [pc, #280]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007616:	4313      	orrs	r3, r2
 8007618:	628b      	str	r3, [r1, #40]	; 0x28
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	3b01      	subs	r3, #1
 8007620:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007628:	3b01      	subs	r3, #1
 800762a:	025b      	lsls	r3, r3, #9
 800762c:	b29b      	uxth	r3, r3
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007634:	3b01      	subs	r3, #1
 8007636:	041b      	lsls	r3, r3, #16
 8007638:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800763c:	431a      	orrs	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007642:	3b01      	subs	r3, #1
 8007644:	061b      	lsls	r3, r3, #24
 8007646:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800764a:	4939      	ldr	r1, [pc, #228]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 800764c:	4313      	orrs	r3, r2
 800764e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007650:	4b37      	ldr	r3, [pc, #220]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	4a36      	ldr	r2, [pc, #216]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007656:	f023 0301 	bic.w	r3, r3, #1
 800765a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800765c:	4b34      	ldr	r3, [pc, #208]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 800765e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007660:	4b35      	ldr	r3, [pc, #212]	; (8007738 <HAL_RCC_OscConfig+0x790>)
 8007662:	4013      	ands	r3, r2
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007668:	00d2      	lsls	r2, r2, #3
 800766a:	4931      	ldr	r1, [pc, #196]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 800766c:	4313      	orrs	r3, r2
 800766e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007670:	4b2f      	ldr	r3, [pc, #188]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	f023 020c 	bic.w	r2, r3, #12
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767c:	492c      	ldr	r1, [pc, #176]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 800767e:	4313      	orrs	r3, r2
 8007680:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007682:	4b2b      	ldr	r3, [pc, #172]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	f023 0202 	bic.w	r2, r3, #2
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768e:	4928      	ldr	r1, [pc, #160]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007690:	4313      	orrs	r3, r2
 8007692:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007694:	4b26      	ldr	r3, [pc, #152]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	4a25      	ldr	r2, [pc, #148]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 800769a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800769e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a0:	4b23      	ldr	r3, [pc, #140]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	4a22      	ldr	r2, [pc, #136]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80076a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80076ac:	4b20      	ldr	r3, [pc, #128]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	4a1f      	ldr	r2, [pc, #124]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80076b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80076b8:	4b1d      	ldr	r3, [pc, #116]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	4a1c      	ldr	r2, [pc, #112]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80076be:	f043 0301 	orr.w	r3, r3, #1
 80076c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076c4:	4b1a      	ldr	r3, [pc, #104]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a19      	ldr	r2, [pc, #100]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80076ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d0:	f7fa fd28 	bl	8002124 <HAL_GetTick>
 80076d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076d6:	e008      	b.n	80076ea <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076d8:	f7fa fd24 	bl	8002124 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e067      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076ea:	4b11      	ldr	r3, [pc, #68]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0f0      	beq.n	80076d8 <HAL_RCC_OscConfig+0x730>
 80076f6:	e05f      	b.n	80077b8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076f8:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a0c      	ldr	r2, [pc, #48]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80076fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007704:	f7fa fd0e 	bl	8002124 <HAL_GetTick>
 8007708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800770a:	e008      	b.n	800771e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800770c:	f7fa fd0a 	bl	8002124 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d901      	bls.n	800771e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e04d      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800771e:	4b04      	ldr	r3, [pc, #16]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1f0      	bne.n	800770c <HAL_RCC_OscConfig+0x764>
 800772a:	e045      	b.n	80077b8 <HAL_RCC_OscConfig+0x810>
 800772c:	58024800 	.word	0x58024800
 8007730:	58024400 	.word	0x58024400
 8007734:	fffffc0c 	.word	0xfffffc0c
 8007738:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800773c:	4b21      	ldr	r3, [pc, #132]	; (80077c4 <HAL_RCC_OscConfig+0x81c>)
 800773e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007740:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007742:	4b20      	ldr	r3, [pc, #128]	; (80077c4 <HAL_RCC_OscConfig+0x81c>)
 8007744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007746:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	2b01      	cmp	r3, #1
 800774e:	d031      	beq.n	80077b4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f003 0203 	and.w	r2, r3, #3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800775a:	429a      	cmp	r2, r3
 800775c:	d12a      	bne.n	80077b4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	091b      	lsrs	r3, r3, #4
 8007762:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800776a:	429a      	cmp	r2, r3
 800776c:	d122      	bne.n	80077b4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800777a:	429a      	cmp	r2, r3
 800777c:	d11a      	bne.n	80077b4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	0a5b      	lsrs	r3, r3, #9
 8007782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800778c:	429a      	cmp	r2, r3
 800778e:	d111      	bne.n	80077b4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	0c1b      	lsrs	r3, r3, #16
 8007794:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800779e:	429a      	cmp	r2, r3
 80077a0:	d108      	bne.n	80077b4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	0e1b      	lsrs	r3, r3, #24
 80077a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d001      	beq.n	80077b8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e000      	b.n	80077ba <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3730      	adds	r7, #48	; 0x30
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	58024400 	.word	0x58024400

080077c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e19c      	b.n	8007b16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077dc:	4b8a      	ldr	r3, [pc, #552]	; (8007a08 <HAL_RCC_ClockConfig+0x240>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d910      	bls.n	800780c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ea:	4b87      	ldr	r3, [pc, #540]	; (8007a08 <HAL_RCC_ClockConfig+0x240>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f023 020f 	bic.w	r2, r3, #15
 80077f2:	4985      	ldr	r1, [pc, #532]	; (8007a08 <HAL_RCC_ClockConfig+0x240>)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077fa:	4b83      	ldr	r3, [pc, #524]	; (8007a08 <HAL_RCC_ClockConfig+0x240>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d001      	beq.n	800780c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e184      	b.n	8007b16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b00      	cmp	r3, #0
 8007816:	d010      	beq.n	800783a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	4b7b      	ldr	r3, [pc, #492]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007824:	429a      	cmp	r2, r3
 8007826:	d908      	bls.n	800783a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007828:	4b78      	ldr	r3, [pc, #480]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	4975      	ldr	r1, [pc, #468]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 8007836:	4313      	orrs	r3, r2
 8007838:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0308 	and.w	r3, r3, #8
 8007842:	2b00      	cmp	r3, #0
 8007844:	d010      	beq.n	8007868 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695a      	ldr	r2, [r3, #20]
 800784a:	4b70      	ldr	r3, [pc, #448]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007852:	429a      	cmp	r2, r3
 8007854:	d908      	bls.n	8007868 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007856:	4b6d      	ldr	r3, [pc, #436]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	496a      	ldr	r1, [pc, #424]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 8007864:	4313      	orrs	r3, r2
 8007866:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0310 	and.w	r3, r3, #16
 8007870:	2b00      	cmp	r3, #0
 8007872:	d010      	beq.n	8007896 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	699a      	ldr	r2, [r3, #24]
 8007878:	4b64      	ldr	r3, [pc, #400]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007880:	429a      	cmp	r2, r3
 8007882:	d908      	bls.n	8007896 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007884:	4b61      	ldr	r3, [pc, #388]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	495e      	ldr	r1, [pc, #376]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 8007892:	4313      	orrs	r3, r2
 8007894:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d010      	beq.n	80078c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	69da      	ldr	r2, [r3, #28]
 80078a6:	4b59      	ldr	r3, [pc, #356]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d908      	bls.n	80078c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80078b2:	4b56      	ldr	r3, [pc, #344]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	4953      	ldr	r1, [pc, #332]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d010      	beq.n	80078f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	4b4d      	ldr	r3, [pc, #308]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	f003 030f 	and.w	r3, r3, #15
 80078dc:	429a      	cmp	r2, r3
 80078de:	d908      	bls.n	80078f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078e0:	4b4a      	ldr	r3, [pc, #296]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	f023 020f 	bic.w	r2, r3, #15
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	4947      	ldr	r1, [pc, #284]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d055      	beq.n	80079aa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80078fe:	4b43      	ldr	r3, [pc, #268]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	4940      	ldr	r1, [pc, #256]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 800790c:	4313      	orrs	r3, r2
 800790e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	2b02      	cmp	r3, #2
 8007916:	d107      	bne.n	8007928 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007918:	4b3c      	ldr	r3, [pc, #240]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d121      	bne.n	8007968 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e0f6      	b.n	8007b16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	2b03      	cmp	r3, #3
 800792e:	d107      	bne.n	8007940 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007930:	4b36      	ldr	r3, [pc, #216]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d115      	bne.n	8007968 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e0ea      	b.n	8007b16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d107      	bne.n	8007958 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007948:	4b30      	ldr	r3, [pc, #192]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007950:	2b00      	cmp	r3, #0
 8007952:	d109      	bne.n	8007968 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e0de      	b.n	8007b16 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007958:	4b2c      	ldr	r3, [pc, #176]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e0d6      	b.n	8007b16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007968:	4b28      	ldr	r3, [pc, #160]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	f023 0207 	bic.w	r2, r3, #7
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	4925      	ldr	r1, [pc, #148]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 8007976:	4313      	orrs	r3, r2
 8007978:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800797a:	f7fa fbd3 	bl	8002124 <HAL_GetTick>
 800797e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007980:	e00a      	b.n	8007998 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007982:	f7fa fbcf 	bl	8002124 <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007990:	4293      	cmp	r3, r2
 8007992:	d901      	bls.n	8007998 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e0be      	b.n	8007b16 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007998:	4b1c      	ldr	r3, [pc, #112]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	00db      	lsls	r3, r3, #3
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d1eb      	bne.n	8007982 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d010      	beq.n	80079d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68da      	ldr	r2, [r3, #12]
 80079ba:	4b14      	ldr	r3, [pc, #80]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d208      	bcs.n	80079d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079c6:	4b11      	ldr	r3, [pc, #68]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	f023 020f 	bic.w	r2, r3, #15
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	490e      	ldr	r1, [pc, #56]	; (8007a0c <HAL_RCC_ClockConfig+0x244>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079d8:	4b0b      	ldr	r3, [pc, #44]	; (8007a08 <HAL_RCC_ClockConfig+0x240>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d214      	bcs.n	8007a10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079e6:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <HAL_RCC_ClockConfig+0x240>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f023 020f 	bic.w	r2, r3, #15
 80079ee:	4906      	ldr	r1, [pc, #24]	; (8007a08 <HAL_RCC_ClockConfig+0x240>)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079f6:	4b04      	ldr	r3, [pc, #16]	; (8007a08 <HAL_RCC_ClockConfig+0x240>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 030f 	and.w	r3, r3, #15
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d005      	beq.n	8007a10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e086      	b.n	8007b16 <HAL_RCC_ClockConfig+0x34e>
 8007a08:	52002000 	.word	0x52002000
 8007a0c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d010      	beq.n	8007a3e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	691a      	ldr	r2, [r3, #16]
 8007a20:	4b3f      	ldr	r3, [pc, #252]	; (8007b20 <HAL_RCC_ClockConfig+0x358>)
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d208      	bcs.n	8007a3e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a2c:	4b3c      	ldr	r3, [pc, #240]	; (8007b20 <HAL_RCC_ClockConfig+0x358>)
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	4939      	ldr	r1, [pc, #228]	; (8007b20 <HAL_RCC_ClockConfig+0x358>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0308 	and.w	r3, r3, #8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d010      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	695a      	ldr	r2, [r3, #20]
 8007a4e:	4b34      	ldr	r3, [pc, #208]	; (8007b20 <HAL_RCC_ClockConfig+0x358>)
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d208      	bcs.n	8007a6c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a5a:	4b31      	ldr	r3, [pc, #196]	; (8007b20 <HAL_RCC_ClockConfig+0x358>)
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	492e      	ldr	r1, [pc, #184]	; (8007b20 <HAL_RCC_ClockConfig+0x358>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0310 	and.w	r3, r3, #16
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d010      	beq.n	8007a9a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699a      	ldr	r2, [r3, #24]
 8007a7c:	4b28      	ldr	r3, [pc, #160]	; (8007b20 <HAL_RCC_ClockConfig+0x358>)
 8007a7e:	69db      	ldr	r3, [r3, #28]
 8007a80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d208      	bcs.n	8007a9a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a88:	4b25      	ldr	r3, [pc, #148]	; (8007b20 <HAL_RCC_ClockConfig+0x358>)
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	4922      	ldr	r1, [pc, #136]	; (8007b20 <HAL_RCC_ClockConfig+0x358>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0320 	and.w	r3, r3, #32
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d010      	beq.n	8007ac8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	69da      	ldr	r2, [r3, #28]
 8007aaa:	4b1d      	ldr	r3, [pc, #116]	; (8007b20 <HAL_RCC_ClockConfig+0x358>)
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d208      	bcs.n	8007ac8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007ab6:	4b1a      	ldr	r3, [pc, #104]	; (8007b20 <HAL_RCC_ClockConfig+0x358>)
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	4917      	ldr	r1, [pc, #92]	; (8007b20 <HAL_RCC_ClockConfig+0x358>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007ac8:	f000 f834 	bl	8007b34 <HAL_RCC_GetSysClockFreq>
 8007acc:	4602      	mov	r2, r0
 8007ace:	4b14      	ldr	r3, [pc, #80]	; (8007b20 <HAL_RCC_ClockConfig+0x358>)
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	0a1b      	lsrs	r3, r3, #8
 8007ad4:	f003 030f 	and.w	r3, r3, #15
 8007ad8:	4912      	ldr	r1, [pc, #72]	; (8007b24 <HAL_RCC_ClockConfig+0x35c>)
 8007ada:	5ccb      	ldrb	r3, [r1, r3]
 8007adc:	f003 031f 	and.w	r3, r3, #31
 8007ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ae6:	4b0e      	ldr	r3, [pc, #56]	; (8007b20 <HAL_RCC_ClockConfig+0x358>)
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	f003 030f 	and.w	r3, r3, #15
 8007aee:	4a0d      	ldr	r2, [pc, #52]	; (8007b24 <HAL_RCC_ClockConfig+0x35c>)
 8007af0:	5cd3      	ldrb	r3, [r2, r3]
 8007af2:	f003 031f 	and.w	r3, r3, #31
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	fa22 f303 	lsr.w	r3, r2, r3
 8007afc:	4a0a      	ldr	r2, [pc, #40]	; (8007b28 <HAL_RCC_ClockConfig+0x360>)
 8007afe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b00:	4a0a      	ldr	r2, [pc, #40]	; (8007b2c <HAL_RCC_ClockConfig+0x364>)
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007b06:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <HAL_RCC_ClockConfig+0x368>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fa fac0 	bl	8002090 <HAL_InitTick>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	58024400 	.word	0x58024400
 8007b24:	0800d7d8 	.word	0x0800d7d8
 8007b28:	24000004 	.word	0x24000004
 8007b2c:	24000000 	.word	0x24000000
 8007b30:	24000018 	.word	0x24000018

08007b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b089      	sub	sp, #36	; 0x24
 8007b38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b3a:	4bb3      	ldr	r3, [pc, #716]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b42:	2b18      	cmp	r3, #24
 8007b44:	f200 8155 	bhi.w	8007df2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007b48:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4e:	bf00      	nop
 8007b50:	08007bb5 	.word	0x08007bb5
 8007b54:	08007df3 	.word	0x08007df3
 8007b58:	08007df3 	.word	0x08007df3
 8007b5c:	08007df3 	.word	0x08007df3
 8007b60:	08007df3 	.word	0x08007df3
 8007b64:	08007df3 	.word	0x08007df3
 8007b68:	08007df3 	.word	0x08007df3
 8007b6c:	08007df3 	.word	0x08007df3
 8007b70:	08007bdb 	.word	0x08007bdb
 8007b74:	08007df3 	.word	0x08007df3
 8007b78:	08007df3 	.word	0x08007df3
 8007b7c:	08007df3 	.word	0x08007df3
 8007b80:	08007df3 	.word	0x08007df3
 8007b84:	08007df3 	.word	0x08007df3
 8007b88:	08007df3 	.word	0x08007df3
 8007b8c:	08007df3 	.word	0x08007df3
 8007b90:	08007be1 	.word	0x08007be1
 8007b94:	08007df3 	.word	0x08007df3
 8007b98:	08007df3 	.word	0x08007df3
 8007b9c:	08007df3 	.word	0x08007df3
 8007ba0:	08007df3 	.word	0x08007df3
 8007ba4:	08007df3 	.word	0x08007df3
 8007ba8:	08007df3 	.word	0x08007df3
 8007bac:	08007df3 	.word	0x08007df3
 8007bb0:	08007be7 	.word	0x08007be7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bb4:	4b94      	ldr	r3, [pc, #592]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0320 	and.w	r3, r3, #32
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d009      	beq.n	8007bd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bc0:	4b91      	ldr	r3, [pc, #580]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	08db      	lsrs	r3, r3, #3
 8007bc6:	f003 0303 	and.w	r3, r3, #3
 8007bca:	4a90      	ldr	r2, [pc, #576]	; (8007e0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007bd2:	e111      	b.n	8007df8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007bd4:	4b8d      	ldr	r3, [pc, #564]	; (8007e0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007bd6:	61bb      	str	r3, [r7, #24]
    break;
 8007bd8:	e10e      	b.n	8007df8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007bda:	4b8d      	ldr	r3, [pc, #564]	; (8007e10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007bdc:	61bb      	str	r3, [r7, #24]
    break;
 8007bde:	e10b      	b.n	8007df8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007be0:	4b8c      	ldr	r3, [pc, #560]	; (8007e14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007be2:	61bb      	str	r3, [r7, #24]
    break;
 8007be4:	e108      	b.n	8007df8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007be6:	4b88      	ldr	r3, [pc, #544]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bea:	f003 0303 	and.w	r3, r3, #3
 8007bee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007bf0:	4b85      	ldr	r3, [pc, #532]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf4:	091b      	lsrs	r3, r3, #4
 8007bf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bfa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007bfc:	4b82      	ldr	r3, [pc, #520]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007c06:	4b80      	ldr	r3, [pc, #512]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0a:	08db      	lsrs	r3, r3, #3
 8007c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	fb02 f303 	mul.w	r3, r2, r3
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 80e1 	beq.w	8007dec <HAL_RCC_GetSysClockFreq+0x2b8>
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	f000 8083 	beq.w	8007d38 <HAL_RCC_GetSysClockFreq+0x204>
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	f200 80a1 	bhi.w	8007d7c <HAL_RCC_GetSysClockFreq+0x248>
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <HAL_RCC_GetSysClockFreq+0x114>
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d056      	beq.n	8007cf4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007c46:	e099      	b.n	8007d7c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c48:	4b6f      	ldr	r3, [pc, #444]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d02d      	beq.n	8007cb0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c54:	4b6c      	ldr	r3, [pc, #432]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	08db      	lsrs	r3, r3, #3
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	4a6b      	ldr	r2, [pc, #428]	; (8007e0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c60:	fa22 f303 	lsr.w	r3, r2, r3
 8007c64:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	ee07 3a90 	vmov	s15, r3
 8007c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c7e:	4b62      	ldr	r3, [pc, #392]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c92:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007caa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007cae:	e087      	b.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cba:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007e1c <HAL_RCC_GetSysClockFreq+0x2e8>
 8007cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cc2:	4b51      	ldr	r3, [pc, #324]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cd6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cf2:	e065      	b.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007e20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d06:	4b40      	ldr	r3, [pc, #256]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d16:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d1a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d36:	e043      	b.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	ee07 3a90 	vmov	s15, r3
 8007d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d42:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007e24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d4a:	4b2f      	ldr	r3, [pc, #188]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d52:	ee07 3a90 	vmov	s15, r3
 8007d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d5e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d7a:	e021      	b.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d86:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007e20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d8e:	4b1e      	ldr	r3, [pc, #120]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007da2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dbe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007dc0:	4b11      	ldr	r3, [pc, #68]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc4:	0a5b      	lsrs	r3, r3, #9
 8007dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dca:	3301      	adds	r3, #1
 8007dcc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	ee07 3a90 	vmov	s15, r3
 8007dd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007dd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007de4:	ee17 3a90 	vmov	r3, s15
 8007de8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007dea:	e005      	b.n	8007df8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	61bb      	str	r3, [r7, #24]
    break;
 8007df0:	e002      	b.n	8007df8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007df2:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007df4:	61bb      	str	r3, [r7, #24]
    break;
 8007df6:	bf00      	nop
  }

  return sysclockfreq;
 8007df8:	69bb      	ldr	r3, [r7, #24]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3724      	adds	r7, #36	; 0x24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	58024400 	.word	0x58024400
 8007e0c:	03d09000 	.word	0x03d09000
 8007e10:	003d0900 	.word	0x003d0900
 8007e14:	007a1200 	.word	0x007a1200
 8007e18:	46000000 	.word	0x46000000
 8007e1c:	4c742400 	.word	0x4c742400
 8007e20:	4a742400 	.word	0x4a742400
 8007e24:	4af42400 	.word	0x4af42400

08007e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e2e:	f7ff fe81 	bl	8007b34 <HAL_RCC_GetSysClockFreq>
 8007e32:	4602      	mov	r2, r0
 8007e34:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	0a1b      	lsrs	r3, r3, #8
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	490f      	ldr	r1, [pc, #60]	; (8007e7c <HAL_RCC_GetHCLKFreq+0x54>)
 8007e40:	5ccb      	ldrb	r3, [r1, r3]
 8007e42:	f003 031f 	and.w	r3, r3, #31
 8007e46:	fa22 f303 	lsr.w	r3, r2, r3
 8007e4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	f003 030f 	and.w	r3, r3, #15
 8007e54:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <HAL_RCC_GetHCLKFreq+0x54>)
 8007e56:	5cd3      	ldrb	r3, [r2, r3]
 8007e58:	f003 031f 	and.w	r3, r3, #31
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e62:	4a07      	ldr	r2, [pc, #28]	; (8007e80 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e66:	4a07      	ldr	r2, [pc, #28]	; (8007e84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e6c:	4b04      	ldr	r3, [pc, #16]	; (8007e80 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	58024400 	.word	0x58024400
 8007e7c:	0800d7d8 	.word	0x0800d7d8
 8007e80:	24000004 	.word	0x24000004
 8007e84:	24000000 	.word	0x24000000

08007e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007e8c:	f7ff ffcc 	bl	8007e28 <HAL_RCC_GetHCLKFreq>
 8007e90:	4602      	mov	r2, r0
 8007e92:	4b06      	ldr	r3, [pc, #24]	; (8007eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	091b      	lsrs	r3, r3, #4
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	4904      	ldr	r1, [pc, #16]	; (8007eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e9e:	5ccb      	ldrb	r3, [r1, r3]
 8007ea0:	f003 031f 	and.w	r3, r3, #31
 8007ea4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	58024400 	.word	0x58024400
 8007eb0:	0800d7d8 	.word	0x0800d7d8

08007eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007eb8:	f7ff ffb6 	bl	8007e28 <HAL_RCC_GetHCLKFreq>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	4b06      	ldr	r3, [pc, #24]	; (8007ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	0a1b      	lsrs	r3, r3, #8
 8007ec4:	f003 0307 	and.w	r3, r3, #7
 8007ec8:	4904      	ldr	r1, [pc, #16]	; (8007edc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007eca:	5ccb      	ldrb	r3, [r1, r3]
 8007ecc:	f003 031f 	and.w	r3, r3, #31
 8007ed0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	58024400 	.word	0x58024400
 8007edc:	0800d7d8 	.word	0x0800d7d8

08007ee0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ee8:	2300      	movs	r3, #0
 8007eea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007eec:	2300      	movs	r3, #0
 8007eee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d03f      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f04:	d02a      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007f06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f0a:	d824      	bhi.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007f0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f10:	d018      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f16:	d81e      	bhi.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f20:	d007      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007f22:	e018      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f24:	4bab      	ldr	r3, [pc, #684]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	4aaa      	ldr	r2, [pc, #680]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f30:	e015      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3304      	adds	r3, #4
 8007f36:	2102      	movs	r1, #2
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f001 fff3 	bl	8009f24 <RCCEx_PLL2_Config>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f42:	e00c      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3324      	adds	r3, #36	; 0x24
 8007f48:	2102      	movs	r1, #2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f002 f89c 	bl	800a088 <RCCEx_PLL3_Config>
 8007f50:	4603      	mov	r3, r0
 8007f52:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f54:	e003      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	75fb      	strb	r3, [r7, #23]
      break;
 8007f5a:	e000      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d109      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007f64:	4b9b      	ldr	r3, [pc, #620]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f70:	4998      	ldr	r1, [pc, #608]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	650b      	str	r3, [r1, #80]	; 0x50
 8007f76:	e001      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d03d      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8c:	2b04      	cmp	r3, #4
 8007f8e:	d826      	bhi.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007f90:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fad 	.word	0x08007fad
 8007f9c:	08007fbb 	.word	0x08007fbb
 8007fa0:	08007fcd 	.word	0x08007fcd
 8007fa4:	08007fe5 	.word	0x08007fe5
 8007fa8:	08007fe5 	.word	0x08007fe5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fac:	4b89      	ldr	r3, [pc, #548]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb0:	4a88      	ldr	r2, [pc, #544]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fb8:	e015      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f001 ffaf 	bl	8009f24 <RCCEx_PLL2_Config>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fca:	e00c      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3324      	adds	r3, #36	; 0x24
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f002 f858 	bl	800a088 <RCCEx_PLL3_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fdc:	e003      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe2:	e000      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d109      	bne.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007fec:	4b79      	ldr	r3, [pc, #484]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff0:	f023 0207 	bic.w	r2, r3, #7
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff8:	4976      	ldr	r1, [pc, #472]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	650b      	str	r3, [r1, #80]	; 0x50
 8007ffe:	e001      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008000:	7dfb      	ldrb	r3, [r7, #23]
 8008002:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800800c:	2b00      	cmp	r3, #0
 800800e:	d042      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008018:	d02b      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800801a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800801e:	d825      	bhi.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008020:	2bc0      	cmp	r3, #192	; 0xc0
 8008022:	d028      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008024:	2bc0      	cmp	r3, #192	; 0xc0
 8008026:	d821      	bhi.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008028:	2b80      	cmp	r3, #128	; 0x80
 800802a:	d016      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800802c:	2b80      	cmp	r3, #128	; 0x80
 800802e:	d81d      	bhi.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008030:	2b00      	cmp	r3, #0
 8008032:	d002      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008034:	2b40      	cmp	r3, #64	; 0x40
 8008036:	d007      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008038:	e018      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800803a:	4b66      	ldr	r3, [pc, #408]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	4a65      	ldr	r2, [pc, #404]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008044:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008046:	e017      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3304      	adds	r3, #4
 800804c:	2100      	movs	r1, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f001 ff68 	bl	8009f24 <RCCEx_PLL2_Config>
 8008054:	4603      	mov	r3, r0
 8008056:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008058:	e00e      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	3324      	adds	r3, #36	; 0x24
 800805e:	2100      	movs	r1, #0
 8008060:	4618      	mov	r0, r3
 8008062:	f002 f811 	bl	800a088 <RCCEx_PLL3_Config>
 8008066:	4603      	mov	r3, r0
 8008068:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800806a:	e005      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	75fb      	strb	r3, [r7, #23]
      break;
 8008070:	e002      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008072:	bf00      	nop
 8008074:	e000      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008078:	7dfb      	ldrb	r3, [r7, #23]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d109      	bne.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800807e:	4b55      	ldr	r3, [pc, #340]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008082:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800808a:	4952      	ldr	r1, [pc, #328]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800808c:	4313      	orrs	r3, r2
 800808e:	650b      	str	r3, [r1, #80]	; 0x50
 8008090:	e001      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d049      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080ac:	d030      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80080ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080b2:	d82a      	bhi.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80080b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080b8:	d02c      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80080ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080be:	d824      	bhi.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80080c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080c4:	d018      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80080c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080ca:	d81e      	bhi.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80080d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080d4:	d007      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80080d6:	e018      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d8:	4b3e      	ldr	r3, [pc, #248]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080dc:	4a3d      	ldr	r2, [pc, #244]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080e4:	e017      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3304      	adds	r3, #4
 80080ea:	2100      	movs	r1, #0
 80080ec:	4618      	mov	r0, r3
 80080ee:	f001 ff19 	bl	8009f24 <RCCEx_PLL2_Config>
 80080f2:	4603      	mov	r3, r0
 80080f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80080f6:	e00e      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3324      	adds	r3, #36	; 0x24
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f001 ffc2 	bl	800a088 <RCCEx_PLL3_Config>
 8008104:	4603      	mov	r3, r0
 8008106:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008108:	e005      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	75fb      	strb	r3, [r7, #23]
      break;
 800810e:	e002      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008110:	bf00      	nop
 8008112:	e000      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008114:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008116:	7dfb      	ldrb	r3, [r7, #23]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10a      	bne.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800811c:	4b2d      	ldr	r3, [pc, #180]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800811e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008120:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800812a:	492a      	ldr	r1, [pc, #168]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800812c:	4313      	orrs	r3, r2
 800812e:	658b      	str	r3, [r1, #88]	; 0x58
 8008130:	e001      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
 8008134:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800813e:	2b00      	cmp	r3, #0
 8008140:	d04c      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008148:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800814c:	d030      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800814e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008152:	d82a      	bhi.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008154:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008158:	d02c      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800815a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800815e:	d824      	bhi.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008160:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008164:	d018      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008166:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800816a:	d81e      	bhi.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008174:	d007      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008176:	e018      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008178:	4b16      	ldr	r3, [pc, #88]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	4a15      	ldr	r2, [pc, #84]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800817e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008182:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008184:	e017      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	3304      	adds	r3, #4
 800818a:	2100      	movs	r1, #0
 800818c:	4618      	mov	r0, r3
 800818e:	f001 fec9 	bl	8009f24 <RCCEx_PLL2_Config>
 8008192:	4603      	mov	r3, r0
 8008194:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008196:	e00e      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3324      	adds	r3, #36	; 0x24
 800819c:	2100      	movs	r1, #0
 800819e:	4618      	mov	r0, r3
 80081a0:	f001 ff72 	bl	800a088 <RCCEx_PLL3_Config>
 80081a4:	4603      	mov	r3, r0
 80081a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081a8:	e005      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	75fb      	strb	r3, [r7, #23]
      break;
 80081ae:	e002      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80081b0:	bf00      	nop
 80081b2:	e000      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80081b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10d      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80081bc:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80081ca:	4902      	ldr	r1, [pc, #8]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	658b      	str	r3, [r1, #88]	; 0x58
 80081d0:	e004      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80081d2:	bf00      	nop
 80081d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d032      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ec:	2b30      	cmp	r3, #48	; 0x30
 80081ee:	d01c      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80081f0:	2b30      	cmp	r3, #48	; 0x30
 80081f2:	d817      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80081f4:	2b20      	cmp	r3, #32
 80081f6:	d00c      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80081f8:	2b20      	cmp	r3, #32
 80081fa:	d813      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d016      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008200:	2b10      	cmp	r3, #16
 8008202:	d10f      	bne.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008204:	4baf      	ldr	r3, [pc, #700]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	4aae      	ldr	r2, [pc, #696]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800820a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800820e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008210:	e00e      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3304      	adds	r3, #4
 8008216:	2102      	movs	r1, #2
 8008218:	4618      	mov	r0, r3
 800821a:	f001 fe83 	bl	8009f24 <RCCEx_PLL2_Config>
 800821e:	4603      	mov	r3, r0
 8008220:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008222:	e005      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	75fb      	strb	r3, [r7, #23]
      break;
 8008228:	e002      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800822a:	bf00      	nop
 800822c:	e000      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800822e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d109      	bne.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008236:	4ba3      	ldr	r3, [pc, #652]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800823a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008242:	49a0      	ldr	r1, [pc, #640]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008244:	4313      	orrs	r3, r2
 8008246:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008248:	e001      	b.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824a:	7dfb      	ldrb	r3, [r7, #23]
 800824c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d047      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800825e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008262:	d030      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008268:	d82a      	bhi.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800826a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800826e:	d02c      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008270:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008274:	d824      	bhi.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800827a:	d018      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800827c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008280:	d81e      	bhi.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800828a:	d007      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800828c:	e018      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800828e:	4b8d      	ldr	r3, [pc, #564]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008292:	4a8c      	ldr	r2, [pc, #560]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008298:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800829a:	e017      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3304      	adds	r3, #4
 80082a0:	2100      	movs	r1, #0
 80082a2:	4618      	mov	r0, r3
 80082a4:	f001 fe3e 	bl	8009f24 <RCCEx_PLL2_Config>
 80082a8:	4603      	mov	r3, r0
 80082aa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80082ac:	e00e      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3324      	adds	r3, #36	; 0x24
 80082b2:	2100      	movs	r1, #0
 80082b4:	4618      	mov	r0, r3
 80082b6:	f001 fee7 	bl	800a088 <RCCEx_PLL3_Config>
 80082ba:	4603      	mov	r3, r0
 80082bc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80082be:	e005      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	75fb      	strb	r3, [r7, #23]
      break;
 80082c4:	e002      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80082c6:	bf00      	nop
 80082c8:	e000      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80082ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d109      	bne.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80082d2:	4b7c      	ldr	r3, [pc, #496]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082de:	4979      	ldr	r1, [pc, #484]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082e0:	4313      	orrs	r3, r2
 80082e2:	650b      	str	r3, [r1, #80]	; 0x50
 80082e4:	e001      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d049      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082fe:	d02e      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008304:	d828      	bhi.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008306:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800830a:	d02a      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800830c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008310:	d822      	bhi.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008312:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008316:	d026      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008318:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800831c:	d81c      	bhi.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800831e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008322:	d010      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008328:	d816      	bhi.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d01d      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800832e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008332:	d111      	bne.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	3304      	adds	r3, #4
 8008338:	2101      	movs	r1, #1
 800833a:	4618      	mov	r0, r3
 800833c:	f001 fdf2 	bl	8009f24 <RCCEx_PLL2_Config>
 8008340:	4603      	mov	r3, r0
 8008342:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008344:	e012      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3324      	adds	r3, #36	; 0x24
 800834a:	2101      	movs	r1, #1
 800834c:	4618      	mov	r0, r3
 800834e:	f001 fe9b 	bl	800a088 <RCCEx_PLL3_Config>
 8008352:	4603      	mov	r3, r0
 8008354:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008356:	e009      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	75fb      	strb	r3, [r7, #23]
      break;
 800835c:	e006      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800835e:	bf00      	nop
 8008360:	e004      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008362:	bf00      	nop
 8008364:	e002      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008366:	bf00      	nop
 8008368:	e000      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800836a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800836c:	7dfb      	ldrb	r3, [r7, #23]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d109      	bne.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008372:	4b54      	ldr	r3, [pc, #336]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008376:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800837e:	4951      	ldr	r1, [pc, #324]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008380:	4313      	orrs	r3, r2
 8008382:	650b      	str	r3, [r1, #80]	; 0x50
 8008384:	e001      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008386:	7dfb      	ldrb	r3, [r7, #23]
 8008388:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d04b      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800839c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083a0:	d02e      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80083a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083a6:	d828      	bhi.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80083a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ac:	d02a      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80083ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083b2:	d822      	bhi.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80083b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083b8:	d026      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80083ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083be:	d81c      	bhi.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80083c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083c4:	d010      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80083c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ca:	d816      	bhi.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d01d      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80083d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083d4:	d111      	bne.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	3304      	adds	r3, #4
 80083da:	2101      	movs	r1, #1
 80083dc:	4618      	mov	r0, r3
 80083de:	f001 fda1 	bl	8009f24 <RCCEx_PLL2_Config>
 80083e2:	4603      	mov	r3, r0
 80083e4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80083e6:	e012      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3324      	adds	r3, #36	; 0x24
 80083ec:	2101      	movs	r1, #1
 80083ee:	4618      	mov	r0, r3
 80083f0:	f001 fe4a 	bl	800a088 <RCCEx_PLL3_Config>
 80083f4:	4603      	mov	r3, r0
 80083f6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80083f8:	e009      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	75fb      	strb	r3, [r7, #23]
      break;
 80083fe:	e006      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008400:	bf00      	nop
 8008402:	e004      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008404:	bf00      	nop
 8008406:	e002      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008408:	bf00      	nop
 800840a:	e000      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800840c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10a      	bne.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008414:	4b2b      	ldr	r3, [pc, #172]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008418:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008422:	4928      	ldr	r1, [pc, #160]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008424:	4313      	orrs	r3, r2
 8008426:	658b      	str	r3, [r1, #88]	; 0x58
 8008428:	e001      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800842a:	7dfb      	ldrb	r3, [r7, #23]
 800842c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d02f      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800843e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008442:	d00e      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008448:	d814      	bhi.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d015      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800844e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008452:	d10f      	bne.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008454:	4b1b      	ldr	r3, [pc, #108]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	4a1a      	ldr	r2, [pc, #104]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800845a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800845e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008460:	e00c      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	3304      	adds	r3, #4
 8008466:	2101      	movs	r1, #1
 8008468:	4618      	mov	r0, r3
 800846a:	f001 fd5b 	bl	8009f24 <RCCEx_PLL2_Config>
 800846e:	4603      	mov	r3, r0
 8008470:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008472:	e003      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	75fb      	strb	r3, [r7, #23]
      break;
 8008478:	e000      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800847a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800847c:	7dfb      	ldrb	r3, [r7, #23]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d109      	bne.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008482:	4b10      	ldr	r3, [pc, #64]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008486:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800848e:	490d      	ldr	r1, [pc, #52]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008490:	4313      	orrs	r3, r2
 8008492:	650b      	str	r3, [r1, #80]	; 0x50
 8008494:	e001      	b.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008496:	7dfb      	ldrb	r3, [r7, #23]
 8008498:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d033      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d81c      	bhi.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80084ae:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	080084ef 	.word	0x080084ef
 80084b8:	080084c9 	.word	0x080084c9
 80084bc:	080084d7 	.word	0x080084d7
 80084c0:	080084ef 	.word	0x080084ef
 80084c4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c8:	4bb8      	ldr	r3, [pc, #736]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	4ab7      	ldr	r2, [pc, #732]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80084d4:	e00c      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	3304      	adds	r3, #4
 80084da:	2102      	movs	r1, #2
 80084dc:	4618      	mov	r0, r3
 80084de:	f001 fd21 	bl	8009f24 <RCCEx_PLL2_Config>
 80084e2:	4603      	mov	r3, r0
 80084e4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80084e6:	e003      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	75fb      	strb	r3, [r7, #23]
      break;
 80084ec:	e000      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80084ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d109      	bne.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80084f6:	4bad      	ldr	r3, [pc, #692]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084fa:	f023 0203 	bic.w	r2, r3, #3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008502:	49aa      	ldr	r1, [pc, #680]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008504:	4313      	orrs	r3, r2
 8008506:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008508:	e001      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800850a:	7dfb      	ldrb	r3, [r7, #23]
 800850c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 8086 	beq.w	8008628 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800851c:	4ba4      	ldr	r3, [pc, #656]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4aa3      	ldr	r2, [pc, #652]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008526:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008528:	f7f9 fdfc 	bl	8002124 <HAL_GetTick>
 800852c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800852e:	e009      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008530:	f7f9 fdf8 	bl	8002124 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	2b64      	cmp	r3, #100	; 0x64
 800853c:	d902      	bls.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	75fb      	strb	r3, [r7, #23]
        break;
 8008542:	e005      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008544:	4b9a      	ldr	r3, [pc, #616]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854c:	2b00      	cmp	r3, #0
 800854e:	d0ef      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008550:	7dfb      	ldrb	r3, [r7, #23]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d166      	bne.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008556:	4b95      	ldr	r3, [pc, #596]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008558:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008560:	4053      	eors	r3, r2
 8008562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008566:	2b00      	cmp	r3, #0
 8008568:	d013      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800856a:	4b90      	ldr	r3, [pc, #576]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800856c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800856e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008572:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008574:	4b8d      	ldr	r3, [pc, #564]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008578:	4a8c      	ldr	r2, [pc, #560]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800857a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800857e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008580:	4b8a      	ldr	r3, [pc, #552]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008584:	4a89      	ldr	r2, [pc, #548]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800858a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800858c:	4a87      	ldr	r2, [pc, #540]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800859c:	d115      	bne.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800859e:	f7f9 fdc1 	bl	8002124 <HAL_GetTick>
 80085a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085a4:	e00b      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085a6:	f7f9 fdbd 	bl	8002124 <HAL_GetTick>
 80085aa:	4602      	mov	r2, r0
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d902      	bls.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	75fb      	strb	r3, [r7, #23]
            break;
 80085bc:	e005      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085be:	4b7b      	ldr	r3, [pc, #492]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c2:	f003 0302 	and.w	r3, r3, #2
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0ed      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d126      	bne.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085de:	d10d      	bne.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80085e0:	4b72      	ldr	r3, [pc, #456]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085ee:	0919      	lsrs	r1, r3, #4
 80085f0:	4b70      	ldr	r3, [pc, #448]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80085f2:	400b      	ands	r3, r1
 80085f4:	496d      	ldr	r1, [pc, #436]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	610b      	str	r3, [r1, #16]
 80085fa:	e005      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80085fc:	4b6b      	ldr	r3, [pc, #428]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	4a6a      	ldr	r2, [pc, #424]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008602:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008606:	6113      	str	r3, [r2, #16]
 8008608:	4b68      	ldr	r3, [pc, #416]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800860a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008616:	4965      	ldr	r1, [pc, #404]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008618:	4313      	orrs	r3, r2
 800861a:	670b      	str	r3, [r1, #112]	; 0x70
 800861c:	e004      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800861e:	7dfb      	ldrb	r3, [r7, #23]
 8008620:	75bb      	strb	r3, [r7, #22]
 8008622:	e001      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008624:	7dfb      	ldrb	r3, [r7, #23]
 8008626:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	d07e      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008638:	2b28      	cmp	r3, #40	; 0x28
 800863a:	d867      	bhi.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800863c:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800863e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008642:	bf00      	nop
 8008644:	08008713 	.word	0x08008713
 8008648:	0800870d 	.word	0x0800870d
 800864c:	0800870d 	.word	0x0800870d
 8008650:	0800870d 	.word	0x0800870d
 8008654:	0800870d 	.word	0x0800870d
 8008658:	0800870d 	.word	0x0800870d
 800865c:	0800870d 	.word	0x0800870d
 8008660:	0800870d 	.word	0x0800870d
 8008664:	080086e9 	.word	0x080086e9
 8008668:	0800870d 	.word	0x0800870d
 800866c:	0800870d 	.word	0x0800870d
 8008670:	0800870d 	.word	0x0800870d
 8008674:	0800870d 	.word	0x0800870d
 8008678:	0800870d 	.word	0x0800870d
 800867c:	0800870d 	.word	0x0800870d
 8008680:	0800870d 	.word	0x0800870d
 8008684:	080086fb 	.word	0x080086fb
 8008688:	0800870d 	.word	0x0800870d
 800868c:	0800870d 	.word	0x0800870d
 8008690:	0800870d 	.word	0x0800870d
 8008694:	0800870d 	.word	0x0800870d
 8008698:	0800870d 	.word	0x0800870d
 800869c:	0800870d 	.word	0x0800870d
 80086a0:	0800870d 	.word	0x0800870d
 80086a4:	08008713 	.word	0x08008713
 80086a8:	0800870d 	.word	0x0800870d
 80086ac:	0800870d 	.word	0x0800870d
 80086b0:	0800870d 	.word	0x0800870d
 80086b4:	0800870d 	.word	0x0800870d
 80086b8:	0800870d 	.word	0x0800870d
 80086bc:	0800870d 	.word	0x0800870d
 80086c0:	0800870d 	.word	0x0800870d
 80086c4:	08008713 	.word	0x08008713
 80086c8:	0800870d 	.word	0x0800870d
 80086cc:	0800870d 	.word	0x0800870d
 80086d0:	0800870d 	.word	0x0800870d
 80086d4:	0800870d 	.word	0x0800870d
 80086d8:	0800870d 	.word	0x0800870d
 80086dc:	0800870d 	.word	0x0800870d
 80086e0:	0800870d 	.word	0x0800870d
 80086e4:	08008713 	.word	0x08008713
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	3304      	adds	r3, #4
 80086ec:	2101      	movs	r1, #1
 80086ee:	4618      	mov	r0, r3
 80086f0:	f001 fc18 	bl	8009f24 <RCCEx_PLL2_Config>
 80086f4:	4603      	mov	r3, r0
 80086f6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80086f8:	e00c      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3324      	adds	r3, #36	; 0x24
 80086fe:	2101      	movs	r1, #1
 8008700:	4618      	mov	r0, r3
 8008702:	f001 fcc1 	bl	800a088 <RCCEx_PLL3_Config>
 8008706:	4603      	mov	r3, r0
 8008708:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800870a:	e003      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	75fb      	strb	r3, [r7, #23]
      break;
 8008710:	e000      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008714:	7dfb      	ldrb	r3, [r7, #23]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d109      	bne.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800871a:	4b24      	ldr	r3, [pc, #144]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800871c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800871e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008726:	4921      	ldr	r1, [pc, #132]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008728:	4313      	orrs	r3, r2
 800872a:	654b      	str	r3, [r1, #84]	; 0x54
 800872c:	e001      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d03e      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008742:	2b05      	cmp	r3, #5
 8008744:	d820      	bhi.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008746:	a201      	add	r2, pc, #4	; (adr r2, 800874c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	0800878f 	.word	0x0800878f
 8008750:	08008765 	.word	0x08008765
 8008754:	08008777 	.word	0x08008777
 8008758:	0800878f 	.word	0x0800878f
 800875c:	0800878f 	.word	0x0800878f
 8008760:	0800878f 	.word	0x0800878f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	3304      	adds	r3, #4
 8008768:	2101      	movs	r1, #1
 800876a:	4618      	mov	r0, r3
 800876c:	f001 fbda 	bl	8009f24 <RCCEx_PLL2_Config>
 8008770:	4603      	mov	r3, r0
 8008772:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008774:	e00c      	b.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	3324      	adds	r3, #36	; 0x24
 800877a:	2101      	movs	r1, #1
 800877c:	4618      	mov	r0, r3
 800877e:	f001 fc83 	bl	800a088 <RCCEx_PLL3_Config>
 8008782:	4603      	mov	r3, r0
 8008784:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008786:	e003      	b.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	75fb      	strb	r3, [r7, #23]
      break;
 800878c:	e000      	b.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800878e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008790:	7dfb      	ldrb	r3, [r7, #23]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d110      	bne.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008796:	4b05      	ldr	r3, [pc, #20]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800879a:	f023 0207 	bic.w	r2, r3, #7
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087a2:	4902      	ldr	r1, [pc, #8]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	654b      	str	r3, [r1, #84]	; 0x54
 80087a8:	e008      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80087aa:	bf00      	nop
 80087ac:	58024400 	.word	0x58024400
 80087b0:	58024800 	.word	0x58024800
 80087b4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b8:	7dfb      	ldrb	r3, [r7, #23]
 80087ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d039      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ce:	2b05      	cmp	r3, #5
 80087d0:	d820      	bhi.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80087d2:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80087d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d8:	0800881b 	.word	0x0800881b
 80087dc:	080087f1 	.word	0x080087f1
 80087e0:	08008803 	.word	0x08008803
 80087e4:	0800881b 	.word	0x0800881b
 80087e8:	0800881b 	.word	0x0800881b
 80087ec:	0800881b 	.word	0x0800881b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3304      	adds	r3, #4
 80087f4:	2101      	movs	r1, #1
 80087f6:	4618      	mov	r0, r3
 80087f8:	f001 fb94 	bl	8009f24 <RCCEx_PLL2_Config>
 80087fc:	4603      	mov	r3, r0
 80087fe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008800:	e00c      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3324      	adds	r3, #36	; 0x24
 8008806:	2101      	movs	r1, #1
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fc3d 	bl	800a088 <RCCEx_PLL3_Config>
 800880e:	4603      	mov	r3, r0
 8008810:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008812:	e003      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	75fb      	strb	r3, [r7, #23]
      break;
 8008818:	e000      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800881a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800881c:	7dfb      	ldrb	r3, [r7, #23]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10a      	bne.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008822:	4bb7      	ldr	r3, [pc, #732]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008826:	f023 0207 	bic.w	r2, r3, #7
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008830:	49b3      	ldr	r1, [pc, #716]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008832:	4313      	orrs	r3, r2
 8008834:	658b      	str	r3, [r1, #88]	; 0x58
 8008836:	e001      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0320 	and.w	r3, r3, #32
 8008844:	2b00      	cmp	r3, #0
 8008846:	d04b      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800884e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008852:	d02e      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008858:	d828      	bhi.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800885a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800885e:	d02a      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008864:	d822      	bhi.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008866:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800886a:	d026      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800886c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008870:	d81c      	bhi.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008876:	d010      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800887c:	d816      	bhi.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d01d      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008886:	d111      	bne.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3304      	adds	r3, #4
 800888c:	2100      	movs	r1, #0
 800888e:	4618      	mov	r0, r3
 8008890:	f001 fb48 	bl	8009f24 <RCCEx_PLL2_Config>
 8008894:	4603      	mov	r3, r0
 8008896:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008898:	e012      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3324      	adds	r3, #36	; 0x24
 800889e:	2102      	movs	r1, #2
 80088a0:	4618      	mov	r0, r3
 80088a2:	f001 fbf1 	bl	800a088 <RCCEx_PLL3_Config>
 80088a6:	4603      	mov	r3, r0
 80088a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80088aa:	e009      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	75fb      	strb	r3, [r7, #23]
      break;
 80088b0:	e006      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80088b2:	bf00      	nop
 80088b4:	e004      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80088b6:	bf00      	nop
 80088b8:	e002      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80088ba:	bf00      	nop
 80088bc:	e000      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80088be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10a      	bne.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088c6:	4b8e      	ldr	r3, [pc, #568]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088d4:	498a      	ldr	r1, [pc, #552]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	654b      	str	r3, [r1, #84]	; 0x54
 80088da:	e001      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d04b      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80088f6:	d02e      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80088f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80088fc:	d828      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80088fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008902:	d02a      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008908:	d822      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800890a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800890e:	d026      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008910:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008914:	d81c      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800891a:	d010      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800891c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008920:	d816      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d01d      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800892a:	d111      	bne.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3304      	adds	r3, #4
 8008930:	2100      	movs	r1, #0
 8008932:	4618      	mov	r0, r3
 8008934:	f001 faf6 	bl	8009f24 <RCCEx_PLL2_Config>
 8008938:	4603      	mov	r3, r0
 800893a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800893c:	e012      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	3324      	adds	r3, #36	; 0x24
 8008942:	2102      	movs	r1, #2
 8008944:	4618      	mov	r0, r3
 8008946:	f001 fb9f 	bl	800a088 <RCCEx_PLL3_Config>
 800894a:	4603      	mov	r3, r0
 800894c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800894e:	e009      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	75fb      	strb	r3, [r7, #23]
      break;
 8008954:	e006      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008956:	bf00      	nop
 8008958:	e004      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800895a:	bf00      	nop
 800895c:	e002      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800895e:	bf00      	nop
 8008960:	e000      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008964:	7dfb      	ldrb	r3, [r7, #23]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10a      	bne.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800896a:	4b65      	ldr	r3, [pc, #404]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800896c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800896e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008978:	4961      	ldr	r1, [pc, #388]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800897a:	4313      	orrs	r3, r2
 800897c:	658b      	str	r3, [r1, #88]	; 0x58
 800897e:	e001      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008980:	7dfb      	ldrb	r3, [r7, #23]
 8008982:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898c:	2b00      	cmp	r3, #0
 800898e:	d04b      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008996:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800899a:	d02e      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800899c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80089a0:	d828      	bhi.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80089a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089a6:	d02a      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80089a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ac:	d822      	bhi.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80089ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80089b2:	d026      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80089b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80089b8:	d81c      	bhi.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80089ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089be:	d010      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80089c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089c4:	d816      	bhi.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d01d      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80089ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089ce:	d111      	bne.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3304      	adds	r3, #4
 80089d4:	2100      	movs	r1, #0
 80089d6:	4618      	mov	r0, r3
 80089d8:	f001 faa4 	bl	8009f24 <RCCEx_PLL2_Config>
 80089dc:	4603      	mov	r3, r0
 80089de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80089e0:	e012      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	3324      	adds	r3, #36	; 0x24
 80089e6:	2102      	movs	r1, #2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f001 fb4d 	bl	800a088 <RCCEx_PLL3_Config>
 80089ee:	4603      	mov	r3, r0
 80089f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80089f2:	e009      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	75fb      	strb	r3, [r7, #23]
      break;
 80089f8:	e006      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80089fa:	bf00      	nop
 80089fc:	e004      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80089fe:	bf00      	nop
 8008a00:	e002      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008a02:	bf00      	nop
 8008a04:	e000      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10a      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a0e:	4b3c      	ldr	r3, [pc, #240]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a1c:	4938      	ldr	r1, [pc, #224]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	658b      	str	r3, [r1, #88]	; 0x58
 8008a22:	e001      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0308 	and.w	r3, r3, #8
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d01a      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a3e:	d10a      	bne.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3324      	adds	r3, #36	; 0x24
 8008a44:	2102      	movs	r1, #2
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 fb1e 	bl	800a088 <RCCEx_PLL3_Config>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008a56:	4b2a      	ldr	r3, [pc, #168]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a64:	4926      	ldr	r1, [pc, #152]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0310 	and.w	r3, r3, #16
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d01a      	beq.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a80:	d10a      	bne.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	3324      	adds	r3, #36	; 0x24
 8008a86:	2102      	movs	r1, #2
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f001 fafd 	bl	800a088 <RCCEx_PLL3_Config>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a98:	4b19      	ldr	r3, [pc, #100]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008aa6:	4916      	ldr	r1, [pc, #88]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d036      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ac2:	d01f      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008ac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ac8:	d817      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ad2:	d009      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008ad4:	e011      	b.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	2100      	movs	r1, #0
 8008adc:	4618      	mov	r0, r3
 8008ade:	f001 fa21 	bl	8009f24 <RCCEx_PLL2_Config>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008ae6:	e00e      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	3324      	adds	r3, #36	; 0x24
 8008aec:	2102      	movs	r1, #2
 8008aee:	4618      	mov	r0, r3
 8008af0:	f001 faca 	bl	800a088 <RCCEx_PLL3_Config>
 8008af4:	4603      	mov	r3, r0
 8008af6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008af8:	e005      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	75fb      	strb	r3, [r7, #23]
      break;
 8008afe:	e002      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008b00:	58024400 	.word	0x58024400
      break;
 8008b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b06:	7dfb      	ldrb	r3, [r7, #23]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10a      	bne.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b0c:	4b93      	ldr	r3, [pc, #588]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b1a:	4990      	ldr	r1, [pc, #576]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	658b      	str	r3, [r1, #88]	; 0x58
 8008b20:	e001      	b.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b22:	7dfb      	ldrb	r3, [r7, #23]
 8008b24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d033      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b3c:	d01c      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008b3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b42:	d816      	bhi.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b48:	d003      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b4e:	d007      	beq.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008b50:	e00f      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b52:	4b82      	ldr	r3, [pc, #520]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b56:	4a81      	ldr	r2, [pc, #516]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008b5e:	e00c      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	3324      	adds	r3, #36	; 0x24
 8008b64:	2101      	movs	r1, #1
 8008b66:	4618      	mov	r0, r3
 8008b68:	f001 fa8e 	bl	800a088 <RCCEx_PLL3_Config>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008b70:	e003      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	75fb      	strb	r3, [r7, #23]
      break;
 8008b76:	e000      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10a      	bne.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b80:	4b76      	ldr	r3, [pc, #472]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b8e:	4973      	ldr	r1, [pc, #460]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	654b      	str	r3, [r1, #84]	; 0x54
 8008b94:	e001      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d029      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bb2:	d007      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008bb4:	e00f      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bb6:	4b69      	ldr	r3, [pc, #420]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bba:	4a68      	ldr	r2, [pc, #416]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008bc2:	e00b      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	2102      	movs	r1, #2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f001 f9aa 	bl	8009f24 <RCCEx_PLL2_Config>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008bd4:	e002      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8008bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d109      	bne.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008be2:	4b5e      	ldr	r3, [pc, #376]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008be6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bee:	495b      	ldr	r1, [pc, #364]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008bf4:	e001      	b.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf6:	7dfb      	ldrb	r3, [r7, #23]
 8008bf8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00a      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	3324      	adds	r3, #36	; 0x24
 8008c0a:	2102      	movs	r1, #2
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f001 fa3b 	bl	800a088 <RCCEx_PLL3_Config>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d030      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c30:	d017      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c36:	d811      	bhi.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c3c:	d013      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c42:	d80b      	bhi.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d010      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c4c:	d106      	bne.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c4e:	4b43      	ldr	r3, [pc, #268]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c52:	4a42      	ldr	r2, [pc, #264]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008c5a:	e007      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c60:	e004      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008c62:	bf00      	nop
 8008c64:	e002      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008c66:	bf00      	nop
 8008c68:	e000      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008c6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d109      	bne.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c72:	4b3a      	ldr	r3, [pc, #232]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c7e:	4937      	ldr	r1, [pc, #220]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	654b      	str	r3, [r1, #84]	; 0x54
 8008c84:	e001      	b.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c86:	7dfb      	ldrb	r3, [r7, #23]
 8008c88:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d008      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008c96:	4b31      	ldr	r3, [pc, #196]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca2:	492e      	ldr	r1, [pc, #184]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d009      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008cb4:	4b29      	ldr	r3, [pc, #164]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008cc2:	4926      	ldr	r1, [pc, #152]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d008      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008cd4:	4b21      	ldr	r3, [pc, #132]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cd8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ce0:	491e      	ldr	r1, [pc, #120]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00d      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008cf2:	4b1a      	ldr	r3, [pc, #104]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	4a19      	ldr	r2, [pc, #100]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008cf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008cfc:	6113      	str	r3, [r2, #16]
 8008cfe:	4b17      	ldr	r3, [pc, #92]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d00:	691a      	ldr	r2, [r3, #16]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008d08:	4914      	ldr	r1, [pc, #80]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	da08      	bge.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008d16:	4b11      	ldr	r3, [pc, #68]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d22:	490e      	ldr	r1, [pc, #56]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d24:	4313      	orrs	r3, r2
 8008d26:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d009      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d34:	4b09      	ldr	r3, [pc, #36]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d42:	4906      	ldr	r1, [pc, #24]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008d48:	7dbb      	ldrb	r3, [r7, #22]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e000      	b.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	58024400 	.word	0x58024400

08008d60 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b090      	sub	sp, #64	; 0x40
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d6e:	f040 8095 	bne.w	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008d72:	4bae      	ldr	r3, [pc, #696]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	f200 8088 	bhi.w	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008d84:	a201      	add	r2, pc, #4	; (adr r2, 8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8a:	bf00      	nop
 8008d8c:	08008da1 	.word	0x08008da1
 8008d90:	08008dc9 	.word	0x08008dc9
 8008d94:	08008df1 	.word	0x08008df1
 8008d98:	08008e8d 	.word	0x08008e8d
 8008d9c:	08008e19 	.word	0x08008e19

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008da0:	4ba2      	ldr	r3, [pc, #648]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008da8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dac:	d108      	bne.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 ff64 	bl	8009c80 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008dbc:	f000 bc95 	b.w	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dc4:	f000 bc91 	b.w	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dc8:	4b98      	ldr	r3, [pc, #608]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dd4:	d108      	bne.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dd6:	f107 0318 	add.w	r3, r7, #24
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 fca8 	bl	8009730 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008de4:	f000 bc81 	b.w	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008de8:	2300      	movs	r3, #0
 8008dea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dec:	f000 bc7d 	b.w	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008df0:	4b8e      	ldr	r3, [pc, #568]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dfc:	d108      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dfe:	f107 030c 	add.w	r3, r7, #12
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 fde8 	bl	80099d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e0c:	f000 bc6d 	b.w	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e14:	f000 bc69 	b.w	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e18:	4b84      	ldr	r3, [pc, #528]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e20:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e22:	4b82      	ldr	r3, [pc, #520]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0304 	and.w	r3, r3, #4
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d10c      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d109      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e34:	4b7d      	ldr	r3, [pc, #500]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	08db      	lsrs	r3, r3, #3
 8008e3a:	f003 0303 	and.w	r3, r3, #3
 8008e3e:	4a7c      	ldr	r2, [pc, #496]	; (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008e40:	fa22 f303 	lsr.w	r3, r2, r3
 8008e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e46:	e01f      	b.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e48:	4b78      	ldr	r3, [pc, #480]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e54:	d106      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e5c:	d102      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e5e:	4b75      	ldr	r3, [pc, #468]	; (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008e60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e62:	e011      	b.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e64:	4b71      	ldr	r3, [pc, #452]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e70:	d106      	bne.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e78:	d102      	bne.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008e7a:	4b6f      	ldr	r3, [pc, #444]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e7e:	e003      	b.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008e80:	2300      	movs	r3, #0
 8008e82:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008e84:	f000 bc31 	b.w	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e88:	f000 bc2f 	b.w	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e8c:	4b6b      	ldr	r3, [pc, #428]	; (800903c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e90:	f000 bc2b 	b.w	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e98:	f000 bc27 	b.w	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea2:	f040 8095 	bne.w	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008ea6:	4b61      	ldr	r3, [pc, #388]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eaa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008eae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eb6:	d04d      	beq.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ebe:	f200 8084 	bhi.w	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	2bc0      	cmp	r3, #192	; 0xc0
 8008ec6:	d07d      	beq.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eca:	2bc0      	cmp	r3, #192	; 0xc0
 8008ecc:	d87d      	bhi.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	2b80      	cmp	r3, #128	; 0x80
 8008ed2:	d02d      	beq.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	2b80      	cmp	r3, #128	; 0x80
 8008ed8:	d877      	bhi.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	2b40      	cmp	r3, #64	; 0x40
 8008ee4:	d012      	beq.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008ee6:	e070      	b.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ee8:	4b50      	ldr	r3, [pc, #320]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ef4:	d107      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 fec0 	bl	8009c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f04:	e3f1      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f0a:	e3ee      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f0c:	4b47      	ldr	r3, [pc, #284]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f18:	d107      	bne.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f1a:	f107 0318 	add.w	r3, r7, #24
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fc06 	bl	8009730 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f28:	e3df      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f2e:	e3dc      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f30:	4b3e      	ldr	r3, [pc, #248]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f3c:	d107      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f3e:	f107 030c 	add.w	r3, r7, #12
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fd48 	bl	80099d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f4c:	e3cd      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f52:	e3ca      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f54:	4b35      	ldr	r3, [pc, #212]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f5c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f5e:	4b33      	ldr	r3, [pc, #204]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0304 	and.w	r3, r3, #4
 8008f66:	2b04      	cmp	r3, #4
 8008f68:	d10c      	bne.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d109      	bne.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f70:	4b2e      	ldr	r3, [pc, #184]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	08db      	lsrs	r3, r3, #3
 8008f76:	f003 0303 	and.w	r3, r3, #3
 8008f7a:	4a2d      	ldr	r2, [pc, #180]	; (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f82:	e01e      	b.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f84:	4b29      	ldr	r3, [pc, #164]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f90:	d106      	bne.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f98:	d102      	bne.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008f9a:	4b26      	ldr	r3, [pc, #152]	; (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f9e:	e010      	b.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fa0:	4b22      	ldr	r3, [pc, #136]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fac:	d106      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fb4:	d102      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008fb6:	4b20      	ldr	r3, [pc, #128]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fba:	e002      	b.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008fc0:	e393      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008fc2:	e392      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008fc4:	4b1d      	ldr	r3, [pc, #116]	; (800903c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fc8:	e38f      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fce:	e38c      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fd6:	f040 80a7 	bne.w	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008fda:	4b14      	ldr	r3, [pc, #80]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fde:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008fe2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008fea:	d05f      	beq.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ff2:	f200 8096 	bhi.w	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ffc:	f000 808e 	beq.w	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8009000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009002:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009006:	f200 808c 	bhi.w	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009010:	d03a      	beq.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009018:	f200 8083 	bhi.w	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00e      	beq.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009028:	d01c      	beq.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800902a:	e07a      	b.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800902c:	58024400 	.word	0x58024400
 8009030:	03d09000 	.word	0x03d09000
 8009034:	003d0900 	.word	0x003d0900
 8009038:	007a1200 	.word	0x007a1200
 800903c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009040:	4baa      	ldr	r3, [pc, #680]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009048:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800904c:	d107      	bne.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800904e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fe14 	bl	8009c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800905c:	e345      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009062:	e342      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009064:	4ba1      	ldr	r3, [pc, #644]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800906c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009070:	d107      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009072:	f107 0318 	add.w	r3, r7, #24
 8009076:	4618      	mov	r0, r3
 8009078:	f000 fb5a 	bl	8009730 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009080:	e333      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009086:	e330      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009088:	4b98      	ldr	r3, [pc, #608]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009094:	d107      	bne.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009096:	f107 030c 	add.w	r3, r7, #12
 800909a:	4618      	mov	r0, r3
 800909c:	f000 fc9c 	bl	80099d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090a4:	e321      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80090a6:	2300      	movs	r3, #0
 80090a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090aa:	e31e      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090ac:	4b8f      	ldr	r3, [pc, #572]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090b4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090b6:	4b8d      	ldr	r3, [pc, #564]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0304 	and.w	r3, r3, #4
 80090be:	2b04      	cmp	r3, #4
 80090c0:	d10c      	bne.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80090c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d109      	bne.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090c8:	4b88      	ldr	r3, [pc, #544]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	08db      	lsrs	r3, r3, #3
 80090ce:	f003 0303 	and.w	r3, r3, #3
 80090d2:	4a87      	ldr	r2, [pc, #540]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80090d4:	fa22 f303 	lsr.w	r3, r2, r3
 80090d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090da:	e01e      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090dc:	4b83      	ldr	r3, [pc, #524]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090e8:	d106      	bne.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80090ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090f0:	d102      	bne.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80090f2:	4b80      	ldr	r3, [pc, #512]	; (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80090f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090f6:	e010      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090f8:	4b7c      	ldr	r3, [pc, #496]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009104:	d106      	bne.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8009106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800910c:	d102      	bne.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800910e:	4b7a      	ldr	r3, [pc, #488]	; (80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009112:	e002      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009114:	2300      	movs	r3, #0
 8009116:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009118:	e2e7      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800911a:	e2e6      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800911c:	4b77      	ldr	r3, [pc, #476]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800911e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009120:	e2e3      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009126:	e2e0      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800912e:	f040 809c 	bne.w	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009132:	4b6e      	ldr	r3, [pc, #440]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009136:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800913a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009142:	d054      	beq.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800914a:	f200 808b 	bhi.w	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009154:	f000 8083 	beq.w	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800915e:	f200 8081 	bhi.w	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009168:	d02f      	beq.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009170:	d878      	bhi.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	2b00      	cmp	r3, #0
 8009176:	d004      	beq.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800917e:	d012      	beq.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8009180:	e070      	b.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009182:	4b5a      	ldr	r3, [pc, #360]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800918a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800918e:	d107      	bne.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009194:	4618      	mov	r0, r3
 8009196:	f000 fd73 	bl	8009c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800919a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800919e:	e2a4      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091a4:	e2a1      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091a6:	4b51      	ldr	r3, [pc, #324]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091b2:	d107      	bne.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091b4:	f107 0318 	add.w	r3, r7, #24
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fab9 	bl	8009730 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80091c2:	e292      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091c8:	e28f      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091ca:	4b48      	ldr	r3, [pc, #288]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091d6:	d107      	bne.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091d8:	f107 030c 	add.w	r3, r7, #12
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fbfb 	bl	80099d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091e6:	e280      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ec:	e27d      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80091ee:	4b3f      	ldr	r3, [pc, #252]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80091f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091f6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091f8:	4b3c      	ldr	r3, [pc, #240]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0304 	and.w	r3, r3, #4
 8009200:	2b04      	cmp	r3, #4
 8009202:	d10c      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009206:	2b00      	cmp	r3, #0
 8009208:	d109      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800920a:	4b38      	ldr	r3, [pc, #224]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	08db      	lsrs	r3, r3, #3
 8009210:	f003 0303 	and.w	r3, r3, #3
 8009214:	4a36      	ldr	r2, [pc, #216]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009216:	fa22 f303 	lsr.w	r3, r2, r3
 800921a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800921c:	e01e      	b.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800921e:	4b33      	ldr	r3, [pc, #204]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800922a:	d106      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800922c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009232:	d102      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009234:	4b2f      	ldr	r3, [pc, #188]	; (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009238:	e010      	b.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800923a:	4b2c      	ldr	r3, [pc, #176]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009246:	d106      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800924e:	d102      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009250:	4b29      	ldr	r3, [pc, #164]	; (80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009254:	e002      	b.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009256:	2300      	movs	r3, #0
 8009258:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800925a:	e246      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800925c:	e245      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800925e:	4b27      	ldr	r3, [pc, #156]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009260:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009262:	e242      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009264:	2300      	movs	r3, #0
 8009266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009268:	e23f      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009270:	f040 80a8 	bne.w	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009274:	4b1d      	ldr	r3, [pc, #116]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009278:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800927c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800927e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009284:	d060      	beq.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800928c:	f200 8097 	bhi.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009292:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009296:	f000 808f 	beq.w	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092a0:	f200 808d 	bhi.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80092a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092aa:	d03b      	beq.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80092ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b2:	f200 8084 	bhi.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80092b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d004      	beq.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80092bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092c2:	d01d      	beq.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80092c4:	e07b      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092c6:	4b09      	ldr	r3, [pc, #36]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092d2:	d107      	bne.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 fcd1 	bl	8009c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092e2:	e202      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092e8:	e1ff      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80092ea:	bf00      	nop
 80092ec:	58024400 	.word	0x58024400
 80092f0:	03d09000 	.word	0x03d09000
 80092f4:	003d0900 	.word	0x003d0900
 80092f8:	007a1200 	.word	0x007a1200
 80092fc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009300:	4ba3      	ldr	r3, [pc, #652]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800930c:	d107      	bne.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800930e:	f107 0318 	add.w	r3, r7, #24
 8009312:	4618      	mov	r0, r3
 8009314:	f000 fa0c 	bl	8009730 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800931c:	e1e5      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009322:	e1e2      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009324:	4b9a      	ldr	r3, [pc, #616]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800932c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009330:	d107      	bne.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009332:	f107 030c 	add.w	r3, r7, #12
 8009336:	4618      	mov	r0, r3
 8009338:	f000 fb4e 	bl	80099d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009340:	e1d3      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009346:	e1d0      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009348:	4b91      	ldr	r3, [pc, #580]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800934a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800934c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009350:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009352:	4b8f      	ldr	r3, [pc, #572]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 0304 	and.w	r3, r3, #4
 800935a:	2b04      	cmp	r3, #4
 800935c:	d10c      	bne.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800935e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009360:	2b00      	cmp	r3, #0
 8009362:	d109      	bne.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009364:	4b8a      	ldr	r3, [pc, #552]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	08db      	lsrs	r3, r3, #3
 800936a:	f003 0303 	and.w	r3, r3, #3
 800936e:	4a89      	ldr	r2, [pc, #548]	; (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009370:	fa22 f303 	lsr.w	r3, r2, r3
 8009374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009376:	e01e      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009378:	4b85      	ldr	r3, [pc, #532]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009384:	d106      	bne.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8009386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800938c:	d102      	bne.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800938e:	4b82      	ldr	r3, [pc, #520]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009392:	e010      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009394:	4b7e      	ldr	r3, [pc, #504]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800939c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093a0:	d106      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80093a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093a8:	d102      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80093aa:	4b7c      	ldr	r3, [pc, #496]	; (800959c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ae:	e002      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80093b4:	e199      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80093b6:	e198      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80093b8:	4b79      	ldr	r3, [pc, #484]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80093ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093bc:	e195      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093c2:	e192      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80093ca:	d173      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80093cc:	4b70      	ldr	r3, [pc, #448]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80093ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80093d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80093d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093dc:	d02f      	beq.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80093de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093e4:	d863      	bhi.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80093e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d004      	beq.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80093ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093f2:	d012      	beq.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80093f4:	e05b      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093f6:	4b66      	ldr	r3, [pc, #408]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009402:	d107      	bne.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009404:	f107 0318 	add.w	r3, r7, #24
 8009408:	4618      	mov	r0, r3
 800940a:	f000 f991 	bl	8009730 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009412:	e16a      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009414:	2300      	movs	r3, #0
 8009416:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009418:	e167      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800941a:	4b5d      	ldr	r3, [pc, #372]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009426:	d107      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009428:	f107 030c 	add.w	r3, r7, #12
 800942c:	4618      	mov	r0, r3
 800942e:	f000 fad3 	bl	80099d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009436:	e158      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800943c:	e155      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800943e:	4b54      	ldr	r3, [pc, #336]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009442:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009446:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009448:	4b51      	ldr	r3, [pc, #324]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0304 	and.w	r3, r3, #4
 8009450:	2b04      	cmp	r3, #4
 8009452:	d10c      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8009454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009456:	2b00      	cmp	r3, #0
 8009458:	d109      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800945a:	4b4d      	ldr	r3, [pc, #308]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	08db      	lsrs	r3, r3, #3
 8009460:	f003 0303 	and.w	r3, r3, #3
 8009464:	4a4b      	ldr	r2, [pc, #300]	; (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009466:	fa22 f303 	lsr.w	r3, r2, r3
 800946a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800946c:	e01e      	b.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800946e:	4b48      	ldr	r3, [pc, #288]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800947a:	d106      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800947c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800947e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009482:	d102      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009484:	4b44      	ldr	r3, [pc, #272]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009488:	e010      	b.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800948a:	4b41      	ldr	r3, [pc, #260]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009492:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009496:	d106      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8009498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800949e:	d102      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80094a0:	4b3e      	ldr	r3, [pc, #248]	; (800959c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80094a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094a4:	e002      	b.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80094a6:	2300      	movs	r3, #0
 80094a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80094aa:	e11e      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80094ac:	e11d      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094b2:	e11a      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094ba:	d133      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80094bc:	4b34      	ldr	r3, [pc, #208]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094c4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80094c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d004      	beq.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80094cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094d2:	d012      	beq.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80094d4:	e023      	b.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094d6:	4b2e      	ldr	r3, [pc, #184]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094e2:	d107      	bne.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 fbc9 	bl	8009c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094f2:	e0fa      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094f4:	2300      	movs	r3, #0
 80094f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094f8:	e0f7      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094fa:	4b25      	ldr	r3, [pc, #148]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009506:	d107      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009508:	f107 0318 	add.w	r3, r7, #24
 800950c:	4618      	mov	r0, r3
 800950e:	f000 f90f 	bl	8009730 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009516:	e0e8      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800951c:	e0e5      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009522:	e0e2      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800952a:	f040 808f 	bne.w	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800952e:	4b18      	ldr	r3, [pc, #96]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009532:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009536:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800953e:	d075      	beq.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8009540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009542:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009546:	d87e      	bhi.n	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800954e:	d060      	beq.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009556:	d876      	bhi.n	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800955e:	d045      	beq.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009562:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009566:	d86e      	bhi.n	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800956e:	d02b      	beq.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8009570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009576:	d866      	bhi.n	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957a:	2b00      	cmp	r3, #0
 800957c:	d004      	beq.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009584:	d00e      	beq.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009586:	e05e      	b.n	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009588:	f000 f8bc 	bl	8009704 <HAL_RCCEx_GetD3PCLK1Freq>
 800958c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800958e:	e0ac      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009590:	58024400 	.word	0x58024400
 8009594:	03d09000 	.word	0x03d09000
 8009598:	003d0900 	.word	0x003d0900
 800959c:	007a1200 	.word	0x007a1200
 80095a0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095a4:	4b53      	ldr	r3, [pc, #332]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095b0:	d107      	bne.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095b2:	f107 0318 	add.w	r3, r7, #24
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 f8ba 	bl	8009730 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80095c0:	e093      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095c2:	2300      	movs	r3, #0
 80095c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095c6:	e090      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095c8:	4b4a      	ldr	r3, [pc, #296]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095d4:	d107      	bne.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095d6:	f107 030c 	add.w	r3, r7, #12
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 f9fc 	bl	80099d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80095e4:	e081      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095ea:	e07e      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80095ec:	4b41      	ldr	r3, [pc, #260]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0304 	and.w	r3, r3, #4
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	d109      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095f8:	4b3e      	ldr	r3, [pc, #248]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	08db      	lsrs	r3, r3, #3
 80095fe:	f003 0303 	and.w	r3, r3, #3
 8009602:	4a3d      	ldr	r2, [pc, #244]	; (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009604:	fa22 f303 	lsr.w	r3, r2, r3
 8009608:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800960a:	e06e      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009610:	e06b      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009612:	4b38      	ldr	r3, [pc, #224]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800961a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800961e:	d102      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8009620:	4b36      	ldr	r3, [pc, #216]	; (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009622:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009624:	e061      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800962a:	e05e      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800962c:	4b31      	ldr	r3, [pc, #196]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009638:	d102      	bne.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800963a:	4b31      	ldr	r3, [pc, #196]	; (8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800963c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800963e:	e054      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009640:	2300      	movs	r3, #0
 8009642:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009644:	e051      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009646:	2300      	movs	r3, #0
 8009648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800964a:	e04e      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009652:	d148      	bne.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009654:	4b27      	ldr	r3, [pc, #156]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009658:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800965c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800965e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009664:	d02a      	beq.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800966c:	d838      	bhi.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800966e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009670:	2b00      	cmp	r3, #0
 8009672:	d004      	beq.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800967a:	d00d      	beq.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800967c:	e030      	b.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800967e:	4b1d      	ldr	r3, [pc, #116]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009686:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800968a:	d102      	bne.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800968c:	4b1c      	ldr	r3, [pc, #112]	; (8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800968e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009690:	e02b      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009692:	2300      	movs	r3, #0
 8009694:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009696:	e028      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009698:	4b16      	ldr	r3, [pc, #88]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096a4:	d107      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 fae8 	bl	8009c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80096b4:	e019      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096ba:	e016      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096bc:	4b0d      	ldr	r3, [pc, #52]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096c8:	d107      	bne.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096ca:	f107 0318 	add.w	r3, r7, #24
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 f82e 	bl	8009730 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80096d8:	e007      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096de:	e004      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80096e0:	2300      	movs	r3, #0
 80096e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096e4:	e001      	b.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80096ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3740      	adds	r7, #64	; 0x40
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	58024400 	.word	0x58024400
 80096f8:	03d09000 	.word	0x03d09000
 80096fc:	003d0900 	.word	0x003d0900
 8009700:	007a1200 	.word	0x007a1200

08009704 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009708:	f7fe fb8e 	bl	8007e28 <HAL_RCC_GetHCLKFreq>
 800970c:	4602      	mov	r2, r0
 800970e:	4b06      	ldr	r3, [pc, #24]	; (8009728 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	091b      	lsrs	r3, r3, #4
 8009714:	f003 0307 	and.w	r3, r3, #7
 8009718:	4904      	ldr	r1, [pc, #16]	; (800972c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800971a:	5ccb      	ldrb	r3, [r1, r3]
 800971c:	f003 031f 	and.w	r3, r3, #31
 8009720:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009724:	4618      	mov	r0, r3
 8009726:	bd80      	pop	{r7, pc}
 8009728:	58024400 	.word	0x58024400
 800972c:	0800d7d8 	.word	0x0800d7d8

08009730 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009730:	b480      	push	{r7}
 8009732:	b089      	sub	sp, #36	; 0x24
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009738:	4ba1      	ldr	r3, [pc, #644]	; (80099c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800973a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800973c:	f003 0303 	and.w	r3, r3, #3
 8009740:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009742:	4b9f      	ldr	r3, [pc, #636]	; (80099c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009746:	0b1b      	lsrs	r3, r3, #12
 8009748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800974c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800974e:	4b9c      	ldr	r3, [pc, #624]	; (80099c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009752:	091b      	lsrs	r3, r3, #4
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800975a:	4b99      	ldr	r3, [pc, #612]	; (80099c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800975c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975e:	08db      	lsrs	r3, r3, #3
 8009760:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	fb02 f303 	mul.w	r3, r2, r3
 800976a:	ee07 3a90 	vmov	s15, r3
 800976e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009772:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 8111 	beq.w	80099a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	2b02      	cmp	r3, #2
 8009782:	f000 8083 	beq.w	800988c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	2b02      	cmp	r3, #2
 800978a:	f200 80a1 	bhi.w	80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d003      	beq.n	800979c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d056      	beq.n	8009848 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800979a:	e099      	b.n	80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800979c:	4b88      	ldr	r3, [pc, #544]	; (80099c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 0320 	and.w	r3, r3, #32
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d02d      	beq.n	8009804 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097a8:	4b85      	ldr	r3, [pc, #532]	; (80099c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	08db      	lsrs	r3, r3, #3
 80097ae:	f003 0303 	and.w	r3, r3, #3
 80097b2:	4a84      	ldr	r2, [pc, #528]	; (80099c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80097b4:	fa22 f303 	lsr.w	r3, r2, r3
 80097b8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	ee07 3a90 	vmov	s15, r3
 80097c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	ee07 3a90 	vmov	s15, r3
 80097ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097d2:	4b7b      	ldr	r3, [pc, #492]	; (80099c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097da:	ee07 3a90 	vmov	s15, r3
 80097de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80097e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80099c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009802:	e087      	b.n	8009914 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	ee07 3a90 	vmov	s15, r3
 800980a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80099cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009816:	4b6a      	ldr	r3, [pc, #424]	; (80099c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800981e:	ee07 3a90 	vmov	s15, r3
 8009822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009826:	ed97 6a03 	vldr	s12, [r7, #12]
 800982a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80099c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800982e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800983a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800983e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009846:	e065      	b.n	8009914 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	ee07 3a90 	vmov	s15, r3
 800984e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009852:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80099d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800985a:	4b59      	ldr	r3, [pc, #356]	; (80099c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800985c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009862:	ee07 3a90 	vmov	s15, r3
 8009866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800986a:	ed97 6a03 	vldr	s12, [r7, #12]
 800986e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80099c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800987a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800987e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800988a:	e043      	b.n	8009914 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	ee07 3a90 	vmov	s15, r3
 8009892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009896:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800989a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800989e:	4b48      	ldr	r3, [pc, #288]	; (80099c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a6:	ee07 3a90 	vmov	s15, r3
 80098aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80098b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80099c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098ce:	e021      	b.n	8009914 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	ee07 3a90 	vmov	s15, r3
 80098d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80099d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80098de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098e2:	4b37      	ldr	r3, [pc, #220]	; (80099c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ea:	ee07 3a90 	vmov	s15, r3
 80098ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80098f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80099c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800990a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800990e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009912:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009914:	4b2a      	ldr	r3, [pc, #168]	; (80099c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009918:	0a5b      	lsrs	r3, r3, #9
 800991a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800991e:	ee07 3a90 	vmov	s15, r3
 8009922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009926:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800992a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800992e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800993a:	ee17 2a90 	vmov	r2, s15
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009942:	4b1f      	ldr	r3, [pc, #124]	; (80099c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009946:	0c1b      	lsrs	r3, r3, #16
 8009948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800994c:	ee07 3a90 	vmov	s15, r3
 8009950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009958:	ee37 7a87 	vadd.f32	s14, s15, s14
 800995c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009968:	ee17 2a90 	vmov	r2, s15
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009970:	4b13      	ldr	r3, [pc, #76]	; (80099c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009974:	0e1b      	lsrs	r3, r3, #24
 8009976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800997a:	ee07 3a90 	vmov	s15, r3
 800997e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009986:	ee37 7a87 	vadd.f32	s14, s15, s14
 800998a:	edd7 6a07 	vldr	s13, [r7, #28]
 800998e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009996:	ee17 2a90 	vmov	r2, s15
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800999e:	e008      	b.n	80099b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	609a      	str	r2, [r3, #8]
}
 80099b2:	bf00      	nop
 80099b4:	3724      	adds	r7, #36	; 0x24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	58024400 	.word	0x58024400
 80099c4:	03d09000 	.word	0x03d09000
 80099c8:	46000000 	.word	0x46000000
 80099cc:	4c742400 	.word	0x4c742400
 80099d0:	4a742400 	.word	0x4a742400
 80099d4:	4af42400 	.word	0x4af42400

080099d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80099d8:	b480      	push	{r7}
 80099da:	b089      	sub	sp, #36	; 0x24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099e0:	4ba1      	ldr	r3, [pc, #644]	; (8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e4:	f003 0303 	and.w	r3, r3, #3
 80099e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80099ea:	4b9f      	ldr	r3, [pc, #636]	; (8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ee:	0d1b      	lsrs	r3, r3, #20
 80099f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80099f6:	4b9c      	ldr	r3, [pc, #624]	; (8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fa:	0a1b      	lsrs	r3, r3, #8
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009a02:	4b99      	ldr	r3, [pc, #612]	; (8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a06:	08db      	lsrs	r3, r3, #3
 8009a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	fb02 f303 	mul.w	r3, r2, r3
 8009a12:	ee07 3a90 	vmov	s15, r3
 8009a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f000 8111 	beq.w	8009c48 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	f000 8083 	beq.w	8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	f200 80a1 	bhi.w	8009b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d056      	beq.n	8009af0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009a42:	e099      	b.n	8009b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a44:	4b88      	ldr	r3, [pc, #544]	; (8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0320 	and.w	r3, r3, #32
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d02d      	beq.n	8009aac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a50:	4b85      	ldr	r3, [pc, #532]	; (8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	08db      	lsrs	r3, r3, #3
 8009a56:	f003 0303 	and.w	r3, r3, #3
 8009a5a:	4a84      	ldr	r2, [pc, #528]	; (8009c6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a60:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	ee07 3a90 	vmov	s15, r3
 8009a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	ee07 3a90 	vmov	s15, r3
 8009a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a7a:	4b7b      	ldr	r3, [pc, #492]	; (8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a82:	ee07 3a90 	vmov	s15, r3
 8009a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009aaa:	e087      	b.n	8009bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c74 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009abe:	4b6a      	ldr	r3, [pc, #424]	; (8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ad2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009aee:	e065      	b.n	8009bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009afa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b02:	4b59      	ldr	r3, [pc, #356]	; (8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b16:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b32:	e043      	b.n	8009bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	ee07 3a90 	vmov	s15, r3
 8009b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b46:	4b48      	ldr	r3, [pc, #288]	; (8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4e:	ee07 3a90 	vmov	s15, r3
 8009b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b76:	e021      	b.n	8009bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	ee07 3a90 	vmov	s15, r3
 8009b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b8a:	4b37      	ldr	r3, [pc, #220]	; (8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b92:	ee07 3a90 	vmov	s15, r3
 8009b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009bbc:	4b2a      	ldr	r3, [pc, #168]	; (8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc0:	0a5b      	lsrs	r3, r3, #9
 8009bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009be2:	ee17 2a90 	vmov	r2, s15
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009bea:	4b1f      	ldr	r3, [pc, #124]	; (8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bee:	0c1b      	lsrs	r3, r3, #16
 8009bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bf4:	ee07 3a90 	vmov	s15, r3
 8009bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c04:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c10:	ee17 2a90 	vmov	r2, s15
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009c18:	4b13      	ldr	r3, [pc, #76]	; (8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1c:	0e1b      	lsrs	r3, r3, #24
 8009c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c22:	ee07 3a90 	vmov	s15, r3
 8009c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c3e:	ee17 2a90 	vmov	r2, s15
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009c46:	e008      	b.n	8009c5a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	609a      	str	r2, [r3, #8]
}
 8009c5a:	bf00      	nop
 8009c5c:	3724      	adds	r7, #36	; 0x24
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	58024400 	.word	0x58024400
 8009c6c:	03d09000 	.word	0x03d09000
 8009c70:	46000000 	.word	0x46000000
 8009c74:	4c742400 	.word	0x4c742400
 8009c78:	4a742400 	.word	0x4a742400
 8009c7c:	4af42400 	.word	0x4af42400

08009c80 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b089      	sub	sp, #36	; 0x24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c88:	4ba0      	ldr	r3, [pc, #640]	; (8009f0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c8c:	f003 0303 	and.w	r3, r3, #3
 8009c90:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009c92:	4b9e      	ldr	r3, [pc, #632]	; (8009f0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c96:	091b      	lsrs	r3, r3, #4
 8009c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c9c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009c9e:	4b9b      	ldr	r3, [pc, #620]	; (8009f0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009ca8:	4b98      	ldr	r3, [pc, #608]	; (8009f0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cac:	08db      	lsrs	r3, r3, #3
 8009cae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cb2:	693a      	ldr	r2, [r7, #16]
 8009cb4:	fb02 f303 	mul.w	r3, r2, r3
 8009cb8:	ee07 3a90 	vmov	s15, r3
 8009cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 8111 	beq.w	8009eee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	f000 8083 	beq.w	8009dda <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	f200 80a1 	bhi.w	8009e1e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d056      	beq.n	8009d96 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009ce8:	e099      	b.n	8009e1e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cea:	4b88      	ldr	r3, [pc, #544]	; (8009f0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 0320 	and.w	r3, r3, #32
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d02d      	beq.n	8009d52 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cf6:	4b85      	ldr	r3, [pc, #532]	; (8009f0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	08db      	lsrs	r3, r3, #3
 8009cfc:	f003 0303 	and.w	r3, r3, #3
 8009d00:	4a83      	ldr	r2, [pc, #524]	; (8009f10 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009d02:	fa22 f303 	lsr.w	r3, r2, r3
 8009d06:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	ee07 3a90 	vmov	s15, r3
 8009d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	ee07 3a90 	vmov	s15, r3
 8009d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d20:	4b7a      	ldr	r3, [pc, #488]	; (8009f0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d28:	ee07 3a90 	vmov	s15, r3
 8009d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d30:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d34:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009f14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d4c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009d50:	e087      	b.n	8009e62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	ee07 3a90 	vmov	s15, r3
 8009d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009f18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d64:	4b69      	ldr	r3, [pc, #420]	; (8009f0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d6c:	ee07 3a90 	vmov	s15, r3
 8009d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d74:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d78:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009f14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d94:	e065      	b.n	8009e62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	ee07 3a90 	vmov	s15, r3
 8009d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009da0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009f1c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009da8:	4b58      	ldr	r3, [pc, #352]	; (8009f0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009db0:	ee07 3a90 	vmov	s15, r3
 8009db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009db8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dbc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009f14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dd8:	e043      	b.n	8009e62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	ee07 3a90 	vmov	s15, r3
 8009de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009de4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009f20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dec:	4b47      	ldr	r3, [pc, #284]	; (8009f0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df4:	ee07 3a90 	vmov	s15, r3
 8009df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e00:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009f14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e1c:	e021      	b.n	8009e62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	ee07 3a90 	vmov	s15, r3
 8009e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e28:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009f18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e30:	4b36      	ldr	r3, [pc, #216]	; (8009f0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e38:	ee07 3a90 	vmov	s15, r3
 8009e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e40:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e44:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009f14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e60:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009e62:	4b2a      	ldr	r3, [pc, #168]	; (8009f0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e66:	0a5b      	lsrs	r3, r3, #9
 8009e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e6c:	ee07 3a90 	vmov	s15, r3
 8009e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e88:	ee17 2a90 	vmov	r2, s15
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009e90:	4b1e      	ldr	r3, [pc, #120]	; (8009f0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e94:	0c1b      	lsrs	r3, r3, #16
 8009e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e9a:	ee07 3a90 	vmov	s15, r3
 8009e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eb6:	ee17 2a90 	vmov	r2, s15
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009ebe:	4b13      	ldr	r3, [pc, #76]	; (8009f0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec2:	0e1b      	lsrs	r3, r3, #24
 8009ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ec8:	ee07 3a90 	vmov	s15, r3
 8009ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ed8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ee4:	ee17 2a90 	vmov	r2, s15
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009eec:	e008      	b.n	8009f00 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	609a      	str	r2, [r3, #8]
}
 8009f00:	bf00      	nop
 8009f02:	3724      	adds	r7, #36	; 0x24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	58024400 	.word	0x58024400
 8009f10:	03d09000 	.word	0x03d09000
 8009f14:	46000000 	.word	0x46000000
 8009f18:	4c742400 	.word	0x4c742400
 8009f1c:	4a742400 	.word	0x4a742400
 8009f20:	4af42400 	.word	0x4af42400

08009f24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f32:	4b53      	ldr	r3, [pc, #332]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f36:	f003 0303 	and.w	r3, r3, #3
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d101      	bne.n	8009f42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e099      	b.n	800a076 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009f42:	4b4f      	ldr	r3, [pc, #316]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a4e      	ldr	r2, [pc, #312]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009f48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009f4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f4e:	f7f8 f8e9 	bl	8002124 <HAL_GetTick>
 8009f52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f54:	e008      	b.n	8009f68 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009f56:	f7f8 f8e5 	bl	8002124 <HAL_GetTick>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d901      	bls.n	8009f68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e086      	b.n	800a076 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f68:	4b45      	ldr	r3, [pc, #276]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1f0      	bne.n	8009f56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009f74:	4b42      	ldr	r3, [pc, #264]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	031b      	lsls	r3, r3, #12
 8009f82:	493f      	ldr	r1, [pc, #252]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	628b      	str	r3, [r1, #40]	; 0x28
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	3b01      	subs	r3, #1
 8009f98:	025b      	lsls	r3, r3, #9
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	431a      	orrs	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	041b      	lsls	r3, r3, #16
 8009fa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009faa:	431a      	orrs	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	061b      	lsls	r3, r3, #24
 8009fb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fb8:	4931      	ldr	r1, [pc, #196]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009fbe:	4b30      	ldr	r3, [pc, #192]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	492d      	ldr	r1, [pc, #180]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009fd0:	4b2b      	ldr	r3, [pc, #172]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	f023 0220 	bic.w	r2, r3, #32
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	4928      	ldr	r1, [pc, #160]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009fe2:	4b27      	ldr	r3, [pc, #156]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	4a26      	ldr	r2, [pc, #152]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009fe8:	f023 0310 	bic.w	r3, r3, #16
 8009fec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009fee:	4b24      	ldr	r3, [pc, #144]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ff2:	4b24      	ldr	r3, [pc, #144]	; (800a084 <RCCEx_PLL2_Config+0x160>)
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	69d2      	ldr	r2, [r2, #28]
 8009ffa:	00d2      	lsls	r2, r2, #3
 8009ffc:	4920      	ldr	r1, [pc, #128]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009ffe:	4313      	orrs	r3, r2
 800a000:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a002:	4b1f      	ldr	r3, [pc, #124]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a006:	4a1e      	ldr	r2, [pc, #120]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a008:	f043 0310 	orr.w	r3, r3, #16
 800a00c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d106      	bne.n	800a022 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a014:	4b1a      	ldr	r3, [pc, #104]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a018:	4a19      	ldr	r2, [pc, #100]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a01a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a01e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a020:	e00f      	b.n	800a042 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d106      	bne.n	800a036 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a028:	4b15      	ldr	r3, [pc, #84]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02c:	4a14      	ldr	r2, [pc, #80]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a02e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a032:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a034:	e005      	b.n	800a042 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a036:	4b12      	ldr	r3, [pc, #72]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03a:	4a11      	ldr	r2, [pc, #68]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a03c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a040:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a042:	4b0f      	ldr	r3, [pc, #60]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a0e      	ldr	r2, [pc, #56]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a048:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a04c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a04e:	f7f8 f869 	bl	8002124 <HAL_GetTick>
 800a052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a054:	e008      	b.n	800a068 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a056:	f7f8 f865 	bl	8002124 <HAL_GetTick>
 800a05a:	4602      	mov	r2, r0
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	2b02      	cmp	r3, #2
 800a062:	d901      	bls.n	800a068 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a064:	2303      	movs	r3, #3
 800a066:	e006      	b.n	800a076 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a068:	4b05      	ldr	r3, [pc, #20]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d0f0      	beq.n	800a056 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a074:	7bfb      	ldrb	r3, [r7, #15]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	58024400 	.word	0x58024400
 800a084:	ffff0007 	.word	0xffff0007

0800a088 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a096:	4b53      	ldr	r3, [pc, #332]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09a:	f003 0303 	and.w	r3, r3, #3
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d101      	bne.n	800a0a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e099      	b.n	800a1da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a0a6:	4b4f      	ldr	r3, [pc, #316]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a4e      	ldr	r2, [pc, #312]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a0ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0b2:	f7f8 f837 	bl	8002124 <HAL_GetTick>
 800a0b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0b8:	e008      	b.n	800a0cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a0ba:	f7f8 f833 	bl	8002124 <HAL_GetTick>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d901      	bls.n	800a0cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e086      	b.n	800a1da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0cc:	4b45      	ldr	r3, [pc, #276]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1f0      	bne.n	800a0ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a0d8:	4b42      	ldr	r3, [pc, #264]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	051b      	lsls	r3, r3, #20
 800a0e6:	493f      	ldr	r1, [pc, #252]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	628b      	str	r3, [r1, #40]	; 0x28
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	025b      	lsls	r3, r3, #9
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	431a      	orrs	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	3b01      	subs	r3, #1
 800a108:	041b      	lsls	r3, r3, #16
 800a10a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a10e:	431a      	orrs	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	3b01      	subs	r3, #1
 800a116:	061b      	lsls	r3, r3, #24
 800a118:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a11c:	4931      	ldr	r1, [pc, #196]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a11e:	4313      	orrs	r3, r2
 800a120:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a122:	4b30      	ldr	r3, [pc, #192]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a126:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	492d      	ldr	r1, [pc, #180]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a130:	4313      	orrs	r3, r2
 800a132:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a134:	4b2b      	ldr	r3, [pc, #172]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a138:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	4928      	ldr	r1, [pc, #160]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a142:	4313      	orrs	r3, r2
 800a144:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a146:	4b27      	ldr	r3, [pc, #156]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14a:	4a26      	ldr	r2, [pc, #152]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a14c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a150:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a152:	4b24      	ldr	r3, [pc, #144]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a156:	4b24      	ldr	r3, [pc, #144]	; (800a1e8 <RCCEx_PLL3_Config+0x160>)
 800a158:	4013      	ands	r3, r2
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	69d2      	ldr	r2, [r2, #28]
 800a15e:	00d2      	lsls	r2, r2, #3
 800a160:	4920      	ldr	r1, [pc, #128]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a162:	4313      	orrs	r3, r2
 800a164:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a166:	4b1f      	ldr	r3, [pc, #124]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16a:	4a1e      	ldr	r2, [pc, #120]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a16c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a170:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d106      	bne.n	800a186 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a178:	4b1a      	ldr	r3, [pc, #104]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	4a19      	ldr	r2, [pc, #100]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a17e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a182:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a184:	e00f      	b.n	800a1a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d106      	bne.n	800a19a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a18c:	4b15      	ldr	r3, [pc, #84]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a190:	4a14      	ldr	r2, [pc, #80]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a192:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a196:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a198:	e005      	b.n	800a1a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a19a:	4b12      	ldr	r3, [pc, #72]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19e:	4a11      	ldr	r2, [pc, #68]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a1a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a1a6:	4b0f      	ldr	r3, [pc, #60]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a0e      	ldr	r2, [pc, #56]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a1ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1b2:	f7f7 ffb7 	bl	8002124 <HAL_GetTick>
 800a1b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1b8:	e008      	b.n	800a1cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a1ba:	f7f7 ffb3 	bl	8002124 <HAL_GetTick>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d901      	bls.n	800a1cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e006      	b.n	800a1da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1cc:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d0f0      	beq.n	800a1ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	58024400 	.word	0x58024400
 800a1e8:	ffff0007 	.word	0xffff0007

0800a1ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d101      	bne.n	800a1fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e049      	b.n	800a292 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a204:	b2db      	uxtb	r3, r3
 800a206:	2b00      	cmp	r3, #0
 800a208:	d106      	bne.n	800a218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7f7 fcd0 	bl	8001bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	3304      	adds	r3, #4
 800a228:	4619      	mov	r1, r3
 800a22a:	4610      	mov	r0, r2
 800a22c:	f000 fd5c 	bl	800ace8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
	...

0800a29c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d001      	beq.n	800a2b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e04f      	b.n	800a354 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68da      	ldr	r2, [r3, #12]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f042 0201 	orr.w	r2, r2, #1
 800a2ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a23      	ldr	r2, [pc, #140]	; (800a360 <HAL_TIM_Base_Start_IT+0xc4>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d01d      	beq.n	800a312 <HAL_TIM_Base_Start_IT+0x76>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2de:	d018      	beq.n	800a312 <HAL_TIM_Base_Start_IT+0x76>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a1f      	ldr	r2, [pc, #124]	; (800a364 <HAL_TIM_Base_Start_IT+0xc8>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d013      	beq.n	800a312 <HAL_TIM_Base_Start_IT+0x76>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a1e      	ldr	r2, [pc, #120]	; (800a368 <HAL_TIM_Base_Start_IT+0xcc>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d00e      	beq.n	800a312 <HAL_TIM_Base_Start_IT+0x76>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a1c      	ldr	r2, [pc, #112]	; (800a36c <HAL_TIM_Base_Start_IT+0xd0>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d009      	beq.n	800a312 <HAL_TIM_Base_Start_IT+0x76>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a1b      	ldr	r2, [pc, #108]	; (800a370 <HAL_TIM_Base_Start_IT+0xd4>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d004      	beq.n	800a312 <HAL_TIM_Base_Start_IT+0x76>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a19      	ldr	r2, [pc, #100]	; (800a374 <HAL_TIM_Base_Start_IT+0xd8>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d115      	bne.n	800a33e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	689a      	ldr	r2, [r3, #8]
 800a318:	4b17      	ldr	r3, [pc, #92]	; (800a378 <HAL_TIM_Base_Start_IT+0xdc>)
 800a31a:	4013      	ands	r3, r2
 800a31c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b06      	cmp	r3, #6
 800a322:	d015      	beq.n	800a350 <HAL_TIM_Base_Start_IT+0xb4>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a32a:	d011      	beq.n	800a350 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f042 0201 	orr.w	r2, r2, #1
 800a33a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a33c:	e008      	b.n	800a350 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f042 0201 	orr.w	r2, r2, #1
 800a34c:	601a      	str	r2, [r3, #0]
 800a34e:	e000      	b.n	800a352 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a350:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	40010000 	.word	0x40010000
 800a364:	40000400 	.word	0x40000400
 800a368:	40000800 	.word	0x40000800
 800a36c:	40000c00 	.word	0x40000c00
 800a370:	40010400 	.word	0x40010400
 800a374:	40001800 	.word	0x40001800
 800a378:	00010007 	.word	0x00010007

0800a37c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e049      	b.n	800a422 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	d106      	bne.n	800a3a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f841 	bl	800a42a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2202      	movs	r2, #2
 800a3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	3304      	adds	r3, #4
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	4610      	mov	r0, r2
 800a3bc:	f000 fc94 	bl	800ace8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a42a:	b480      	push	{r7}
 800a42c:	b083      	sub	sp, #12
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a432:	bf00      	nop
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
	...

0800a440 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d109      	bne.n	800a464 <HAL_TIM_PWM_Start+0x24>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a456:	b2db      	uxtb	r3, r3
 800a458:	2b01      	cmp	r3, #1
 800a45a:	bf14      	ite	ne
 800a45c:	2301      	movne	r3, #1
 800a45e:	2300      	moveq	r3, #0
 800a460:	b2db      	uxtb	r3, r3
 800a462:	e03c      	b.n	800a4de <HAL_TIM_PWM_Start+0x9e>
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	2b04      	cmp	r3, #4
 800a468:	d109      	bne.n	800a47e <HAL_TIM_PWM_Start+0x3e>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b01      	cmp	r3, #1
 800a474:	bf14      	ite	ne
 800a476:	2301      	movne	r3, #1
 800a478:	2300      	moveq	r3, #0
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	e02f      	b.n	800a4de <HAL_TIM_PWM_Start+0x9e>
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	2b08      	cmp	r3, #8
 800a482:	d109      	bne.n	800a498 <HAL_TIM_PWM_Start+0x58>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	bf14      	ite	ne
 800a490:	2301      	movne	r3, #1
 800a492:	2300      	moveq	r3, #0
 800a494:	b2db      	uxtb	r3, r3
 800a496:	e022      	b.n	800a4de <HAL_TIM_PWM_Start+0x9e>
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	2b0c      	cmp	r3, #12
 800a49c:	d109      	bne.n	800a4b2 <HAL_TIM_PWM_Start+0x72>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	bf14      	ite	ne
 800a4aa:	2301      	movne	r3, #1
 800a4ac:	2300      	moveq	r3, #0
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	e015      	b.n	800a4de <HAL_TIM_PWM_Start+0x9e>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	2b10      	cmp	r3, #16
 800a4b6:	d109      	bne.n	800a4cc <HAL_TIM_PWM_Start+0x8c>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	bf14      	ite	ne
 800a4c4:	2301      	movne	r3, #1
 800a4c6:	2300      	moveq	r3, #0
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	e008      	b.n	800a4de <HAL_TIM_PWM_Start+0x9e>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	bf14      	ite	ne
 800a4d8:	2301      	movne	r3, #1
 800a4da:	2300      	moveq	r3, #0
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d001      	beq.n	800a4e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e09c      	b.n	800a620 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d104      	bne.n	800a4f6 <HAL_TIM_PWM_Start+0xb6>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2202      	movs	r2, #2
 800a4f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4f4:	e023      	b.n	800a53e <HAL_TIM_PWM_Start+0xfe>
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b04      	cmp	r3, #4
 800a4fa:	d104      	bne.n	800a506 <HAL_TIM_PWM_Start+0xc6>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2202      	movs	r2, #2
 800a500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a504:	e01b      	b.n	800a53e <HAL_TIM_PWM_Start+0xfe>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2b08      	cmp	r3, #8
 800a50a:	d104      	bne.n	800a516 <HAL_TIM_PWM_Start+0xd6>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2202      	movs	r2, #2
 800a510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a514:	e013      	b.n	800a53e <HAL_TIM_PWM_Start+0xfe>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b0c      	cmp	r3, #12
 800a51a:	d104      	bne.n	800a526 <HAL_TIM_PWM_Start+0xe6>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2202      	movs	r2, #2
 800a520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a524:	e00b      	b.n	800a53e <HAL_TIM_PWM_Start+0xfe>
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b10      	cmp	r3, #16
 800a52a:	d104      	bne.n	800a536 <HAL_TIM_PWM_Start+0xf6>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2202      	movs	r2, #2
 800a530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a534:	e003      	b.n	800a53e <HAL_TIM_PWM_Start+0xfe>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2202      	movs	r2, #2
 800a53a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2201      	movs	r2, #1
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	4618      	mov	r0, r3
 800a548:	f000 ffd4 	bl	800b4f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a35      	ldr	r2, [pc, #212]	; (800a628 <HAL_TIM_PWM_Start+0x1e8>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d013      	beq.n	800a57e <HAL_TIM_PWM_Start+0x13e>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a34      	ldr	r2, [pc, #208]	; (800a62c <HAL_TIM_PWM_Start+0x1ec>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d00e      	beq.n	800a57e <HAL_TIM_PWM_Start+0x13e>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a32      	ldr	r2, [pc, #200]	; (800a630 <HAL_TIM_PWM_Start+0x1f0>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d009      	beq.n	800a57e <HAL_TIM_PWM_Start+0x13e>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a31      	ldr	r2, [pc, #196]	; (800a634 <HAL_TIM_PWM_Start+0x1f4>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d004      	beq.n	800a57e <HAL_TIM_PWM_Start+0x13e>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a2f      	ldr	r2, [pc, #188]	; (800a638 <HAL_TIM_PWM_Start+0x1f8>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d101      	bne.n	800a582 <HAL_TIM_PWM_Start+0x142>
 800a57e:	2301      	movs	r3, #1
 800a580:	e000      	b.n	800a584 <HAL_TIM_PWM_Start+0x144>
 800a582:	2300      	movs	r3, #0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d007      	beq.n	800a598 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a596:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a22      	ldr	r2, [pc, #136]	; (800a628 <HAL_TIM_PWM_Start+0x1e8>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d01d      	beq.n	800a5de <HAL_TIM_PWM_Start+0x19e>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5aa:	d018      	beq.n	800a5de <HAL_TIM_PWM_Start+0x19e>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a22      	ldr	r2, [pc, #136]	; (800a63c <HAL_TIM_PWM_Start+0x1fc>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d013      	beq.n	800a5de <HAL_TIM_PWM_Start+0x19e>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a21      	ldr	r2, [pc, #132]	; (800a640 <HAL_TIM_PWM_Start+0x200>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d00e      	beq.n	800a5de <HAL_TIM_PWM_Start+0x19e>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a1f      	ldr	r2, [pc, #124]	; (800a644 <HAL_TIM_PWM_Start+0x204>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d009      	beq.n	800a5de <HAL_TIM_PWM_Start+0x19e>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a17      	ldr	r2, [pc, #92]	; (800a62c <HAL_TIM_PWM_Start+0x1ec>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d004      	beq.n	800a5de <HAL_TIM_PWM_Start+0x19e>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a1b      	ldr	r2, [pc, #108]	; (800a648 <HAL_TIM_PWM_Start+0x208>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d115      	bne.n	800a60a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	689a      	ldr	r2, [r3, #8]
 800a5e4:	4b19      	ldr	r3, [pc, #100]	; (800a64c <HAL_TIM_PWM_Start+0x20c>)
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2b06      	cmp	r3, #6
 800a5ee:	d015      	beq.n	800a61c <HAL_TIM_PWM_Start+0x1dc>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5f6:	d011      	beq.n	800a61c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f042 0201 	orr.w	r2, r2, #1
 800a606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a608:	e008      	b.n	800a61c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f042 0201 	orr.w	r2, r2, #1
 800a618:	601a      	str	r2, [r3, #0]
 800a61a:	e000      	b.n	800a61e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a61c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	40010000 	.word	0x40010000
 800a62c:	40010400 	.word	0x40010400
 800a630:	40014000 	.word	0x40014000
 800a634:	40014400 	.word	0x40014400
 800a638:	40014800 	.word	0x40014800
 800a63c:	40000400 	.word	0x40000400
 800a640:	40000800 	.word	0x40000800
 800a644:	40000c00 	.word	0x40000c00
 800a648:	40001800 	.word	0x40001800
 800a64c:	00010007 	.word	0x00010007

0800a650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	f003 0302 	and.w	r3, r3, #2
 800a662:	2b02      	cmp	r3, #2
 800a664:	d122      	bne.n	800a6ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	f003 0302 	and.w	r3, r3, #2
 800a670:	2b02      	cmp	r3, #2
 800a672:	d11b      	bne.n	800a6ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f06f 0202 	mvn.w	r2, #2
 800a67c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	f003 0303 	and.w	r3, r3, #3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d003      	beq.n	800a69a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 fb0a 	bl	800acac <HAL_TIM_IC_CaptureCallback>
 800a698:	e005      	b.n	800a6a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fafc 	bl	800ac98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fb0d 	bl	800acc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	f003 0304 	and.w	r3, r3, #4
 800a6b6:	2b04      	cmp	r3, #4
 800a6b8:	d122      	bne.n	800a700 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	f003 0304 	and.w	r3, r3, #4
 800a6c4:	2b04      	cmp	r3, #4
 800a6c6:	d11b      	bne.n	800a700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f06f 0204 	mvn.w	r2, #4
 800a6d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2202      	movs	r2, #2
 800a6d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fae0 	bl	800acac <HAL_TIM_IC_CaptureCallback>
 800a6ec:	e005      	b.n	800a6fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fad2 	bl	800ac98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fae3 	bl	800acc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	f003 0308 	and.w	r3, r3, #8
 800a70a:	2b08      	cmp	r3, #8
 800a70c:	d122      	bne.n	800a754 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	f003 0308 	and.w	r3, r3, #8
 800a718:	2b08      	cmp	r3, #8
 800a71a:	d11b      	bne.n	800a754 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f06f 0208 	mvn.w	r2, #8
 800a724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2204      	movs	r2, #4
 800a72a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	f003 0303 	and.w	r3, r3, #3
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fab6 	bl	800acac <HAL_TIM_IC_CaptureCallback>
 800a740:	e005      	b.n	800a74e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 faa8 	bl	800ac98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fab9 	bl	800acc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	f003 0310 	and.w	r3, r3, #16
 800a75e:	2b10      	cmp	r3, #16
 800a760:	d122      	bne.n	800a7a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f003 0310 	and.w	r3, r3, #16
 800a76c:	2b10      	cmp	r3, #16
 800a76e:	d11b      	bne.n	800a7a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f06f 0210 	mvn.w	r2, #16
 800a778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2208      	movs	r2, #8
 800a77e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d003      	beq.n	800a796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fa8c 	bl	800acac <HAL_TIM_IC_CaptureCallback>
 800a794:	e005      	b.n	800a7a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fa7e 	bl	800ac98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fa8f 	bl	800acc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d10e      	bne.n	800a7d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	f003 0301 	and.w	r3, r3, #1
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d107      	bne.n	800a7d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f06f 0201 	mvn.w	r2, #1
 800a7cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f7f6 fdfa 	bl	80013c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7de:	2b80      	cmp	r3, #128	; 0x80
 800a7e0:	d10e      	bne.n	800a800 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ec:	2b80      	cmp	r3, #128	; 0x80
 800a7ee:	d107      	bne.n	800a800 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 ffb0 	bl	800b760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a80a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a80e:	d10e      	bne.n	800a82e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a81a:	2b80      	cmp	r3, #128	; 0x80
 800a81c:	d107      	bne.n	800a82e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 ffa3 	bl	800b774 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a838:	2b40      	cmp	r3, #64	; 0x40
 800a83a:	d10e      	bne.n	800a85a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a846:	2b40      	cmp	r3, #64	; 0x40
 800a848:	d107      	bne.n	800a85a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fa3d 	bl	800acd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	f003 0320 	and.w	r3, r3, #32
 800a864:	2b20      	cmp	r3, #32
 800a866:	d10e      	bne.n	800a886 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	f003 0320 	and.w	r3, r3, #32
 800a872:	2b20      	cmp	r3, #32
 800a874:	d107      	bne.n	800a886 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f06f 0220 	mvn.w	r2, #32
 800a87e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 ff63 	bl	800b74c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a886:	bf00      	nop
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d101      	bne.n	800a8aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	e0fd      	b.n	800aaa6 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2b14      	cmp	r3, #20
 800a8b6:	f200 80f0 	bhi.w	800aa9a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a8ba:	a201      	add	r2, pc, #4	; (adr r2, 800a8c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c0:	0800a915 	.word	0x0800a915
 800a8c4:	0800aa9b 	.word	0x0800aa9b
 800a8c8:	0800aa9b 	.word	0x0800aa9b
 800a8cc:	0800aa9b 	.word	0x0800aa9b
 800a8d0:	0800a955 	.word	0x0800a955
 800a8d4:	0800aa9b 	.word	0x0800aa9b
 800a8d8:	0800aa9b 	.word	0x0800aa9b
 800a8dc:	0800aa9b 	.word	0x0800aa9b
 800a8e0:	0800a997 	.word	0x0800a997
 800a8e4:	0800aa9b 	.word	0x0800aa9b
 800a8e8:	0800aa9b 	.word	0x0800aa9b
 800a8ec:	0800aa9b 	.word	0x0800aa9b
 800a8f0:	0800a9d7 	.word	0x0800a9d7
 800a8f4:	0800aa9b 	.word	0x0800aa9b
 800a8f8:	0800aa9b 	.word	0x0800aa9b
 800a8fc:	0800aa9b 	.word	0x0800aa9b
 800a900:	0800aa19 	.word	0x0800aa19
 800a904:	0800aa9b 	.word	0x0800aa9b
 800a908:	0800aa9b 	.word	0x0800aa9b
 800a90c:	0800aa9b 	.word	0x0800aa9b
 800a910:	0800aa59 	.word	0x0800aa59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68b9      	ldr	r1, [r7, #8]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 fa7e 	bl	800ae1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	699a      	ldr	r2, [r3, #24]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f042 0208 	orr.w	r2, r2, #8
 800a92e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	699a      	ldr	r2, [r3, #24]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f022 0204 	bic.w	r2, r2, #4
 800a93e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	6999      	ldr	r1, [r3, #24]
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	691a      	ldr	r2, [r3, #16]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	430a      	orrs	r2, r1
 800a950:	619a      	str	r2, [r3, #24]
      break;
 800a952:	e0a3      	b.n	800aa9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68b9      	ldr	r1, [r7, #8]
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 faee 	bl	800af3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	699a      	ldr	r2, [r3, #24]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a96e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	699a      	ldr	r2, [r3, #24]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a97e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	6999      	ldr	r1, [r3, #24]
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	691b      	ldr	r3, [r3, #16]
 800a98a:	021a      	lsls	r2, r3, #8
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	430a      	orrs	r2, r1
 800a992:	619a      	str	r2, [r3, #24]
      break;
 800a994:	e082      	b.n	800aa9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68b9      	ldr	r1, [r7, #8]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f000 fb57 	bl	800b050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	69da      	ldr	r2, [r3, #28]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f042 0208 	orr.w	r2, r2, #8
 800a9b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	69da      	ldr	r2, [r3, #28]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f022 0204 	bic.w	r2, r2, #4
 800a9c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	69d9      	ldr	r1, [r3, #28]
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	691a      	ldr	r2, [r3, #16]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	430a      	orrs	r2, r1
 800a9d2:	61da      	str	r2, [r3, #28]
      break;
 800a9d4:	e062      	b.n	800aa9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68b9      	ldr	r1, [r7, #8]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f000 fbbd 	bl	800b15c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	69da      	ldr	r2, [r3, #28]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	69da      	ldr	r2, [r3, #28]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	69d9      	ldr	r1, [r3, #28]
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	021a      	lsls	r2, r3, #8
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	430a      	orrs	r2, r1
 800aa14:	61da      	str	r2, [r3, #28]
      break;
 800aa16:	e041      	b.n	800aa9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68b9      	ldr	r1, [r7, #8]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 fc04 	bl	800b22c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f042 0208 	orr.w	r2, r2, #8
 800aa32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f022 0204 	bic.w	r2, r2, #4
 800aa42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	691a      	ldr	r2, [r3, #16]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	430a      	orrs	r2, r1
 800aa54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa56:	e021      	b.n	800aa9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	68b9      	ldr	r1, [r7, #8]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 fc46 	bl	800b2f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	021a      	lsls	r2, r3, #8
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	430a      	orrs	r2, r1
 800aa96:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa98:	e000      	b.n	800aa9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800aa9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop

0800aab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d101      	bne.n	800aac8 <HAL_TIM_ConfigClockSource+0x18>
 800aac4:	2302      	movs	r3, #2
 800aac6:	e0db      	b.n	800ac80 <HAL_TIM_ConfigClockSource+0x1d0>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2202      	movs	r2, #2
 800aad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	4b69      	ldr	r3, [pc, #420]	; (800ac88 <HAL_TIM_ConfigClockSource+0x1d8>)
 800aae4:	4013      	ands	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aaee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a63      	ldr	r2, [pc, #396]	; (800ac8c <HAL_TIM_ConfigClockSource+0x1dc>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	f000 80a9 	beq.w	800ac56 <HAL_TIM_ConfigClockSource+0x1a6>
 800ab04:	4a61      	ldr	r2, [pc, #388]	; (800ac8c <HAL_TIM_ConfigClockSource+0x1dc>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	f200 80ae 	bhi.w	800ac68 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab0c:	4a60      	ldr	r2, [pc, #384]	; (800ac90 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	f000 80a1 	beq.w	800ac56 <HAL_TIM_ConfigClockSource+0x1a6>
 800ab14:	4a5e      	ldr	r2, [pc, #376]	; (800ac90 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	f200 80a6 	bhi.w	800ac68 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab1c:	4a5d      	ldr	r2, [pc, #372]	; (800ac94 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	f000 8099 	beq.w	800ac56 <HAL_TIM_ConfigClockSource+0x1a6>
 800ab24:	4a5b      	ldr	r2, [pc, #364]	; (800ac94 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	f200 809e 	bhi.w	800ac68 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ab30:	f000 8091 	beq.w	800ac56 <HAL_TIM_ConfigClockSource+0x1a6>
 800ab34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ab38:	f200 8096 	bhi.w	800ac68 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab40:	f000 8089 	beq.w	800ac56 <HAL_TIM_ConfigClockSource+0x1a6>
 800ab44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab48:	f200 808e 	bhi.w	800ac68 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab50:	d03e      	beq.n	800abd0 <HAL_TIM_ConfigClockSource+0x120>
 800ab52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab56:	f200 8087 	bhi.w	800ac68 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab5e:	f000 8085 	beq.w	800ac6c <HAL_TIM_ConfigClockSource+0x1bc>
 800ab62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab66:	d87f      	bhi.n	800ac68 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab68:	2b70      	cmp	r3, #112	; 0x70
 800ab6a:	d01a      	beq.n	800aba2 <HAL_TIM_ConfigClockSource+0xf2>
 800ab6c:	2b70      	cmp	r3, #112	; 0x70
 800ab6e:	d87b      	bhi.n	800ac68 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab70:	2b60      	cmp	r3, #96	; 0x60
 800ab72:	d050      	beq.n	800ac16 <HAL_TIM_ConfigClockSource+0x166>
 800ab74:	2b60      	cmp	r3, #96	; 0x60
 800ab76:	d877      	bhi.n	800ac68 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab78:	2b50      	cmp	r3, #80	; 0x50
 800ab7a:	d03c      	beq.n	800abf6 <HAL_TIM_ConfigClockSource+0x146>
 800ab7c:	2b50      	cmp	r3, #80	; 0x50
 800ab7e:	d873      	bhi.n	800ac68 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab80:	2b40      	cmp	r3, #64	; 0x40
 800ab82:	d058      	beq.n	800ac36 <HAL_TIM_ConfigClockSource+0x186>
 800ab84:	2b40      	cmp	r3, #64	; 0x40
 800ab86:	d86f      	bhi.n	800ac68 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab88:	2b30      	cmp	r3, #48	; 0x30
 800ab8a:	d064      	beq.n	800ac56 <HAL_TIM_ConfigClockSource+0x1a6>
 800ab8c:	2b30      	cmp	r3, #48	; 0x30
 800ab8e:	d86b      	bhi.n	800ac68 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab90:	2b20      	cmp	r3, #32
 800ab92:	d060      	beq.n	800ac56 <HAL_TIM_ConfigClockSource+0x1a6>
 800ab94:	2b20      	cmp	r3, #32
 800ab96:	d867      	bhi.n	800ac68 <HAL_TIM_ConfigClockSource+0x1b8>
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d05c      	beq.n	800ac56 <HAL_TIM_ConfigClockSource+0x1a6>
 800ab9c:	2b10      	cmp	r3, #16
 800ab9e:	d05a      	beq.n	800ac56 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800aba0:	e062      	b.n	800ac68 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6818      	ldr	r0, [r3, #0]
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	6899      	ldr	r1, [r3, #8]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	685a      	ldr	r2, [r3, #4]
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	f000 fc7f 	bl	800b4b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800abc4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	609a      	str	r2, [r3, #8]
      break;
 800abce:	e04e      	b.n	800ac6e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6818      	ldr	r0, [r3, #0]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	6899      	ldr	r1, [r3, #8]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	f000 fc68 	bl	800b4b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	689a      	ldr	r2, [r3, #8]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abf2:	609a      	str	r2, [r3, #8]
      break;
 800abf4:	e03b      	b.n	800ac6e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6818      	ldr	r0, [r3, #0]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	6859      	ldr	r1, [r3, #4]
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	461a      	mov	r2, r3
 800ac04:	f000 fbd8 	bl	800b3b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2150      	movs	r1, #80	; 0x50
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 fc32 	bl	800b478 <TIM_ITRx_SetConfig>
      break;
 800ac14:	e02b      	b.n	800ac6e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6818      	ldr	r0, [r3, #0]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	6859      	ldr	r1, [r3, #4]
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	461a      	mov	r2, r3
 800ac24:	f000 fbf7 	bl	800b416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2160      	movs	r1, #96	; 0x60
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 fc22 	bl	800b478 <TIM_ITRx_SetConfig>
      break;
 800ac34:	e01b      	b.n	800ac6e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6818      	ldr	r0, [r3, #0]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	6859      	ldr	r1, [r3, #4]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	461a      	mov	r2, r3
 800ac44:	f000 fbb8 	bl	800b3b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2140      	movs	r1, #64	; 0x40
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 fc12 	bl	800b478 <TIM_ITRx_SetConfig>
      break;
 800ac54:	e00b      	b.n	800ac6e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	4610      	mov	r0, r2
 800ac62:	f000 fc09 	bl	800b478 <TIM_ITRx_SetConfig>
        break;
 800ac66:	e002      	b.n	800ac6e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800ac68:	bf00      	nop
 800ac6a:	e000      	b.n	800ac6e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800ac6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2201      	movs	r2, #1
 800ac72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	ffceff88 	.word	0xffceff88
 800ac8c:	00100040 	.word	0x00100040
 800ac90:	00100030 	.word	0x00100030
 800ac94:	00100020 	.word	0x00100020

0800ac98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aca0:	bf00      	nop
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acc8:	bf00      	nop
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a40      	ldr	r2, [pc, #256]	; (800adfc <TIM_Base_SetConfig+0x114>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d013      	beq.n	800ad28 <TIM_Base_SetConfig+0x40>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad06:	d00f      	beq.n	800ad28 <TIM_Base_SetConfig+0x40>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a3d      	ldr	r2, [pc, #244]	; (800ae00 <TIM_Base_SetConfig+0x118>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d00b      	beq.n	800ad28 <TIM_Base_SetConfig+0x40>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a3c      	ldr	r2, [pc, #240]	; (800ae04 <TIM_Base_SetConfig+0x11c>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d007      	beq.n	800ad28 <TIM_Base_SetConfig+0x40>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a3b      	ldr	r2, [pc, #236]	; (800ae08 <TIM_Base_SetConfig+0x120>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d003      	beq.n	800ad28 <TIM_Base_SetConfig+0x40>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a3a      	ldr	r2, [pc, #232]	; (800ae0c <TIM_Base_SetConfig+0x124>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d108      	bne.n	800ad3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a2f      	ldr	r2, [pc, #188]	; (800adfc <TIM_Base_SetConfig+0x114>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d01f      	beq.n	800ad82 <TIM_Base_SetConfig+0x9a>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad48:	d01b      	beq.n	800ad82 <TIM_Base_SetConfig+0x9a>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a2c      	ldr	r2, [pc, #176]	; (800ae00 <TIM_Base_SetConfig+0x118>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d017      	beq.n	800ad82 <TIM_Base_SetConfig+0x9a>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4a2b      	ldr	r2, [pc, #172]	; (800ae04 <TIM_Base_SetConfig+0x11c>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d013      	beq.n	800ad82 <TIM_Base_SetConfig+0x9a>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a2a      	ldr	r2, [pc, #168]	; (800ae08 <TIM_Base_SetConfig+0x120>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d00f      	beq.n	800ad82 <TIM_Base_SetConfig+0x9a>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a29      	ldr	r2, [pc, #164]	; (800ae0c <TIM_Base_SetConfig+0x124>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d00b      	beq.n	800ad82 <TIM_Base_SetConfig+0x9a>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a28      	ldr	r2, [pc, #160]	; (800ae10 <TIM_Base_SetConfig+0x128>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d007      	beq.n	800ad82 <TIM_Base_SetConfig+0x9a>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a27      	ldr	r2, [pc, #156]	; (800ae14 <TIM_Base_SetConfig+0x12c>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d003      	beq.n	800ad82 <TIM_Base_SetConfig+0x9a>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a26      	ldr	r2, [pc, #152]	; (800ae18 <TIM_Base_SetConfig+0x130>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d108      	bne.n	800ad94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	695b      	ldr	r3, [r3, #20]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	689a      	ldr	r2, [r3, #8]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4a10      	ldr	r2, [pc, #64]	; (800adfc <TIM_Base_SetConfig+0x114>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d00f      	beq.n	800ade0 <TIM_Base_SetConfig+0xf8>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a12      	ldr	r2, [pc, #72]	; (800ae0c <TIM_Base_SetConfig+0x124>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d00b      	beq.n	800ade0 <TIM_Base_SetConfig+0xf8>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a11      	ldr	r2, [pc, #68]	; (800ae10 <TIM_Base_SetConfig+0x128>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d007      	beq.n	800ade0 <TIM_Base_SetConfig+0xf8>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a10      	ldr	r2, [pc, #64]	; (800ae14 <TIM_Base_SetConfig+0x12c>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d003      	beq.n	800ade0 <TIM_Base_SetConfig+0xf8>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a0f      	ldr	r2, [pc, #60]	; (800ae18 <TIM_Base_SetConfig+0x130>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d103      	bne.n	800ade8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	691a      	ldr	r2, [r3, #16]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	615a      	str	r2, [r3, #20]
}
 800adee:	bf00      	nop
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	40010000 	.word	0x40010000
 800ae00:	40000400 	.word	0x40000400
 800ae04:	40000800 	.word	0x40000800
 800ae08:	40000c00 	.word	0x40000c00
 800ae0c:	40010400 	.word	0x40010400
 800ae10:	40014000 	.word	0x40014000
 800ae14:	40014400 	.word	0x40014400
 800ae18:	40014800 	.word	0x40014800

0800ae1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	f023 0201 	bic.w	r2, r3, #1
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a1b      	ldr	r3, [r3, #32]
 800ae36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	699b      	ldr	r3, [r3, #24]
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	4b37      	ldr	r3, [pc, #220]	; (800af24 <TIM_OC1_SetConfig+0x108>)
 800ae48:	4013      	ands	r3, r2
 800ae4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f023 0303 	bic.w	r3, r3, #3
 800ae52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	f023 0302 	bic.w	r3, r3, #2
 800ae64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a2d      	ldr	r2, [pc, #180]	; (800af28 <TIM_OC1_SetConfig+0x10c>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d00f      	beq.n	800ae98 <TIM_OC1_SetConfig+0x7c>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a2c      	ldr	r2, [pc, #176]	; (800af2c <TIM_OC1_SetConfig+0x110>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d00b      	beq.n	800ae98 <TIM_OC1_SetConfig+0x7c>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a2b      	ldr	r2, [pc, #172]	; (800af30 <TIM_OC1_SetConfig+0x114>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d007      	beq.n	800ae98 <TIM_OC1_SetConfig+0x7c>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a2a      	ldr	r2, [pc, #168]	; (800af34 <TIM_OC1_SetConfig+0x118>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d003      	beq.n	800ae98 <TIM_OC1_SetConfig+0x7c>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a29      	ldr	r2, [pc, #164]	; (800af38 <TIM_OC1_SetConfig+0x11c>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d10c      	bne.n	800aeb2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	f023 0308 	bic.w	r3, r3, #8
 800ae9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	f023 0304 	bic.w	r3, r3, #4
 800aeb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a1c      	ldr	r2, [pc, #112]	; (800af28 <TIM_OC1_SetConfig+0x10c>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d00f      	beq.n	800aeda <TIM_OC1_SetConfig+0xbe>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a1b      	ldr	r2, [pc, #108]	; (800af2c <TIM_OC1_SetConfig+0x110>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d00b      	beq.n	800aeda <TIM_OC1_SetConfig+0xbe>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4a1a      	ldr	r2, [pc, #104]	; (800af30 <TIM_OC1_SetConfig+0x114>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d007      	beq.n	800aeda <TIM_OC1_SetConfig+0xbe>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a19      	ldr	r2, [pc, #100]	; (800af34 <TIM_OC1_SetConfig+0x118>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d003      	beq.n	800aeda <TIM_OC1_SetConfig+0xbe>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a18      	ldr	r2, [pc, #96]	; (800af38 <TIM_OC1_SetConfig+0x11c>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d111      	bne.n	800aefe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	695b      	ldr	r3, [r3, #20]
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	699b      	ldr	r3, [r3, #24]
 800aef8:	693a      	ldr	r2, [r7, #16]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	685a      	ldr	r2, [r3, #4]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	697a      	ldr	r2, [r7, #20]
 800af16:	621a      	str	r2, [r3, #32]
}
 800af18:	bf00      	nop
 800af1a:	371c      	adds	r7, #28
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr
 800af24:	fffeff8f 	.word	0xfffeff8f
 800af28:	40010000 	.word	0x40010000
 800af2c:	40010400 	.word	0x40010400
 800af30:	40014000 	.word	0x40014000
 800af34:	40014400 	.word	0x40014400
 800af38:	40014800 	.word	0x40014800

0800af3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b087      	sub	sp, #28
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	f023 0210 	bic.w	r2, r3, #16
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	4b34      	ldr	r3, [pc, #208]	; (800b038 <TIM_OC2_SetConfig+0xfc>)
 800af68:	4013      	ands	r3, r2
 800af6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	021b      	lsls	r3, r3, #8
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	4313      	orrs	r3, r2
 800af7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	f023 0320 	bic.w	r3, r3, #32
 800af86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	011b      	lsls	r3, r3, #4
 800af8e:	697a      	ldr	r2, [r7, #20]
 800af90:	4313      	orrs	r3, r2
 800af92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a29      	ldr	r2, [pc, #164]	; (800b03c <TIM_OC2_SetConfig+0x100>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d003      	beq.n	800afa4 <TIM_OC2_SetConfig+0x68>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a28      	ldr	r2, [pc, #160]	; (800b040 <TIM_OC2_SetConfig+0x104>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d10d      	bne.n	800afc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	011b      	lsls	r3, r3, #4
 800afb2:	697a      	ldr	r2, [r7, #20]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a1e      	ldr	r2, [pc, #120]	; (800b03c <TIM_OC2_SetConfig+0x100>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d00f      	beq.n	800afe8 <TIM_OC2_SetConfig+0xac>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a1d      	ldr	r2, [pc, #116]	; (800b040 <TIM_OC2_SetConfig+0x104>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d00b      	beq.n	800afe8 <TIM_OC2_SetConfig+0xac>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a1c      	ldr	r2, [pc, #112]	; (800b044 <TIM_OC2_SetConfig+0x108>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d007      	beq.n	800afe8 <TIM_OC2_SetConfig+0xac>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a1b      	ldr	r2, [pc, #108]	; (800b048 <TIM_OC2_SetConfig+0x10c>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d003      	beq.n	800afe8 <TIM_OC2_SetConfig+0xac>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a1a      	ldr	r2, [pc, #104]	; (800b04c <TIM_OC2_SetConfig+0x110>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d113      	bne.n	800b010 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800afee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	695b      	ldr	r3, [r3, #20]
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	693a      	ldr	r2, [r7, #16]
 800b000:	4313      	orrs	r3, r2
 800b002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	693a      	ldr	r2, [r7, #16]
 800b014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	685a      	ldr	r2, [r3, #4]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	697a      	ldr	r2, [r7, #20]
 800b028:	621a      	str	r2, [r3, #32]
}
 800b02a:	bf00      	nop
 800b02c:	371c      	adds	r7, #28
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	feff8fff 	.word	0xfeff8fff
 800b03c:	40010000 	.word	0x40010000
 800b040:	40010400 	.word	0x40010400
 800b044:	40014000 	.word	0x40014000
 800b048:	40014400 	.word	0x40014400
 800b04c:	40014800 	.word	0x40014800

0800b050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b050:	b480      	push	{r7}
 800b052:	b087      	sub	sp, #28
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a1b      	ldr	r3, [r3, #32]
 800b05e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a1b      	ldr	r3, [r3, #32]
 800b06a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	69db      	ldr	r3, [r3, #28]
 800b076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b07e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f023 0303 	bic.w	r3, r3, #3
 800b086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	4313      	orrs	r3, r2
 800b090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	021b      	lsls	r3, r3, #8
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a27      	ldr	r2, [pc, #156]	; (800b148 <TIM_OC3_SetConfig+0xf8>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d003      	beq.n	800b0b6 <TIM_OC3_SetConfig+0x66>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a26      	ldr	r2, [pc, #152]	; (800b14c <TIM_OC3_SetConfig+0xfc>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d10d      	bne.n	800b0d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	021b      	lsls	r3, r3, #8
 800b0c4:	697a      	ldr	r2, [r7, #20]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4a1c      	ldr	r2, [pc, #112]	; (800b148 <TIM_OC3_SetConfig+0xf8>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d00f      	beq.n	800b0fa <TIM_OC3_SetConfig+0xaa>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4a1b      	ldr	r2, [pc, #108]	; (800b14c <TIM_OC3_SetConfig+0xfc>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d00b      	beq.n	800b0fa <TIM_OC3_SetConfig+0xaa>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a1a      	ldr	r2, [pc, #104]	; (800b150 <TIM_OC3_SetConfig+0x100>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d007      	beq.n	800b0fa <TIM_OC3_SetConfig+0xaa>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a19      	ldr	r2, [pc, #100]	; (800b154 <TIM_OC3_SetConfig+0x104>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d003      	beq.n	800b0fa <TIM_OC3_SetConfig+0xaa>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a18      	ldr	r2, [pc, #96]	; (800b158 <TIM_OC3_SetConfig+0x108>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d113      	bne.n	800b122 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	011b      	lsls	r3, r3, #4
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	4313      	orrs	r3, r2
 800b114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	699b      	ldr	r3, [r3, #24]
 800b11a:	011b      	lsls	r3, r3, #4
 800b11c:	693a      	ldr	r2, [r7, #16]
 800b11e:	4313      	orrs	r3, r2
 800b120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	693a      	ldr	r2, [r7, #16]
 800b126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	685a      	ldr	r2, [r3, #4]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	697a      	ldr	r2, [r7, #20]
 800b13a:	621a      	str	r2, [r3, #32]
}
 800b13c:	bf00      	nop
 800b13e:	371c      	adds	r7, #28
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	40010000 	.word	0x40010000
 800b14c:	40010400 	.word	0x40010400
 800b150:	40014000 	.word	0x40014000
 800b154:	40014400 	.word	0x40014400
 800b158:	40014800 	.word	0x40014800

0800b15c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b087      	sub	sp, #28
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a1b      	ldr	r3, [r3, #32]
 800b176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	69db      	ldr	r3, [r3, #28]
 800b182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b18a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	021b      	lsls	r3, r3, #8
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	031b      	lsls	r3, r3, #12
 800b1ae:	693a      	ldr	r2, [r7, #16]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a18      	ldr	r2, [pc, #96]	; (800b218 <TIM_OC4_SetConfig+0xbc>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d00f      	beq.n	800b1dc <TIM_OC4_SetConfig+0x80>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a17      	ldr	r2, [pc, #92]	; (800b21c <TIM_OC4_SetConfig+0xc0>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d00b      	beq.n	800b1dc <TIM_OC4_SetConfig+0x80>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a16      	ldr	r2, [pc, #88]	; (800b220 <TIM_OC4_SetConfig+0xc4>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d007      	beq.n	800b1dc <TIM_OC4_SetConfig+0x80>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a15      	ldr	r2, [pc, #84]	; (800b224 <TIM_OC4_SetConfig+0xc8>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d003      	beq.n	800b1dc <TIM_OC4_SetConfig+0x80>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a14      	ldr	r2, [pc, #80]	; (800b228 <TIM_OC4_SetConfig+0xcc>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d109      	bne.n	800b1f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	695b      	ldr	r3, [r3, #20]
 800b1e8:	019b      	lsls	r3, r3, #6
 800b1ea:	697a      	ldr	r2, [r7, #20]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	697a      	ldr	r2, [r7, #20]
 800b1f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	685a      	ldr	r2, [r3, #4]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	693a      	ldr	r2, [r7, #16]
 800b208:	621a      	str	r2, [r3, #32]
}
 800b20a:	bf00      	nop
 800b20c:	371c      	adds	r7, #28
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	40010000 	.word	0x40010000
 800b21c:	40010400 	.word	0x40010400
 800b220:	40014000 	.word	0x40014000
 800b224:	40014400 	.word	0x40014400
 800b228:	40014800 	.word	0x40014800

0800b22c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b087      	sub	sp, #28
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b25a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	4313      	orrs	r3, r2
 800b264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b26c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	041b      	lsls	r3, r3, #16
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	4313      	orrs	r3, r2
 800b278:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a17      	ldr	r2, [pc, #92]	; (800b2dc <TIM_OC5_SetConfig+0xb0>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d00f      	beq.n	800b2a2 <TIM_OC5_SetConfig+0x76>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a16      	ldr	r2, [pc, #88]	; (800b2e0 <TIM_OC5_SetConfig+0xb4>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d00b      	beq.n	800b2a2 <TIM_OC5_SetConfig+0x76>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4a15      	ldr	r2, [pc, #84]	; (800b2e4 <TIM_OC5_SetConfig+0xb8>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d007      	beq.n	800b2a2 <TIM_OC5_SetConfig+0x76>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a14      	ldr	r2, [pc, #80]	; (800b2e8 <TIM_OC5_SetConfig+0xbc>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d003      	beq.n	800b2a2 <TIM_OC5_SetConfig+0x76>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4a13      	ldr	r2, [pc, #76]	; (800b2ec <TIM_OC5_SetConfig+0xc0>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d109      	bne.n	800b2b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	695b      	ldr	r3, [r3, #20]
 800b2ae:	021b      	lsls	r3, r3, #8
 800b2b0:	697a      	ldr	r2, [r7, #20]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	697a      	ldr	r2, [r7, #20]
 800b2ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	685a      	ldr	r2, [r3, #4]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	621a      	str	r2, [r3, #32]
}
 800b2d0:	bf00      	nop
 800b2d2:	371c      	adds	r7, #28
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	40010000 	.word	0x40010000
 800b2e0:	40010400 	.word	0x40010400
 800b2e4:	40014000 	.word	0x40014000
 800b2e8:	40014400 	.word	0x40014400
 800b2ec:	40014800 	.word	0x40014800

0800b2f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b087      	sub	sp, #28
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b31e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	021b      	lsls	r3, r3, #8
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	4313      	orrs	r3, r2
 800b32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	051b      	lsls	r3, r3, #20
 800b33a:	693a      	ldr	r2, [r7, #16]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4a18      	ldr	r2, [pc, #96]	; (800b3a4 <TIM_OC6_SetConfig+0xb4>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d00f      	beq.n	800b368 <TIM_OC6_SetConfig+0x78>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4a17      	ldr	r2, [pc, #92]	; (800b3a8 <TIM_OC6_SetConfig+0xb8>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d00b      	beq.n	800b368 <TIM_OC6_SetConfig+0x78>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4a16      	ldr	r2, [pc, #88]	; (800b3ac <TIM_OC6_SetConfig+0xbc>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d007      	beq.n	800b368 <TIM_OC6_SetConfig+0x78>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a15      	ldr	r2, [pc, #84]	; (800b3b0 <TIM_OC6_SetConfig+0xc0>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d003      	beq.n	800b368 <TIM_OC6_SetConfig+0x78>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a14      	ldr	r2, [pc, #80]	; (800b3b4 <TIM_OC6_SetConfig+0xc4>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d109      	bne.n	800b37c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b36e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	029b      	lsls	r3, r3, #10
 800b376:	697a      	ldr	r2, [r7, #20]
 800b378:	4313      	orrs	r3, r2
 800b37a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	697a      	ldr	r2, [r7, #20]
 800b380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	685a      	ldr	r2, [r3, #4]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	693a      	ldr	r2, [r7, #16]
 800b394:	621a      	str	r2, [r3, #32]
}
 800b396:	bf00      	nop
 800b398:	371c      	adds	r7, #28
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	40010000 	.word	0x40010000
 800b3a8:	40010400 	.word	0x40010400
 800b3ac:	40014000 	.word	0x40014000
 800b3b0:	40014400 	.word	0x40014400
 800b3b4:	40014800 	.word	0x40014800

0800b3b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6a1b      	ldr	r3, [r3, #32]
 800b3c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	6a1b      	ldr	r3, [r3, #32]
 800b3ce:	f023 0201 	bic.w	r2, r3, #1
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	699b      	ldr	r3, [r3, #24]
 800b3da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b3e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	011b      	lsls	r3, r3, #4
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f023 030a 	bic.w	r3, r3, #10
 800b3f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b3f6:	697a      	ldr	r2, [r7, #20]
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	621a      	str	r2, [r3, #32]
}
 800b40a:	bf00      	nop
 800b40c:	371c      	adds	r7, #28
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b416:	b480      	push	{r7}
 800b418:	b087      	sub	sp, #28
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	60f8      	str	r0, [r7, #12]
 800b41e:	60b9      	str	r1, [r7, #8]
 800b420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6a1b      	ldr	r3, [r3, #32]
 800b426:	f023 0210 	bic.w	r2, r3, #16
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6a1b      	ldr	r3, [r3, #32]
 800b438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	031b      	lsls	r3, r3, #12
 800b446:	697a      	ldr	r2, [r7, #20]
 800b448:	4313      	orrs	r3, r2
 800b44a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	011b      	lsls	r3, r3, #4
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	697a      	ldr	r2, [r7, #20]
 800b462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	693a      	ldr	r2, [r7, #16]
 800b468:	621a      	str	r2, [r3, #32]
}
 800b46a:	bf00      	nop
 800b46c:	371c      	adds	r7, #28
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr
	...

0800b478 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b478:	b480      	push	{r7}
 800b47a:	b085      	sub	sp, #20
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	4b09      	ldr	r3, [pc, #36]	; (800b4b0 <TIM_ITRx_SetConfig+0x38>)
 800b48c:	4013      	ands	r3, r2
 800b48e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	4313      	orrs	r3, r2
 800b496:	f043 0307 	orr.w	r3, r3, #7
 800b49a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	609a      	str	r2, [r3, #8]
}
 800b4a2:	bf00      	nop
 800b4a4:	3714      	adds	r7, #20
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	ffcfff8f 	.word	0xffcfff8f

0800b4b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b087      	sub	sp, #28
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
 800b4c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	021a      	lsls	r2, r3, #8
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	431a      	orrs	r2, r3
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	697a      	ldr	r2, [r7, #20]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	697a      	ldr	r2, [r7, #20]
 800b4e6:	609a      	str	r2, [r3, #8]
}
 800b4e8:	bf00      	nop
 800b4ea:	371c      	adds	r7, #28
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b087      	sub	sp, #28
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	f003 031f 	and.w	r3, r3, #31
 800b506:	2201      	movs	r2, #1
 800b508:	fa02 f303 	lsl.w	r3, r2, r3
 800b50c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	6a1a      	ldr	r2, [r3, #32]
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	43db      	mvns	r3, r3
 800b516:	401a      	ands	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6a1a      	ldr	r2, [r3, #32]
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	f003 031f 	and.w	r3, r3, #31
 800b526:	6879      	ldr	r1, [r7, #4]
 800b528:	fa01 f303 	lsl.w	r3, r1, r3
 800b52c:	431a      	orrs	r2, r3
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	621a      	str	r2, [r3, #32]
}
 800b532:	bf00      	nop
 800b534:	371c      	adds	r7, #28
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
	...

0800b540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b550:	2b01      	cmp	r3, #1
 800b552:	d101      	bne.n	800b558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b554:	2302      	movs	r3, #2
 800b556:	e068      	b.n	800b62a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2202      	movs	r2, #2
 800b564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4a2e      	ldr	r2, [pc, #184]	; (800b638 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d004      	beq.n	800b58c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a2d      	ldr	r2, [pc, #180]	; (800b63c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d108      	bne.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b592:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a1e      	ldr	r2, [pc, #120]	; (800b638 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d01d      	beq.n	800b5fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5ca:	d018      	beq.n	800b5fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a1b      	ldr	r2, [pc, #108]	; (800b640 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d013      	beq.n	800b5fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a1a      	ldr	r2, [pc, #104]	; (800b644 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d00e      	beq.n	800b5fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a18      	ldr	r2, [pc, #96]	; (800b648 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d009      	beq.n	800b5fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a13      	ldr	r2, [pc, #76]	; (800b63c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d004      	beq.n	800b5fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a14      	ldr	r2, [pc, #80]	; (800b64c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d10c      	bne.n	800b618 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b604:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	68ba      	ldr	r2, [r7, #8]
 800b616:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b628:	2300      	movs	r3, #0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3714      	adds	r7, #20
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	40010000 	.word	0x40010000
 800b63c:	40010400 	.word	0x40010400
 800b640:	40000400 	.word	0x40000400
 800b644:	40000800 	.word	0x40000800
 800b648:	40000c00 	.word	0x40000c00
 800b64c:	40001800 	.word	0x40001800

0800b650 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b65a:	2300      	movs	r3, #0
 800b65c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b664:	2b01      	cmp	r3, #1
 800b666:	d101      	bne.n	800b66c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b668:	2302      	movs	r3, #2
 800b66a:	e065      	b.n	800b738 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	4313      	orrs	r3, r2
 800b680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	4313      	orrs	r3, r2
 800b68e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	691b      	ldr	r3, [r3, #16]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	041b      	lsls	r3, r3, #16
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a16      	ldr	r2, [pc, #88]	; (800b744 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d004      	beq.n	800b6fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a14      	ldr	r2, [pc, #80]	; (800b748 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d115      	bne.n	800b726 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b704:	051b      	lsls	r3, r3, #20
 800b706:	4313      	orrs	r3, r2
 800b708:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	69db      	ldr	r3, [r3, #28]
 800b714:	4313      	orrs	r3, r2
 800b716:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	6a1b      	ldr	r3, [r3, #32]
 800b722:	4313      	orrs	r3, r2
 800b724:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3714      	adds	r7, #20
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr
 800b744:	40010000 	.word	0x40010000
 800b748:	40010400 	.word	0x40010400

0800b74c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b77c:	bf00      	nop
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d101      	bne.n	800b79a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	e042      	b.n	800b820 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d106      	bne.n	800b7b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f7f6 fa9d 	bl	8001cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2224      	movs	r2, #36	; 0x24
 800b7b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f022 0201 	bic.w	r2, r2, #1
 800b7c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f8c2 	bl	800b954 <UART_SetConfig>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d101      	bne.n	800b7da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e022      	b.n	800b820 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d002      	beq.n	800b7e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fe16 	bl	800c414 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	685a      	ldr	r2, [r3, #4]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	689a      	ldr	r2, [r3, #8]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f042 0201 	orr.w	r2, r2, #1
 800b816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 fe9d 	bl	800c558 <UART_CheckIdleState>
 800b81e:	4603      	mov	r3, r0
}
 800b820:	4618      	mov	r0, r3
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b08a      	sub	sp, #40	; 0x28
 800b82c:	af02      	add	r7, sp, #8
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	603b      	str	r3, [r7, #0]
 800b834:	4613      	mov	r3, r2
 800b836:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b83e:	2b20      	cmp	r3, #32
 800b840:	f040 8083 	bne.w	800b94a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d002      	beq.n	800b850 <HAL_UART_Transmit+0x28>
 800b84a:	88fb      	ldrh	r3, [r7, #6]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d101      	bne.n	800b854 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	e07b      	b.n	800b94c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d101      	bne.n	800b862 <HAL_UART_Transmit+0x3a>
 800b85e:	2302      	movs	r3, #2
 800b860:	e074      	b.n	800b94c <HAL_UART_Transmit+0x124>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2201      	movs	r2, #1
 800b866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2221      	movs	r2, #33	; 0x21
 800b876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b87a:	f7f6 fc53 	bl	8002124 <HAL_GetTick>
 800b87e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	88fa      	ldrh	r2, [r7, #6]
 800b884:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	88fa      	ldrh	r2, [r7, #6]
 800b88c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b898:	d108      	bne.n	800b8ac <HAL_UART_Transmit+0x84>
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	691b      	ldr	r3, [r3, #16]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d104      	bne.n	800b8ac <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	61bb      	str	r3, [r7, #24]
 800b8aa:	e003      	b.n	800b8b4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b8bc:	e02c      	b.n	800b918 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	2180      	movs	r1, #128	; 0x80
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f000 fe90 	bl	800c5ee <UART_WaitOnFlagUntilTimeout>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b8d4:	2303      	movs	r3, #3
 800b8d6:	e039      	b.n	800b94c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d10b      	bne.n	800b8f6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	881b      	ldrh	r3, [r3, #0]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b8ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	3302      	adds	r3, #2
 800b8f2:	61bb      	str	r3, [r7, #24]
 800b8f4:	e007      	b.n	800b906 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	781a      	ldrb	r2, [r3, #0]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	3301      	adds	r3, #1
 800b904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	3b01      	subs	r3, #1
 800b910:	b29a      	uxth	r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b91e:	b29b      	uxth	r3, r3
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1cc      	bne.n	800b8be <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	2200      	movs	r2, #0
 800b92c:	2140      	movs	r1, #64	; 0x40
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	f000 fe5d 	bl	800c5ee <UART_WaitOnFlagUntilTimeout>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b93a:	2303      	movs	r3, #3
 800b93c:	e006      	b.n	800b94c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2220      	movs	r2, #32
 800b942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	e000      	b.n	800b94c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b94a:	2302      	movs	r3, #2
  }
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3720      	adds	r7, #32
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b954:	b5b0      	push	{r4, r5, r7, lr}
 800b956:	b08e      	sub	sp, #56	; 0x38
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b95c:	2300      	movs	r3, #0
 800b95e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	689a      	ldr	r2, [r3, #8]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	691b      	ldr	r3, [r3, #16]
 800b96a:	431a      	orrs	r2, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	695b      	ldr	r3, [r3, #20]
 800b970:	431a      	orrs	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	69db      	ldr	r3, [r3, #28]
 800b976:	4313      	orrs	r3, r2
 800b978:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	4bbf      	ldr	r3, [pc, #764]	; (800bc80 <UART_SetConfig+0x32c>)
 800b982:	4013      	ands	r3, r2
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	6812      	ldr	r2, [r2, #0]
 800b988:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b98a:	430b      	orrs	r3, r1
 800b98c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	68da      	ldr	r2, [r3, #12]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	430a      	orrs	r2, r1
 800b9a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4ab5      	ldr	r2, [pc, #724]	; (800bc84 <UART_SetConfig+0x330>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d004      	beq.n	800b9be <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a1b      	ldr	r3, [r3, #32]
 800b9b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	689a      	ldr	r2, [r3, #8]
 800b9c4:	4bb0      	ldr	r3, [pc, #704]	; (800bc88 <UART_SetConfig+0x334>)
 800b9c6:	4013      	ands	r3, r2
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	6812      	ldr	r2, [r2, #0]
 800b9cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9ce:	430b      	orrs	r3, r1
 800b9d0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d8:	f023 010f 	bic.w	r1, r3, #15
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	430a      	orrs	r2, r1
 800b9e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4aa7      	ldr	r2, [pc, #668]	; (800bc8c <UART_SetConfig+0x338>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d176      	bne.n	800bae0 <UART_SetConfig+0x18c>
 800b9f2:	4ba7      	ldr	r3, [pc, #668]	; (800bc90 <UART_SetConfig+0x33c>)
 800b9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9fa:	2b28      	cmp	r3, #40	; 0x28
 800b9fc:	d86c      	bhi.n	800bad8 <UART_SetConfig+0x184>
 800b9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ba04 <UART_SetConfig+0xb0>)
 800ba00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba04:	0800baa9 	.word	0x0800baa9
 800ba08:	0800bad9 	.word	0x0800bad9
 800ba0c:	0800bad9 	.word	0x0800bad9
 800ba10:	0800bad9 	.word	0x0800bad9
 800ba14:	0800bad9 	.word	0x0800bad9
 800ba18:	0800bad9 	.word	0x0800bad9
 800ba1c:	0800bad9 	.word	0x0800bad9
 800ba20:	0800bad9 	.word	0x0800bad9
 800ba24:	0800bab1 	.word	0x0800bab1
 800ba28:	0800bad9 	.word	0x0800bad9
 800ba2c:	0800bad9 	.word	0x0800bad9
 800ba30:	0800bad9 	.word	0x0800bad9
 800ba34:	0800bad9 	.word	0x0800bad9
 800ba38:	0800bad9 	.word	0x0800bad9
 800ba3c:	0800bad9 	.word	0x0800bad9
 800ba40:	0800bad9 	.word	0x0800bad9
 800ba44:	0800bab9 	.word	0x0800bab9
 800ba48:	0800bad9 	.word	0x0800bad9
 800ba4c:	0800bad9 	.word	0x0800bad9
 800ba50:	0800bad9 	.word	0x0800bad9
 800ba54:	0800bad9 	.word	0x0800bad9
 800ba58:	0800bad9 	.word	0x0800bad9
 800ba5c:	0800bad9 	.word	0x0800bad9
 800ba60:	0800bad9 	.word	0x0800bad9
 800ba64:	0800bac1 	.word	0x0800bac1
 800ba68:	0800bad9 	.word	0x0800bad9
 800ba6c:	0800bad9 	.word	0x0800bad9
 800ba70:	0800bad9 	.word	0x0800bad9
 800ba74:	0800bad9 	.word	0x0800bad9
 800ba78:	0800bad9 	.word	0x0800bad9
 800ba7c:	0800bad9 	.word	0x0800bad9
 800ba80:	0800bad9 	.word	0x0800bad9
 800ba84:	0800bac9 	.word	0x0800bac9
 800ba88:	0800bad9 	.word	0x0800bad9
 800ba8c:	0800bad9 	.word	0x0800bad9
 800ba90:	0800bad9 	.word	0x0800bad9
 800ba94:	0800bad9 	.word	0x0800bad9
 800ba98:	0800bad9 	.word	0x0800bad9
 800ba9c:	0800bad9 	.word	0x0800bad9
 800baa0:	0800bad9 	.word	0x0800bad9
 800baa4:	0800bad1 	.word	0x0800bad1
 800baa8:	2301      	movs	r3, #1
 800baaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baae:	e222      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bab0:	2304      	movs	r3, #4
 800bab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bab6:	e21e      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bab8:	2308      	movs	r3, #8
 800baba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800babe:	e21a      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bac0:	2310      	movs	r3, #16
 800bac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bac6:	e216      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bac8:	2320      	movs	r3, #32
 800baca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bace:	e212      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bad0:	2340      	movs	r3, #64	; 0x40
 800bad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bad6:	e20e      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bad8:	2380      	movs	r3, #128	; 0x80
 800bada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bade:	e20a      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a6b      	ldr	r2, [pc, #428]	; (800bc94 <UART_SetConfig+0x340>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d130      	bne.n	800bb4c <UART_SetConfig+0x1f8>
 800baea:	4b69      	ldr	r3, [pc, #420]	; (800bc90 <UART_SetConfig+0x33c>)
 800baec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baee:	f003 0307 	and.w	r3, r3, #7
 800baf2:	2b05      	cmp	r3, #5
 800baf4:	d826      	bhi.n	800bb44 <UART_SetConfig+0x1f0>
 800baf6:	a201      	add	r2, pc, #4	; (adr r2, 800bafc <UART_SetConfig+0x1a8>)
 800baf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafc:	0800bb15 	.word	0x0800bb15
 800bb00:	0800bb1d 	.word	0x0800bb1d
 800bb04:	0800bb25 	.word	0x0800bb25
 800bb08:	0800bb2d 	.word	0x0800bb2d
 800bb0c:	0800bb35 	.word	0x0800bb35
 800bb10:	0800bb3d 	.word	0x0800bb3d
 800bb14:	2300      	movs	r3, #0
 800bb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb1a:	e1ec      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bb1c:	2304      	movs	r3, #4
 800bb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb22:	e1e8      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bb24:	2308      	movs	r3, #8
 800bb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb2a:	e1e4      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bb2c:	2310      	movs	r3, #16
 800bb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb32:	e1e0      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bb34:	2320      	movs	r3, #32
 800bb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb3a:	e1dc      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bb3c:	2340      	movs	r3, #64	; 0x40
 800bb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb42:	e1d8      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bb44:	2380      	movs	r3, #128	; 0x80
 800bb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb4a:	e1d4      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a51      	ldr	r2, [pc, #324]	; (800bc98 <UART_SetConfig+0x344>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d130      	bne.n	800bbb8 <UART_SetConfig+0x264>
 800bb56:	4b4e      	ldr	r3, [pc, #312]	; (800bc90 <UART_SetConfig+0x33c>)
 800bb58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb5a:	f003 0307 	and.w	r3, r3, #7
 800bb5e:	2b05      	cmp	r3, #5
 800bb60:	d826      	bhi.n	800bbb0 <UART_SetConfig+0x25c>
 800bb62:	a201      	add	r2, pc, #4	; (adr r2, 800bb68 <UART_SetConfig+0x214>)
 800bb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb68:	0800bb81 	.word	0x0800bb81
 800bb6c:	0800bb89 	.word	0x0800bb89
 800bb70:	0800bb91 	.word	0x0800bb91
 800bb74:	0800bb99 	.word	0x0800bb99
 800bb78:	0800bba1 	.word	0x0800bba1
 800bb7c:	0800bba9 	.word	0x0800bba9
 800bb80:	2300      	movs	r3, #0
 800bb82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb86:	e1b6      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bb88:	2304      	movs	r3, #4
 800bb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb8e:	e1b2      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bb90:	2308      	movs	r3, #8
 800bb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb96:	e1ae      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bb98:	2310      	movs	r3, #16
 800bb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb9e:	e1aa      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bba0:	2320      	movs	r3, #32
 800bba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bba6:	e1a6      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bba8:	2340      	movs	r3, #64	; 0x40
 800bbaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbae:	e1a2      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bbb0:	2380      	movs	r3, #128	; 0x80
 800bbb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbb6:	e19e      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a37      	ldr	r2, [pc, #220]	; (800bc9c <UART_SetConfig+0x348>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d130      	bne.n	800bc24 <UART_SetConfig+0x2d0>
 800bbc2:	4b33      	ldr	r3, [pc, #204]	; (800bc90 <UART_SetConfig+0x33c>)
 800bbc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbc6:	f003 0307 	and.w	r3, r3, #7
 800bbca:	2b05      	cmp	r3, #5
 800bbcc:	d826      	bhi.n	800bc1c <UART_SetConfig+0x2c8>
 800bbce:	a201      	add	r2, pc, #4	; (adr r2, 800bbd4 <UART_SetConfig+0x280>)
 800bbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd4:	0800bbed 	.word	0x0800bbed
 800bbd8:	0800bbf5 	.word	0x0800bbf5
 800bbdc:	0800bbfd 	.word	0x0800bbfd
 800bbe0:	0800bc05 	.word	0x0800bc05
 800bbe4:	0800bc0d 	.word	0x0800bc0d
 800bbe8:	0800bc15 	.word	0x0800bc15
 800bbec:	2300      	movs	r3, #0
 800bbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbf2:	e180      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bbf4:	2304      	movs	r3, #4
 800bbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbfa:	e17c      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bbfc:	2308      	movs	r3, #8
 800bbfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc02:	e178      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bc04:	2310      	movs	r3, #16
 800bc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc0a:	e174      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bc0c:	2320      	movs	r3, #32
 800bc0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc12:	e170      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bc14:	2340      	movs	r3, #64	; 0x40
 800bc16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc1a:	e16c      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bc1c:	2380      	movs	r3, #128	; 0x80
 800bc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc22:	e168      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a1d      	ldr	r2, [pc, #116]	; (800bca0 <UART_SetConfig+0x34c>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d142      	bne.n	800bcb4 <UART_SetConfig+0x360>
 800bc2e:	4b18      	ldr	r3, [pc, #96]	; (800bc90 <UART_SetConfig+0x33c>)
 800bc30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc32:	f003 0307 	and.w	r3, r3, #7
 800bc36:	2b05      	cmp	r3, #5
 800bc38:	d838      	bhi.n	800bcac <UART_SetConfig+0x358>
 800bc3a:	a201      	add	r2, pc, #4	; (adr r2, 800bc40 <UART_SetConfig+0x2ec>)
 800bc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc40:	0800bc59 	.word	0x0800bc59
 800bc44:	0800bc61 	.word	0x0800bc61
 800bc48:	0800bc69 	.word	0x0800bc69
 800bc4c:	0800bc71 	.word	0x0800bc71
 800bc50:	0800bc79 	.word	0x0800bc79
 800bc54:	0800bca5 	.word	0x0800bca5
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc5e:	e14a      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bc60:	2304      	movs	r3, #4
 800bc62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc66:	e146      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bc68:	2308      	movs	r3, #8
 800bc6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc6e:	e142      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bc70:	2310      	movs	r3, #16
 800bc72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc76:	e13e      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bc78:	2320      	movs	r3, #32
 800bc7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc7e:	e13a      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bc80:	cfff69f3 	.word	0xcfff69f3
 800bc84:	58000c00 	.word	0x58000c00
 800bc88:	11fff4ff 	.word	0x11fff4ff
 800bc8c:	40011000 	.word	0x40011000
 800bc90:	58024400 	.word	0x58024400
 800bc94:	40004400 	.word	0x40004400
 800bc98:	40004800 	.word	0x40004800
 800bc9c:	40004c00 	.word	0x40004c00
 800bca0:	40005000 	.word	0x40005000
 800bca4:	2340      	movs	r3, #64	; 0x40
 800bca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcaa:	e124      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bcac:	2380      	movs	r3, #128	; 0x80
 800bcae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcb2:	e120      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4acc      	ldr	r2, [pc, #816]	; (800bfec <UART_SetConfig+0x698>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d176      	bne.n	800bdac <UART_SetConfig+0x458>
 800bcbe:	4bcc      	ldr	r3, [pc, #816]	; (800bff0 <UART_SetConfig+0x69c>)
 800bcc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bcc6:	2b28      	cmp	r3, #40	; 0x28
 800bcc8:	d86c      	bhi.n	800bda4 <UART_SetConfig+0x450>
 800bcca:	a201      	add	r2, pc, #4	; (adr r2, 800bcd0 <UART_SetConfig+0x37c>)
 800bccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd0:	0800bd75 	.word	0x0800bd75
 800bcd4:	0800bda5 	.word	0x0800bda5
 800bcd8:	0800bda5 	.word	0x0800bda5
 800bcdc:	0800bda5 	.word	0x0800bda5
 800bce0:	0800bda5 	.word	0x0800bda5
 800bce4:	0800bda5 	.word	0x0800bda5
 800bce8:	0800bda5 	.word	0x0800bda5
 800bcec:	0800bda5 	.word	0x0800bda5
 800bcf0:	0800bd7d 	.word	0x0800bd7d
 800bcf4:	0800bda5 	.word	0x0800bda5
 800bcf8:	0800bda5 	.word	0x0800bda5
 800bcfc:	0800bda5 	.word	0x0800bda5
 800bd00:	0800bda5 	.word	0x0800bda5
 800bd04:	0800bda5 	.word	0x0800bda5
 800bd08:	0800bda5 	.word	0x0800bda5
 800bd0c:	0800bda5 	.word	0x0800bda5
 800bd10:	0800bd85 	.word	0x0800bd85
 800bd14:	0800bda5 	.word	0x0800bda5
 800bd18:	0800bda5 	.word	0x0800bda5
 800bd1c:	0800bda5 	.word	0x0800bda5
 800bd20:	0800bda5 	.word	0x0800bda5
 800bd24:	0800bda5 	.word	0x0800bda5
 800bd28:	0800bda5 	.word	0x0800bda5
 800bd2c:	0800bda5 	.word	0x0800bda5
 800bd30:	0800bd8d 	.word	0x0800bd8d
 800bd34:	0800bda5 	.word	0x0800bda5
 800bd38:	0800bda5 	.word	0x0800bda5
 800bd3c:	0800bda5 	.word	0x0800bda5
 800bd40:	0800bda5 	.word	0x0800bda5
 800bd44:	0800bda5 	.word	0x0800bda5
 800bd48:	0800bda5 	.word	0x0800bda5
 800bd4c:	0800bda5 	.word	0x0800bda5
 800bd50:	0800bd95 	.word	0x0800bd95
 800bd54:	0800bda5 	.word	0x0800bda5
 800bd58:	0800bda5 	.word	0x0800bda5
 800bd5c:	0800bda5 	.word	0x0800bda5
 800bd60:	0800bda5 	.word	0x0800bda5
 800bd64:	0800bda5 	.word	0x0800bda5
 800bd68:	0800bda5 	.word	0x0800bda5
 800bd6c:	0800bda5 	.word	0x0800bda5
 800bd70:	0800bd9d 	.word	0x0800bd9d
 800bd74:	2301      	movs	r3, #1
 800bd76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd7a:	e0bc      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bd7c:	2304      	movs	r3, #4
 800bd7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd82:	e0b8      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bd84:	2308      	movs	r3, #8
 800bd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd8a:	e0b4      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bd8c:	2310      	movs	r3, #16
 800bd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd92:	e0b0      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bd94:	2320      	movs	r3, #32
 800bd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd9a:	e0ac      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bd9c:	2340      	movs	r3, #64	; 0x40
 800bd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bda2:	e0a8      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bda4:	2380      	movs	r3, #128	; 0x80
 800bda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdaa:	e0a4      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a90      	ldr	r2, [pc, #576]	; (800bff4 <UART_SetConfig+0x6a0>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d130      	bne.n	800be18 <UART_SetConfig+0x4c4>
 800bdb6:	4b8e      	ldr	r3, [pc, #568]	; (800bff0 <UART_SetConfig+0x69c>)
 800bdb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdba:	f003 0307 	and.w	r3, r3, #7
 800bdbe:	2b05      	cmp	r3, #5
 800bdc0:	d826      	bhi.n	800be10 <UART_SetConfig+0x4bc>
 800bdc2:	a201      	add	r2, pc, #4	; (adr r2, 800bdc8 <UART_SetConfig+0x474>)
 800bdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc8:	0800bde1 	.word	0x0800bde1
 800bdcc:	0800bde9 	.word	0x0800bde9
 800bdd0:	0800bdf1 	.word	0x0800bdf1
 800bdd4:	0800bdf9 	.word	0x0800bdf9
 800bdd8:	0800be01 	.word	0x0800be01
 800bddc:	0800be09 	.word	0x0800be09
 800bde0:	2300      	movs	r3, #0
 800bde2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bde6:	e086      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bde8:	2304      	movs	r3, #4
 800bdea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdee:	e082      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bdf0:	2308      	movs	r3, #8
 800bdf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdf6:	e07e      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bdf8:	2310      	movs	r3, #16
 800bdfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdfe:	e07a      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800be00:	2320      	movs	r3, #32
 800be02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be06:	e076      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800be08:	2340      	movs	r3, #64	; 0x40
 800be0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be0e:	e072      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800be10:	2380      	movs	r3, #128	; 0x80
 800be12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be16:	e06e      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a76      	ldr	r2, [pc, #472]	; (800bff8 <UART_SetConfig+0x6a4>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d130      	bne.n	800be84 <UART_SetConfig+0x530>
 800be22:	4b73      	ldr	r3, [pc, #460]	; (800bff0 <UART_SetConfig+0x69c>)
 800be24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be26:	f003 0307 	and.w	r3, r3, #7
 800be2a:	2b05      	cmp	r3, #5
 800be2c:	d826      	bhi.n	800be7c <UART_SetConfig+0x528>
 800be2e:	a201      	add	r2, pc, #4	; (adr r2, 800be34 <UART_SetConfig+0x4e0>)
 800be30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be34:	0800be4d 	.word	0x0800be4d
 800be38:	0800be55 	.word	0x0800be55
 800be3c:	0800be5d 	.word	0x0800be5d
 800be40:	0800be65 	.word	0x0800be65
 800be44:	0800be6d 	.word	0x0800be6d
 800be48:	0800be75 	.word	0x0800be75
 800be4c:	2300      	movs	r3, #0
 800be4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be52:	e050      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800be54:	2304      	movs	r3, #4
 800be56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be5a:	e04c      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800be5c:	2308      	movs	r3, #8
 800be5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be62:	e048      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800be64:	2310      	movs	r3, #16
 800be66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be6a:	e044      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800be6c:	2320      	movs	r3, #32
 800be6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be72:	e040      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800be74:	2340      	movs	r3, #64	; 0x40
 800be76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be7a:	e03c      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800be7c:	2380      	movs	r3, #128	; 0x80
 800be7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be82:	e038      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a5c      	ldr	r2, [pc, #368]	; (800bffc <UART_SetConfig+0x6a8>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d130      	bne.n	800bef0 <UART_SetConfig+0x59c>
 800be8e:	4b58      	ldr	r3, [pc, #352]	; (800bff0 <UART_SetConfig+0x69c>)
 800be90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be92:	f003 0307 	and.w	r3, r3, #7
 800be96:	2b05      	cmp	r3, #5
 800be98:	d826      	bhi.n	800bee8 <UART_SetConfig+0x594>
 800be9a:	a201      	add	r2, pc, #4	; (adr r2, 800bea0 <UART_SetConfig+0x54c>)
 800be9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea0:	0800beb9 	.word	0x0800beb9
 800bea4:	0800bec1 	.word	0x0800bec1
 800bea8:	0800bec9 	.word	0x0800bec9
 800beac:	0800bed1 	.word	0x0800bed1
 800beb0:	0800bed9 	.word	0x0800bed9
 800beb4:	0800bee1 	.word	0x0800bee1
 800beb8:	2302      	movs	r3, #2
 800beba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bebe:	e01a      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bec0:	2304      	movs	r3, #4
 800bec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bec6:	e016      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bec8:	2308      	movs	r3, #8
 800beca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bece:	e012      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bed0:	2310      	movs	r3, #16
 800bed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bed6:	e00e      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bed8:	2320      	movs	r3, #32
 800beda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bede:	e00a      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bee0:	2340      	movs	r3, #64	; 0x40
 800bee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bee6:	e006      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bee8:	2380      	movs	r3, #128	; 0x80
 800beea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beee:	e002      	b.n	800bef6 <UART_SetConfig+0x5a2>
 800bef0:	2380      	movs	r3, #128	; 0x80
 800bef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a40      	ldr	r2, [pc, #256]	; (800bffc <UART_SetConfig+0x6a8>)
 800befc:	4293      	cmp	r3, r2
 800befe:	f040 80ef 	bne.w	800c0e0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bf02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf06:	2b20      	cmp	r3, #32
 800bf08:	dc46      	bgt.n	800bf98 <UART_SetConfig+0x644>
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	f2c0 8081 	blt.w	800c012 <UART_SetConfig+0x6be>
 800bf10:	3b02      	subs	r3, #2
 800bf12:	2b1e      	cmp	r3, #30
 800bf14:	d87d      	bhi.n	800c012 <UART_SetConfig+0x6be>
 800bf16:	a201      	add	r2, pc, #4	; (adr r2, 800bf1c <UART_SetConfig+0x5c8>)
 800bf18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf1c:	0800bf9f 	.word	0x0800bf9f
 800bf20:	0800c013 	.word	0x0800c013
 800bf24:	0800bfa7 	.word	0x0800bfa7
 800bf28:	0800c013 	.word	0x0800c013
 800bf2c:	0800c013 	.word	0x0800c013
 800bf30:	0800c013 	.word	0x0800c013
 800bf34:	0800bfb7 	.word	0x0800bfb7
 800bf38:	0800c013 	.word	0x0800c013
 800bf3c:	0800c013 	.word	0x0800c013
 800bf40:	0800c013 	.word	0x0800c013
 800bf44:	0800c013 	.word	0x0800c013
 800bf48:	0800c013 	.word	0x0800c013
 800bf4c:	0800c013 	.word	0x0800c013
 800bf50:	0800c013 	.word	0x0800c013
 800bf54:	0800bfc7 	.word	0x0800bfc7
 800bf58:	0800c013 	.word	0x0800c013
 800bf5c:	0800c013 	.word	0x0800c013
 800bf60:	0800c013 	.word	0x0800c013
 800bf64:	0800c013 	.word	0x0800c013
 800bf68:	0800c013 	.word	0x0800c013
 800bf6c:	0800c013 	.word	0x0800c013
 800bf70:	0800c013 	.word	0x0800c013
 800bf74:	0800c013 	.word	0x0800c013
 800bf78:	0800c013 	.word	0x0800c013
 800bf7c:	0800c013 	.word	0x0800c013
 800bf80:	0800c013 	.word	0x0800c013
 800bf84:	0800c013 	.word	0x0800c013
 800bf88:	0800c013 	.word	0x0800c013
 800bf8c:	0800c013 	.word	0x0800c013
 800bf90:	0800c013 	.word	0x0800c013
 800bf94:	0800c005 	.word	0x0800c005
 800bf98:	2b40      	cmp	r3, #64	; 0x40
 800bf9a:	d036      	beq.n	800c00a <UART_SetConfig+0x6b6>
 800bf9c:	e039      	b.n	800c012 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bf9e:	f7fd fbb1 	bl	8009704 <HAL_RCCEx_GetD3PCLK1Freq>
 800bfa2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bfa4:	e03b      	b.n	800c01e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfa6:	f107 0314 	add.w	r3, r7, #20
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fd fbc0 	bl	8009730 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bfb4:	e033      	b.n	800c01e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfb6:	f107 0308 	add.w	r3, r7, #8
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7fd fd0c 	bl	80099d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bfc4:	e02b      	b.n	800c01e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfc6:	4b0a      	ldr	r3, [pc, #40]	; (800bff0 <UART_SetConfig+0x69c>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f003 0320 	and.w	r3, r3, #32
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d009      	beq.n	800bfe6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bfd2:	4b07      	ldr	r3, [pc, #28]	; (800bff0 <UART_SetConfig+0x69c>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	08db      	lsrs	r3, r3, #3
 800bfd8:	f003 0303 	and.w	r3, r3, #3
 800bfdc:	4a08      	ldr	r2, [pc, #32]	; (800c000 <UART_SetConfig+0x6ac>)
 800bfde:	fa22 f303 	lsr.w	r3, r2, r3
 800bfe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bfe4:	e01b      	b.n	800c01e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800bfe6:	4b06      	ldr	r3, [pc, #24]	; (800c000 <UART_SetConfig+0x6ac>)
 800bfe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bfea:	e018      	b.n	800c01e <UART_SetConfig+0x6ca>
 800bfec:	40011400 	.word	0x40011400
 800bff0:	58024400 	.word	0x58024400
 800bff4:	40007800 	.word	0x40007800
 800bff8:	40007c00 	.word	0x40007c00
 800bffc:	58000c00 	.word	0x58000c00
 800c000:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c004:	4bc4      	ldr	r3, [pc, #784]	; (800c318 <UART_SetConfig+0x9c4>)
 800c006:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c008:	e009      	b.n	800c01e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c00a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c00e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c010:	e005      	b.n	800c01e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800c012:	2300      	movs	r3, #0
 800c014:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c01c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c020:	2b00      	cmp	r3, #0
 800c022:	f000 81da 	beq.w	800c3da <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02a:	4abc      	ldr	r2, [pc, #752]	; (800c31c <UART_SetConfig+0x9c8>)
 800c02c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c030:	461a      	mov	r2, r3
 800c032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c034:	fbb3 f3f2 	udiv	r3, r3, r2
 800c038:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	685a      	ldr	r2, [r3, #4]
 800c03e:	4613      	mov	r3, r2
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	4413      	add	r3, r2
 800c044:	6a3a      	ldr	r2, [r7, #32]
 800c046:	429a      	cmp	r2, r3
 800c048:	d305      	bcc.n	800c056 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c050:	6a3a      	ldr	r2, [r7, #32]
 800c052:	429a      	cmp	r2, r3
 800c054:	d903      	bls.n	800c05e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c05c:	e1bd      	b.n	800c3da <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c060:	4618      	mov	r0, r3
 800c062:	f04f 0100 	mov.w	r1, #0
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06a:	4aac      	ldr	r2, [pc, #688]	; (800c31c <UART_SetConfig+0x9c8>)
 800c06c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c070:	b29a      	uxth	r2, r3
 800c072:	f04f 0300 	mov.w	r3, #0
 800c076:	f7f4 f983 	bl	8000380 <__aeabi_uldivmod>
 800c07a:	4602      	mov	r2, r0
 800c07c:	460b      	mov	r3, r1
 800c07e:	4610      	mov	r0, r2
 800c080:	4619      	mov	r1, r3
 800c082:	f04f 0200 	mov.w	r2, #0
 800c086:	f04f 0300 	mov.w	r3, #0
 800c08a:	020b      	lsls	r3, r1, #8
 800c08c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c090:	0202      	lsls	r2, r0, #8
 800c092:	6879      	ldr	r1, [r7, #4]
 800c094:	6849      	ldr	r1, [r1, #4]
 800c096:	0849      	lsrs	r1, r1, #1
 800c098:	4608      	mov	r0, r1
 800c09a:	f04f 0100 	mov.w	r1, #0
 800c09e:	1814      	adds	r4, r2, r0
 800c0a0:	eb43 0501 	adc.w	r5, r3, r1
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	f04f 0300 	mov.w	r3, #0
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	f7f4 f965 	bl	8000380 <__aeabi_uldivmod>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0c4:	d308      	bcc.n	800c0d8 <UART_SetConfig+0x784>
 800c0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0cc:	d204      	bcs.n	800c0d8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0d4:	60da      	str	r2, [r3, #12]
 800c0d6:	e180      	b.n	800c3da <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c0de:	e17c      	b.n	800c3da <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	69db      	ldr	r3, [r3, #28]
 800c0e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0e8:	f040 80bf 	bne.w	800c26a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800c0ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0f0:	2b20      	cmp	r3, #32
 800c0f2:	dc49      	bgt.n	800c188 <UART_SetConfig+0x834>
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	db7c      	blt.n	800c1f2 <UART_SetConfig+0x89e>
 800c0f8:	2b20      	cmp	r3, #32
 800c0fa:	d87a      	bhi.n	800c1f2 <UART_SetConfig+0x89e>
 800c0fc:	a201      	add	r2, pc, #4	; (adr r2, 800c104 <UART_SetConfig+0x7b0>)
 800c0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c102:	bf00      	nop
 800c104:	0800c18f 	.word	0x0800c18f
 800c108:	0800c197 	.word	0x0800c197
 800c10c:	0800c1f3 	.word	0x0800c1f3
 800c110:	0800c1f3 	.word	0x0800c1f3
 800c114:	0800c19f 	.word	0x0800c19f
 800c118:	0800c1f3 	.word	0x0800c1f3
 800c11c:	0800c1f3 	.word	0x0800c1f3
 800c120:	0800c1f3 	.word	0x0800c1f3
 800c124:	0800c1af 	.word	0x0800c1af
 800c128:	0800c1f3 	.word	0x0800c1f3
 800c12c:	0800c1f3 	.word	0x0800c1f3
 800c130:	0800c1f3 	.word	0x0800c1f3
 800c134:	0800c1f3 	.word	0x0800c1f3
 800c138:	0800c1f3 	.word	0x0800c1f3
 800c13c:	0800c1f3 	.word	0x0800c1f3
 800c140:	0800c1f3 	.word	0x0800c1f3
 800c144:	0800c1bf 	.word	0x0800c1bf
 800c148:	0800c1f3 	.word	0x0800c1f3
 800c14c:	0800c1f3 	.word	0x0800c1f3
 800c150:	0800c1f3 	.word	0x0800c1f3
 800c154:	0800c1f3 	.word	0x0800c1f3
 800c158:	0800c1f3 	.word	0x0800c1f3
 800c15c:	0800c1f3 	.word	0x0800c1f3
 800c160:	0800c1f3 	.word	0x0800c1f3
 800c164:	0800c1f3 	.word	0x0800c1f3
 800c168:	0800c1f3 	.word	0x0800c1f3
 800c16c:	0800c1f3 	.word	0x0800c1f3
 800c170:	0800c1f3 	.word	0x0800c1f3
 800c174:	0800c1f3 	.word	0x0800c1f3
 800c178:	0800c1f3 	.word	0x0800c1f3
 800c17c:	0800c1f3 	.word	0x0800c1f3
 800c180:	0800c1f3 	.word	0x0800c1f3
 800c184:	0800c1e5 	.word	0x0800c1e5
 800c188:	2b40      	cmp	r3, #64	; 0x40
 800c18a:	d02e      	beq.n	800c1ea <UART_SetConfig+0x896>
 800c18c:	e031      	b.n	800c1f2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c18e:	f7fb fe7b 	bl	8007e88 <HAL_RCC_GetPCLK1Freq>
 800c192:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c194:	e033      	b.n	800c1fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c196:	f7fb fe8d 	bl	8007eb4 <HAL_RCC_GetPCLK2Freq>
 800c19a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c19c:	e02f      	b.n	800c1fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c19e:	f107 0314 	add.w	r3, r7, #20
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fd fac4 	bl	8009730 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1ac:	e027      	b.n	800c1fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1ae:	f107 0308 	add.w	r3, r7, #8
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fd fc10 	bl	80099d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1bc:	e01f      	b.n	800c1fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1be:	4b58      	ldr	r3, [pc, #352]	; (800c320 <UART_SetConfig+0x9cc>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f003 0320 	and.w	r3, r3, #32
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d009      	beq.n	800c1de <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1ca:	4b55      	ldr	r3, [pc, #340]	; (800c320 <UART_SetConfig+0x9cc>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	08db      	lsrs	r3, r3, #3
 800c1d0:	f003 0303 	and.w	r3, r3, #3
 800c1d4:	4a53      	ldr	r2, [pc, #332]	; (800c324 <UART_SetConfig+0x9d0>)
 800c1d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c1da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1dc:	e00f      	b.n	800c1fe <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c1de:	4b51      	ldr	r3, [pc, #324]	; (800c324 <UART_SetConfig+0x9d0>)
 800c1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1e2:	e00c      	b.n	800c1fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c1e4:	4b4c      	ldr	r3, [pc, #304]	; (800c318 <UART_SetConfig+0x9c4>)
 800c1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1e8:	e009      	b.n	800c1fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1f0:	e005      	b.n	800c1fe <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c1fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c200:	2b00      	cmp	r3, #0
 800c202:	f000 80ea 	beq.w	800c3da <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20a:	4a44      	ldr	r2, [pc, #272]	; (800c31c <UART_SetConfig+0x9c8>)
 800c20c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c210:	461a      	mov	r2, r3
 800c212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c214:	fbb3 f3f2 	udiv	r3, r3, r2
 800c218:	005a      	lsls	r2, r3, #1
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	085b      	lsrs	r3, r3, #1
 800c220:	441a      	add	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	fbb2 f3f3 	udiv	r3, r2, r3
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c230:	2b0f      	cmp	r3, #15
 800c232:	d916      	bls.n	800c262 <UART_SetConfig+0x90e>
 800c234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c23a:	d212      	bcs.n	800c262 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	b29b      	uxth	r3, r3
 800c240:	f023 030f 	bic.w	r3, r3, #15
 800c244:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c248:	085b      	lsrs	r3, r3, #1
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	f003 0307 	and.w	r3, r3, #7
 800c250:	b29a      	uxth	r2, r3
 800c252:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c254:	4313      	orrs	r3, r2
 800c256:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c25e:	60da      	str	r2, [r3, #12]
 800c260:	e0bb      	b.n	800c3da <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c262:	2301      	movs	r3, #1
 800c264:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c268:	e0b7      	b.n	800c3da <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c26a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c26e:	2b20      	cmp	r3, #32
 800c270:	dc4a      	bgt.n	800c308 <UART_SetConfig+0x9b4>
 800c272:	2b00      	cmp	r3, #0
 800c274:	f2c0 8086 	blt.w	800c384 <UART_SetConfig+0xa30>
 800c278:	2b20      	cmp	r3, #32
 800c27a:	f200 8083 	bhi.w	800c384 <UART_SetConfig+0xa30>
 800c27e:	a201      	add	r2, pc, #4	; (adr r2, 800c284 <UART_SetConfig+0x930>)
 800c280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c284:	0800c30f 	.word	0x0800c30f
 800c288:	0800c329 	.word	0x0800c329
 800c28c:	0800c385 	.word	0x0800c385
 800c290:	0800c385 	.word	0x0800c385
 800c294:	0800c331 	.word	0x0800c331
 800c298:	0800c385 	.word	0x0800c385
 800c29c:	0800c385 	.word	0x0800c385
 800c2a0:	0800c385 	.word	0x0800c385
 800c2a4:	0800c341 	.word	0x0800c341
 800c2a8:	0800c385 	.word	0x0800c385
 800c2ac:	0800c385 	.word	0x0800c385
 800c2b0:	0800c385 	.word	0x0800c385
 800c2b4:	0800c385 	.word	0x0800c385
 800c2b8:	0800c385 	.word	0x0800c385
 800c2bc:	0800c385 	.word	0x0800c385
 800c2c0:	0800c385 	.word	0x0800c385
 800c2c4:	0800c351 	.word	0x0800c351
 800c2c8:	0800c385 	.word	0x0800c385
 800c2cc:	0800c385 	.word	0x0800c385
 800c2d0:	0800c385 	.word	0x0800c385
 800c2d4:	0800c385 	.word	0x0800c385
 800c2d8:	0800c385 	.word	0x0800c385
 800c2dc:	0800c385 	.word	0x0800c385
 800c2e0:	0800c385 	.word	0x0800c385
 800c2e4:	0800c385 	.word	0x0800c385
 800c2e8:	0800c385 	.word	0x0800c385
 800c2ec:	0800c385 	.word	0x0800c385
 800c2f0:	0800c385 	.word	0x0800c385
 800c2f4:	0800c385 	.word	0x0800c385
 800c2f8:	0800c385 	.word	0x0800c385
 800c2fc:	0800c385 	.word	0x0800c385
 800c300:	0800c385 	.word	0x0800c385
 800c304:	0800c377 	.word	0x0800c377
 800c308:	2b40      	cmp	r3, #64	; 0x40
 800c30a:	d037      	beq.n	800c37c <UART_SetConfig+0xa28>
 800c30c:	e03a      	b.n	800c384 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c30e:	f7fb fdbb 	bl	8007e88 <HAL_RCC_GetPCLK1Freq>
 800c312:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c314:	e03c      	b.n	800c390 <UART_SetConfig+0xa3c>
 800c316:	bf00      	nop
 800c318:	003d0900 	.word	0x003d0900
 800c31c:	0800d7f0 	.word	0x0800d7f0
 800c320:	58024400 	.word	0x58024400
 800c324:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c328:	f7fb fdc4 	bl	8007eb4 <HAL_RCC_GetPCLK2Freq>
 800c32c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c32e:	e02f      	b.n	800c390 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c330:	f107 0314 	add.w	r3, r7, #20
 800c334:	4618      	mov	r0, r3
 800c336:	f7fd f9fb 	bl	8009730 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c33e:	e027      	b.n	800c390 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c340:	f107 0308 	add.w	r3, r7, #8
 800c344:	4618      	mov	r0, r3
 800c346:	f7fd fb47 	bl	80099d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c34e:	e01f      	b.n	800c390 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c350:	4b2c      	ldr	r3, [pc, #176]	; (800c404 <UART_SetConfig+0xab0>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f003 0320 	and.w	r3, r3, #32
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d009      	beq.n	800c370 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c35c:	4b29      	ldr	r3, [pc, #164]	; (800c404 <UART_SetConfig+0xab0>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	08db      	lsrs	r3, r3, #3
 800c362:	f003 0303 	and.w	r3, r3, #3
 800c366:	4a28      	ldr	r2, [pc, #160]	; (800c408 <UART_SetConfig+0xab4>)
 800c368:	fa22 f303 	lsr.w	r3, r2, r3
 800c36c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c36e:	e00f      	b.n	800c390 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c370:	4b25      	ldr	r3, [pc, #148]	; (800c408 <UART_SetConfig+0xab4>)
 800c372:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c374:	e00c      	b.n	800c390 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c376:	4b25      	ldr	r3, [pc, #148]	; (800c40c <UART_SetConfig+0xab8>)
 800c378:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c37a:	e009      	b.n	800c390 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c37c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c380:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c382:	e005      	b.n	800c390 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c384:	2300      	movs	r3, #0
 800c386:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c388:	2301      	movs	r3, #1
 800c38a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c38e:	bf00      	nop
    }

    if (pclk != 0U)
 800c390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c392:	2b00      	cmp	r3, #0
 800c394:	d021      	beq.n	800c3da <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39a:	4a1d      	ldr	r2, [pc, #116]	; (800c410 <UART_SetConfig+0xabc>)
 800c39c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a4:	fbb3 f2f2 	udiv	r2, r3, r2
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	085b      	lsrs	r3, r3, #1
 800c3ae:	441a      	add	r2, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	2b0f      	cmp	r3, #15
 800c3c0:	d908      	bls.n	800c3d4 <UART_SetConfig+0xa80>
 800c3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3c8:	d204      	bcs.n	800c3d4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3d0:	60da      	str	r2, [r3, #12]
 800c3d2:	e002      	b.n	800c3da <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c3f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3738      	adds	r7, #56	; 0x38
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bdb0      	pop	{r4, r5, r7, pc}
 800c402:	bf00      	nop
 800c404:	58024400 	.word	0x58024400
 800c408:	03d09000 	.word	0x03d09000
 800c40c:	003d0900 	.word	0x003d0900
 800c410:	0800d7f0 	.word	0x0800d7f0

0800c414 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c420:	f003 0301 	and.w	r3, r3, #1
 800c424:	2b00      	cmp	r3, #0
 800c426:	d00a      	beq.n	800c43e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	430a      	orrs	r2, r1
 800c43c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c442:	f003 0302 	and.w	r3, r3, #2
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00a      	beq.n	800c460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	430a      	orrs	r2, r1
 800c45e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c464:	f003 0304 	and.w	r3, r3, #4
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d00a      	beq.n	800c482 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	430a      	orrs	r2, r1
 800c480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c486:	f003 0308 	and.w	r3, r3, #8
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00a      	beq.n	800c4a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	430a      	orrs	r2, r1
 800c4a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a8:	f003 0310 	and.w	r3, r3, #16
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00a      	beq.n	800c4c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	430a      	orrs	r2, r1
 800c4c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ca:	f003 0320 	and.w	r3, r3, #32
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00a      	beq.n	800c4e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	430a      	orrs	r2, r1
 800c4e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d01a      	beq.n	800c52a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	430a      	orrs	r2, r1
 800c508:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c50e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c512:	d10a      	bne.n	800c52a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	430a      	orrs	r2, r1
 800c528:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c52e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c532:	2b00      	cmp	r3, #0
 800c534:	d00a      	beq.n	800c54c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	430a      	orrs	r2, r1
 800c54a:	605a      	str	r2, [r3, #4]
  }
}
 800c54c:	bf00      	nop
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b086      	sub	sp, #24
 800c55c:	af02      	add	r7, sp, #8
 800c55e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c568:	f7f5 fddc 	bl	8002124 <HAL_GetTick>
 800c56c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 0308 	and.w	r3, r3, #8
 800c578:	2b08      	cmp	r3, #8
 800c57a:	d10e      	bne.n	800c59a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c57c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c580:	9300      	str	r3, [sp, #0]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 f82f 	bl	800c5ee <UART_WaitOnFlagUntilTimeout>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d001      	beq.n	800c59a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c596:	2303      	movs	r3, #3
 800c598:	e025      	b.n	800c5e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f003 0304 	and.w	r3, r3, #4
 800c5a4:	2b04      	cmp	r3, #4
 800c5a6:	d10e      	bne.n	800c5c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c5ac:	9300      	str	r3, [sp, #0]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 f819 	bl	800c5ee <UART_WaitOnFlagUntilTimeout>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d001      	beq.n	800c5c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5c2:	2303      	movs	r3, #3
 800c5c4:	e00f      	b.n	800c5e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2220      	movs	r2, #32
 800c5ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2220      	movs	r2, #32
 800c5d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b084      	sub	sp, #16
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	60f8      	str	r0, [r7, #12]
 800c5f6:	60b9      	str	r1, [r7, #8]
 800c5f8:	603b      	str	r3, [r7, #0]
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5fe:	e062      	b.n	800c6c6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c606:	d05e      	beq.n	800c6c6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c608:	f7f5 fd8c 	bl	8002124 <HAL_GetTick>
 800c60c:	4602      	mov	r2, r0
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	69ba      	ldr	r2, [r7, #24]
 800c614:	429a      	cmp	r2, r3
 800c616:	d302      	bcc.n	800c61e <UART_WaitOnFlagUntilTimeout+0x30>
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d11d      	bne.n	800c65a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c62c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	689a      	ldr	r2, [r3, #8]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f022 0201 	bic.w	r2, r2, #1
 800c63c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2220      	movs	r2, #32
 800c642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2220      	movs	r2, #32
 800c64a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2200      	movs	r2, #0
 800c652:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c656:	2303      	movs	r3, #3
 800c658:	e045      	b.n	800c6e6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f003 0304 	and.w	r3, r3, #4
 800c664:	2b00      	cmp	r3, #0
 800c666:	d02e      	beq.n	800c6c6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	69db      	ldr	r3, [r3, #28]
 800c66e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c676:	d126      	bne.n	800c6c6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c680:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c690:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	689a      	ldr	r2, [r3, #8]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f022 0201 	bic.w	r2, r2, #1
 800c6a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2220      	movs	r2, #32
 800c6a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2220      	movs	r2, #32
 800c6ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2220      	movs	r2, #32
 800c6b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c6c2:	2303      	movs	r3, #3
 800c6c4:	e00f      	b.n	800c6e6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	69da      	ldr	r2, [r3, #28]
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	4013      	ands	r3, r2
 800c6d0:	68ba      	ldr	r2, [r7, #8]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	bf0c      	ite	eq
 800c6d6:	2301      	moveq	r3, #1
 800c6d8:	2300      	movne	r3, #0
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	461a      	mov	r2, r3
 800c6de:	79fb      	ldrb	r3, [r7, #7]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d08d      	beq.n	800c600 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c6ee:	b480      	push	{r7}
 800c6f0:	b085      	sub	sp, #20
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d101      	bne.n	800c704 <HAL_UARTEx_DisableFifoMode+0x16>
 800c700:	2302      	movs	r3, #2
 800c702:	e027      	b.n	800c754 <HAL_UARTEx_DisableFifoMode+0x66>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2201      	movs	r2, #1
 800c708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2224      	movs	r2, #36	; 0x24
 800c710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f022 0201 	bic.w	r2, r2, #1
 800c72a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c732:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	68fa      	ldr	r2, [r7, #12]
 800c740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2220      	movs	r2, #32
 800c746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c770:	2b01      	cmp	r3, #1
 800c772:	d101      	bne.n	800c778 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c774:	2302      	movs	r3, #2
 800c776:	e02d      	b.n	800c7d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2224      	movs	r2, #36	; 0x24
 800c784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f022 0201 	bic.w	r2, r2, #1
 800c79e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	683a      	ldr	r2, [r7, #0]
 800c7b0:	430a      	orrs	r2, r1
 800c7b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 f84f 	bl	800c858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2220      	movs	r2, #32
 800c7c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c7d2:	2300      	movs	r3, #0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3710      	adds	r7, #16
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d101      	bne.n	800c7f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	e02d      	b.n	800c850 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2224      	movs	r2, #36	; 0x24
 800c800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f022 0201 	bic.w	r2, r2, #1
 800c81a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	683a      	ldr	r2, [r7, #0]
 800c82c:	430a      	orrs	r2, r1
 800c82e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 f811 	bl	800c858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2220      	movs	r2, #32
 800c842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c84e:	2300      	movs	r3, #0
}
 800c850:	4618      	mov	r0, r3
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c864:	2b00      	cmp	r3, #0
 800c866:	d108      	bne.n	800c87a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2201      	movs	r2, #1
 800c874:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c878:	e031      	b.n	800c8de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c87a:	2310      	movs	r3, #16
 800c87c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c87e:	2310      	movs	r3, #16
 800c880:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	0e5b      	lsrs	r3, r3, #25
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	f003 0307 	and.w	r3, r3, #7
 800c890:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	0f5b      	lsrs	r3, r3, #29
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	f003 0307 	and.w	r3, r3, #7
 800c8a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8a2:	7bbb      	ldrb	r3, [r7, #14]
 800c8a4:	7b3a      	ldrb	r2, [r7, #12]
 800c8a6:	4911      	ldr	r1, [pc, #68]	; (800c8ec <UARTEx_SetNbDataToProcess+0x94>)
 800c8a8:	5c8a      	ldrb	r2, [r1, r2]
 800c8aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c8ae:	7b3a      	ldrb	r2, [r7, #12]
 800c8b0:	490f      	ldr	r1, [pc, #60]	; (800c8f0 <UARTEx_SetNbDataToProcess+0x98>)
 800c8b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8c0:	7bfb      	ldrb	r3, [r7, #15]
 800c8c2:	7b7a      	ldrb	r2, [r7, #13]
 800c8c4:	4909      	ldr	r1, [pc, #36]	; (800c8ec <UARTEx_SetNbDataToProcess+0x94>)
 800c8c6:	5c8a      	ldrb	r2, [r1, r2]
 800c8c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8cc:	7b7a      	ldrb	r2, [r7, #13]
 800c8ce:	4908      	ldr	r1, [pc, #32]	; (800c8f0 <UARTEx_SetNbDataToProcess+0x98>)
 800c8d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8d6:	b29a      	uxth	r2, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c8de:	bf00      	nop
 800c8e0:	3714      	adds	r7, #20
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	0800d808 	.word	0x0800d808
 800c8f0:	0800d810 	.word	0x0800d810

0800c8f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c8f4:	b084      	sub	sp, #16
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b084      	sub	sp, #16
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
 800c8fe:	f107 001c 	add.w	r0, r7, #28
 800c902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d120      	bne.n	800c94e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c910:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	68da      	ldr	r2, [r3, #12]
 800c91c:	4b2a      	ldr	r3, [pc, #168]	; (800c9c8 <USB_CoreInit+0xd4>)
 800c91e:	4013      	ands	r3, r2
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c932:	2b01      	cmp	r3, #1
 800c934:	d105      	bne.n	800c942 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 fa60 	bl	800ce08 <USB_CoreReset>
 800c948:	4603      	mov	r3, r0
 800c94a:	73fb      	strb	r3, [r7, #15]
 800c94c:	e01a      	b.n	800c984 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 fa54 	bl	800ce08 <USB_CoreReset>
 800c960:	4603      	mov	r3, r0
 800c962:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c966:	2b00      	cmp	r3, #0
 800c968:	d106      	bne.n	800c978 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	639a      	str	r2, [r3, #56]	; 0x38
 800c976:	e005      	b.n	800c984 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c986:	2b01      	cmp	r3, #1
 800c988:	d116      	bne.n	800c9b8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c98e:	b29a      	uxth	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c998:	4b0c      	ldr	r3, [pc, #48]	; (800c9cc <USB_CoreInit+0xd8>)
 800c99a:	4313      	orrs	r3, r2
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	f043 0206 	orr.w	r2, r3, #6
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	f043 0220 	orr.w	r2, r3, #32
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c9c4:	b004      	add	sp, #16
 800c9c6:	4770      	bx	lr
 800c9c8:	ffbdffbf 	.word	0xffbdffbf
 800c9cc:	03ee0000 	.word	0x03ee0000

0800c9d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	f023 0201 	bic.w	r2, r3, #1
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	370c      	adds	r7, #12
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr

0800c9f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b082      	sub	sp, #8
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca0a:	78fb      	ldrb	r3, [r7, #3]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d106      	bne.n	800ca1e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	60da      	str	r2, [r3, #12]
 800ca1c:	e00b      	b.n	800ca36 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ca1e:	78fb      	ldrb	r3, [r7, #3]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d106      	bne.n	800ca32 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	60da      	str	r2, [r3, #12]
 800ca30:	e001      	b.n	800ca36 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ca32:	2301      	movs	r3, #1
 800ca34:	e003      	b.n	800ca3e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ca36:	2032      	movs	r0, #50	; 0x32
 800ca38:	f7f5 fb80 	bl	800213c <HAL_Delay>

  return HAL_OK;
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3708      	adds	r7, #8
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
	...

0800ca48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca48:	b084      	sub	sp, #16
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b086      	sub	sp, #24
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ca56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ca62:	2300      	movs	r3, #0
 800ca64:	613b      	str	r3, [r7, #16]
 800ca66:	e009      	b.n	800ca7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	3340      	adds	r3, #64	; 0x40
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	4413      	add	r3, r2
 800ca72:	2200      	movs	r2, #0
 800ca74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	3301      	adds	r3, #1
 800ca7a:	613b      	str	r3, [r7, #16]
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	2b0e      	cmp	r3, #14
 800ca80:	d9f2      	bls.n	800ca68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ca82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d11c      	bne.n	800cac2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca96:	f043 0302 	orr.w	r3, r3, #2
 800ca9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	601a      	str	r2, [r3, #0]
 800cac0:	e005      	b.n	800cace <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cad4:	461a      	mov	r2, r3
 800cad6:	2300      	movs	r3, #0
 800cad8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cae0:	4619      	mov	r1, r3
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cae8:	461a      	mov	r2, r3
 800caea:	680b      	ldr	r3, [r1, #0]
 800caec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800caee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d10c      	bne.n	800cb0e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800caf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d104      	bne.n	800cb04 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cafa:	2100      	movs	r1, #0
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 f949 	bl	800cd94 <USB_SetDevSpeed>
 800cb02:	e008      	b.n	800cb16 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cb04:	2101      	movs	r1, #1
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 f944 	bl	800cd94 <USB_SetDevSpeed>
 800cb0c:	e003      	b.n	800cb16 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cb0e:	2103      	movs	r1, #3
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f000 f93f 	bl	800cd94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cb16:	2110      	movs	r1, #16
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 f8f3 	bl	800cd04 <USB_FlushTxFifo>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d001      	beq.n	800cb28 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cb24:	2301      	movs	r3, #1
 800cb26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f911 	bl	800cd50 <USB_FlushRxFifo>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d001      	beq.n	800cb38 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cb34:	2301      	movs	r3, #1
 800cb36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb3e:	461a      	mov	r2, r3
 800cb40:	2300      	movs	r3, #0
 800cb42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb56:	461a      	mov	r2, r3
 800cb58:	2300      	movs	r3, #0
 800cb5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	613b      	str	r3, [r7, #16]
 800cb60:	e043      	b.n	800cbea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	015a      	lsls	r2, r3, #5
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	4413      	add	r3, r2
 800cb6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb78:	d118      	bne.n	800cbac <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10a      	bne.n	800cb96 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	015a      	lsls	r2, r3, #5
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	4413      	add	r3, r2
 800cb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cb92:	6013      	str	r3, [r2, #0]
 800cb94:	e013      	b.n	800cbbe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	015a      	lsls	r2, r3, #5
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cba2:	461a      	mov	r2, r3
 800cba4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cba8:	6013      	str	r3, [r2, #0]
 800cbaa:	e008      	b.n	800cbbe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	015a      	lsls	r2, r3, #5
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbb8:	461a      	mov	r2, r3
 800cbba:	2300      	movs	r3, #0
 800cbbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	015a      	lsls	r2, r3, #5
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	4413      	add	r3, r2
 800cbc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbca:	461a      	mov	r2, r3
 800cbcc:	2300      	movs	r3, #0
 800cbce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	015a      	lsls	r2, r3, #5
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbdc:	461a      	mov	r2, r3
 800cbde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cbe2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	613b      	str	r3, [r7, #16]
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbec:	693a      	ldr	r2, [r7, #16]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d3b7      	bcc.n	800cb62 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	613b      	str	r3, [r7, #16]
 800cbf6:	e043      	b.n	800cc80 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	015a      	lsls	r2, r3, #5
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	4413      	add	r3, r2
 800cc00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc0e:	d118      	bne.n	800cc42 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10a      	bne.n	800cc2c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	015a      	lsls	r2, r3, #5
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc22:	461a      	mov	r2, r3
 800cc24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cc28:	6013      	str	r3, [r2, #0]
 800cc2a:	e013      	b.n	800cc54 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	015a      	lsls	r2, r3, #5
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	4413      	add	r3, r2
 800cc34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc38:	461a      	mov	r2, r3
 800cc3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cc3e:	6013      	str	r3, [r2, #0]
 800cc40:	e008      	b.n	800cc54 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	015a      	lsls	r2, r3, #5
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	4413      	add	r3, r2
 800cc4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc4e:	461a      	mov	r2, r3
 800cc50:	2300      	movs	r3, #0
 800cc52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	015a      	lsls	r2, r3, #5
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc60:	461a      	mov	r2, r3
 800cc62:	2300      	movs	r3, #0
 800cc64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	015a      	lsls	r2, r3, #5
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc72:	461a      	mov	r2, r3
 800cc74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	613b      	str	r3, [r7, #16]
 800cc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc82:	693a      	ldr	r2, [r7, #16]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d3b7      	bcc.n	800cbf8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc8e:	691b      	ldr	r3, [r3, #16]
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cca8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d105      	bne.n	800ccbc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	699b      	ldr	r3, [r3, #24]
 800ccb4:	f043 0210 	orr.w	r2, r3, #16
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	699a      	ldr	r2, [r3, #24]
 800ccc0:	4b0e      	ldr	r3, [pc, #56]	; (800ccfc <USB_DevInit+0x2b4>)
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ccc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d005      	beq.n	800ccda <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	699b      	ldr	r3, [r3, #24]
 800ccd2:	f043 0208 	orr.w	r2, r3, #8
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ccda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d105      	bne.n	800ccec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	699a      	ldr	r2, [r3, #24]
 800cce4:	4b06      	ldr	r3, [pc, #24]	; (800cd00 <USB_DevInit+0x2b8>)
 800cce6:	4313      	orrs	r3, r2
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ccec:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3718      	adds	r7, #24
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ccf8:	b004      	add	sp, #16
 800ccfa:	4770      	bx	lr
 800ccfc:	803c3800 	.word	0x803c3800
 800cd00:	40000004 	.word	0x40000004

0800cd04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	019b      	lsls	r3, r3, #6
 800cd16:	f043 0220 	orr.w	r2, r3, #32
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	3301      	adds	r3, #1
 800cd22:	60fb      	str	r3, [r7, #12]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	4a09      	ldr	r2, [pc, #36]	; (800cd4c <USB_FlushTxFifo+0x48>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d901      	bls.n	800cd30 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cd2c:	2303      	movs	r3, #3
 800cd2e:	e006      	b.n	800cd3e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	f003 0320 	and.w	r3, r3, #32
 800cd38:	2b20      	cmp	r3, #32
 800cd3a:	d0f0      	beq.n	800cd1e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cd3c:	2300      	movs	r3, #0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3714      	adds	r7, #20
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop
 800cd4c:	00030d40 	.word	0x00030d40

0800cd50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b085      	sub	sp, #20
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2210      	movs	r2, #16
 800cd60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	3301      	adds	r3, #1
 800cd66:	60fb      	str	r3, [r7, #12]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	4a09      	ldr	r2, [pc, #36]	; (800cd90 <USB_FlushRxFifo+0x40>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d901      	bls.n	800cd74 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cd70:	2303      	movs	r3, #3
 800cd72:	e006      	b.n	800cd82 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	691b      	ldr	r3, [r3, #16]
 800cd78:	f003 0310 	and.w	r3, r3, #16
 800cd7c:	2b10      	cmp	r3, #16
 800cd7e:	d0f0      	beq.n	800cd62 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3714      	adds	r7, #20
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	00030d40 	.word	0x00030d40

0800cd94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b085      	sub	sp, #20
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	78fb      	ldrb	r3, [r7, #3]
 800cdae:	68f9      	ldr	r1, [r7, #12]
 800cdb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cdb8:	2300      	movs	r3, #0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3714      	adds	r7, #20
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cdc6:	b480      	push	{r7}
 800cdc8:	b085      	sub	sp, #20
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cde0:	f023 0303 	bic.w	r3, r3, #3
 800cde4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	68fa      	ldr	r2, [r7, #12]
 800cdf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdf4:	f043 0302 	orr.w	r3, r3, #2
 800cdf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cdfa:	2300      	movs	r3, #0
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3714      	adds	r7, #20
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ce10:	2300      	movs	r3, #0
 800ce12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	3301      	adds	r3, #1
 800ce18:	60fb      	str	r3, [r7, #12]
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	4a13      	ldr	r2, [pc, #76]	; (800ce6c <USB_CoreReset+0x64>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d901      	bls.n	800ce26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ce22:	2303      	movs	r3, #3
 800ce24:	e01b      	b.n	800ce5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	daf2      	bge.n	800ce14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	691b      	ldr	r3, [r3, #16]
 800ce36:	f043 0201 	orr.w	r2, r3, #1
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	3301      	adds	r3, #1
 800ce42:	60fb      	str	r3, [r7, #12]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	4a09      	ldr	r2, [pc, #36]	; (800ce6c <USB_CoreReset+0x64>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d901      	bls.n	800ce50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ce4c:	2303      	movs	r3, #3
 800ce4e:	e006      	b.n	800ce5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	691b      	ldr	r3, [r3, #16]
 800ce54:	f003 0301 	and.w	r3, r3, #1
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d0f0      	beq.n	800ce3e <USB_CoreReset+0x36>

  return HAL_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	00030d40 	.word	0x00030d40

0800ce70 <__errno>:
 800ce70:	4b01      	ldr	r3, [pc, #4]	; (800ce78 <__errno+0x8>)
 800ce72:	6818      	ldr	r0, [r3, #0]
 800ce74:	4770      	bx	lr
 800ce76:	bf00      	nop
 800ce78:	24000020 	.word	0x24000020

0800ce7c <__libc_init_array>:
 800ce7c:	b570      	push	{r4, r5, r6, lr}
 800ce7e:	4d0d      	ldr	r5, [pc, #52]	; (800ceb4 <__libc_init_array+0x38>)
 800ce80:	4c0d      	ldr	r4, [pc, #52]	; (800ceb8 <__libc_init_array+0x3c>)
 800ce82:	1b64      	subs	r4, r4, r5
 800ce84:	10a4      	asrs	r4, r4, #2
 800ce86:	2600      	movs	r6, #0
 800ce88:	42a6      	cmp	r6, r4
 800ce8a:	d109      	bne.n	800cea0 <__libc_init_array+0x24>
 800ce8c:	4d0b      	ldr	r5, [pc, #44]	; (800cebc <__libc_init_array+0x40>)
 800ce8e:	4c0c      	ldr	r4, [pc, #48]	; (800cec0 <__libc_init_array+0x44>)
 800ce90:	f000 fc4e 	bl	800d730 <_init>
 800ce94:	1b64      	subs	r4, r4, r5
 800ce96:	10a4      	asrs	r4, r4, #2
 800ce98:	2600      	movs	r6, #0
 800ce9a:	42a6      	cmp	r6, r4
 800ce9c:	d105      	bne.n	800ceaa <__libc_init_array+0x2e>
 800ce9e:	bd70      	pop	{r4, r5, r6, pc}
 800cea0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cea4:	4798      	blx	r3
 800cea6:	3601      	adds	r6, #1
 800cea8:	e7ee      	b.n	800ce88 <__libc_init_array+0xc>
 800ceaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceae:	4798      	blx	r3
 800ceb0:	3601      	adds	r6, #1
 800ceb2:	e7f2      	b.n	800ce9a <__libc_init_array+0x1e>
 800ceb4:	0800d854 	.word	0x0800d854
 800ceb8:	0800d854 	.word	0x0800d854
 800cebc:	0800d854 	.word	0x0800d854
 800cec0:	0800d858 	.word	0x0800d858

0800cec4 <memset>:
 800cec4:	4402      	add	r2, r0
 800cec6:	4603      	mov	r3, r0
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d100      	bne.n	800cece <memset+0xa>
 800cecc:	4770      	bx	lr
 800cece:	f803 1b01 	strb.w	r1, [r3], #1
 800ced2:	e7f9      	b.n	800cec8 <memset+0x4>

0800ced4 <siprintf>:
 800ced4:	b40e      	push	{r1, r2, r3}
 800ced6:	b500      	push	{lr}
 800ced8:	b09c      	sub	sp, #112	; 0x70
 800ceda:	ab1d      	add	r3, sp, #116	; 0x74
 800cedc:	9002      	str	r0, [sp, #8]
 800cede:	9006      	str	r0, [sp, #24]
 800cee0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cee4:	4809      	ldr	r0, [pc, #36]	; (800cf0c <siprintf+0x38>)
 800cee6:	9107      	str	r1, [sp, #28]
 800cee8:	9104      	str	r1, [sp, #16]
 800ceea:	4909      	ldr	r1, [pc, #36]	; (800cf10 <siprintf+0x3c>)
 800ceec:	f853 2b04 	ldr.w	r2, [r3], #4
 800cef0:	9105      	str	r1, [sp, #20]
 800cef2:	6800      	ldr	r0, [r0, #0]
 800cef4:	9301      	str	r3, [sp, #4]
 800cef6:	a902      	add	r1, sp, #8
 800cef8:	f000 f868 	bl	800cfcc <_svfiprintf_r>
 800cefc:	9b02      	ldr	r3, [sp, #8]
 800cefe:	2200      	movs	r2, #0
 800cf00:	701a      	strb	r2, [r3, #0]
 800cf02:	b01c      	add	sp, #112	; 0x70
 800cf04:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf08:	b003      	add	sp, #12
 800cf0a:	4770      	bx	lr
 800cf0c:	24000020 	.word	0x24000020
 800cf10:	ffff0208 	.word	0xffff0208

0800cf14 <__ssputs_r>:
 800cf14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf18:	688e      	ldr	r6, [r1, #8]
 800cf1a:	429e      	cmp	r6, r3
 800cf1c:	4682      	mov	sl, r0
 800cf1e:	460c      	mov	r4, r1
 800cf20:	4690      	mov	r8, r2
 800cf22:	461f      	mov	r7, r3
 800cf24:	d838      	bhi.n	800cf98 <__ssputs_r+0x84>
 800cf26:	898a      	ldrh	r2, [r1, #12]
 800cf28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf2c:	d032      	beq.n	800cf94 <__ssputs_r+0x80>
 800cf2e:	6825      	ldr	r5, [r4, #0]
 800cf30:	6909      	ldr	r1, [r1, #16]
 800cf32:	eba5 0901 	sub.w	r9, r5, r1
 800cf36:	6965      	ldr	r5, [r4, #20]
 800cf38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf40:	3301      	adds	r3, #1
 800cf42:	444b      	add	r3, r9
 800cf44:	106d      	asrs	r5, r5, #1
 800cf46:	429d      	cmp	r5, r3
 800cf48:	bf38      	it	cc
 800cf4a:	461d      	movcc	r5, r3
 800cf4c:	0553      	lsls	r3, r2, #21
 800cf4e:	d531      	bpl.n	800cfb4 <__ssputs_r+0xa0>
 800cf50:	4629      	mov	r1, r5
 800cf52:	f000 fb47 	bl	800d5e4 <_malloc_r>
 800cf56:	4606      	mov	r6, r0
 800cf58:	b950      	cbnz	r0, 800cf70 <__ssputs_r+0x5c>
 800cf5a:	230c      	movs	r3, #12
 800cf5c:	f8ca 3000 	str.w	r3, [sl]
 800cf60:	89a3      	ldrh	r3, [r4, #12]
 800cf62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf66:	81a3      	strh	r3, [r4, #12]
 800cf68:	f04f 30ff 	mov.w	r0, #4294967295
 800cf6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf70:	6921      	ldr	r1, [r4, #16]
 800cf72:	464a      	mov	r2, r9
 800cf74:	f000 fabe 	bl	800d4f4 <memcpy>
 800cf78:	89a3      	ldrh	r3, [r4, #12]
 800cf7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf82:	81a3      	strh	r3, [r4, #12]
 800cf84:	6126      	str	r6, [r4, #16]
 800cf86:	6165      	str	r5, [r4, #20]
 800cf88:	444e      	add	r6, r9
 800cf8a:	eba5 0509 	sub.w	r5, r5, r9
 800cf8e:	6026      	str	r6, [r4, #0]
 800cf90:	60a5      	str	r5, [r4, #8]
 800cf92:	463e      	mov	r6, r7
 800cf94:	42be      	cmp	r6, r7
 800cf96:	d900      	bls.n	800cf9a <__ssputs_r+0x86>
 800cf98:	463e      	mov	r6, r7
 800cf9a:	4632      	mov	r2, r6
 800cf9c:	6820      	ldr	r0, [r4, #0]
 800cf9e:	4641      	mov	r1, r8
 800cfa0:	f000 fab6 	bl	800d510 <memmove>
 800cfa4:	68a3      	ldr	r3, [r4, #8]
 800cfa6:	6822      	ldr	r2, [r4, #0]
 800cfa8:	1b9b      	subs	r3, r3, r6
 800cfaa:	4432      	add	r2, r6
 800cfac:	60a3      	str	r3, [r4, #8]
 800cfae:	6022      	str	r2, [r4, #0]
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	e7db      	b.n	800cf6c <__ssputs_r+0x58>
 800cfb4:	462a      	mov	r2, r5
 800cfb6:	f000 fb6f 	bl	800d698 <_realloc_r>
 800cfba:	4606      	mov	r6, r0
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	d1e1      	bne.n	800cf84 <__ssputs_r+0x70>
 800cfc0:	6921      	ldr	r1, [r4, #16]
 800cfc2:	4650      	mov	r0, sl
 800cfc4:	f000 fabe 	bl	800d544 <_free_r>
 800cfc8:	e7c7      	b.n	800cf5a <__ssputs_r+0x46>
	...

0800cfcc <_svfiprintf_r>:
 800cfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd0:	4698      	mov	r8, r3
 800cfd2:	898b      	ldrh	r3, [r1, #12]
 800cfd4:	061b      	lsls	r3, r3, #24
 800cfd6:	b09d      	sub	sp, #116	; 0x74
 800cfd8:	4607      	mov	r7, r0
 800cfda:	460d      	mov	r5, r1
 800cfdc:	4614      	mov	r4, r2
 800cfde:	d50e      	bpl.n	800cffe <_svfiprintf_r+0x32>
 800cfe0:	690b      	ldr	r3, [r1, #16]
 800cfe2:	b963      	cbnz	r3, 800cffe <_svfiprintf_r+0x32>
 800cfe4:	2140      	movs	r1, #64	; 0x40
 800cfe6:	f000 fafd 	bl	800d5e4 <_malloc_r>
 800cfea:	6028      	str	r0, [r5, #0]
 800cfec:	6128      	str	r0, [r5, #16]
 800cfee:	b920      	cbnz	r0, 800cffa <_svfiprintf_r+0x2e>
 800cff0:	230c      	movs	r3, #12
 800cff2:	603b      	str	r3, [r7, #0]
 800cff4:	f04f 30ff 	mov.w	r0, #4294967295
 800cff8:	e0d1      	b.n	800d19e <_svfiprintf_r+0x1d2>
 800cffa:	2340      	movs	r3, #64	; 0x40
 800cffc:	616b      	str	r3, [r5, #20]
 800cffe:	2300      	movs	r3, #0
 800d000:	9309      	str	r3, [sp, #36]	; 0x24
 800d002:	2320      	movs	r3, #32
 800d004:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d008:	f8cd 800c 	str.w	r8, [sp, #12]
 800d00c:	2330      	movs	r3, #48	; 0x30
 800d00e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d1b8 <_svfiprintf_r+0x1ec>
 800d012:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d016:	f04f 0901 	mov.w	r9, #1
 800d01a:	4623      	mov	r3, r4
 800d01c:	469a      	mov	sl, r3
 800d01e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d022:	b10a      	cbz	r2, 800d028 <_svfiprintf_r+0x5c>
 800d024:	2a25      	cmp	r2, #37	; 0x25
 800d026:	d1f9      	bne.n	800d01c <_svfiprintf_r+0x50>
 800d028:	ebba 0b04 	subs.w	fp, sl, r4
 800d02c:	d00b      	beq.n	800d046 <_svfiprintf_r+0x7a>
 800d02e:	465b      	mov	r3, fp
 800d030:	4622      	mov	r2, r4
 800d032:	4629      	mov	r1, r5
 800d034:	4638      	mov	r0, r7
 800d036:	f7ff ff6d 	bl	800cf14 <__ssputs_r>
 800d03a:	3001      	adds	r0, #1
 800d03c:	f000 80aa 	beq.w	800d194 <_svfiprintf_r+0x1c8>
 800d040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d042:	445a      	add	r2, fp
 800d044:	9209      	str	r2, [sp, #36]	; 0x24
 800d046:	f89a 3000 	ldrb.w	r3, [sl]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f000 80a2 	beq.w	800d194 <_svfiprintf_r+0x1c8>
 800d050:	2300      	movs	r3, #0
 800d052:	f04f 32ff 	mov.w	r2, #4294967295
 800d056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d05a:	f10a 0a01 	add.w	sl, sl, #1
 800d05e:	9304      	str	r3, [sp, #16]
 800d060:	9307      	str	r3, [sp, #28]
 800d062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d066:	931a      	str	r3, [sp, #104]	; 0x68
 800d068:	4654      	mov	r4, sl
 800d06a:	2205      	movs	r2, #5
 800d06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d070:	4851      	ldr	r0, [pc, #324]	; (800d1b8 <_svfiprintf_r+0x1ec>)
 800d072:	f7f3 f935 	bl	80002e0 <memchr>
 800d076:	9a04      	ldr	r2, [sp, #16]
 800d078:	b9d8      	cbnz	r0, 800d0b2 <_svfiprintf_r+0xe6>
 800d07a:	06d0      	lsls	r0, r2, #27
 800d07c:	bf44      	itt	mi
 800d07e:	2320      	movmi	r3, #32
 800d080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d084:	0711      	lsls	r1, r2, #28
 800d086:	bf44      	itt	mi
 800d088:	232b      	movmi	r3, #43	; 0x2b
 800d08a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d08e:	f89a 3000 	ldrb.w	r3, [sl]
 800d092:	2b2a      	cmp	r3, #42	; 0x2a
 800d094:	d015      	beq.n	800d0c2 <_svfiprintf_r+0xf6>
 800d096:	9a07      	ldr	r2, [sp, #28]
 800d098:	4654      	mov	r4, sl
 800d09a:	2000      	movs	r0, #0
 800d09c:	f04f 0c0a 	mov.w	ip, #10
 800d0a0:	4621      	mov	r1, r4
 800d0a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0a6:	3b30      	subs	r3, #48	; 0x30
 800d0a8:	2b09      	cmp	r3, #9
 800d0aa:	d94e      	bls.n	800d14a <_svfiprintf_r+0x17e>
 800d0ac:	b1b0      	cbz	r0, 800d0dc <_svfiprintf_r+0x110>
 800d0ae:	9207      	str	r2, [sp, #28]
 800d0b0:	e014      	b.n	800d0dc <_svfiprintf_r+0x110>
 800d0b2:	eba0 0308 	sub.w	r3, r0, r8
 800d0b6:	fa09 f303 	lsl.w	r3, r9, r3
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	9304      	str	r3, [sp, #16]
 800d0be:	46a2      	mov	sl, r4
 800d0c0:	e7d2      	b.n	800d068 <_svfiprintf_r+0x9c>
 800d0c2:	9b03      	ldr	r3, [sp, #12]
 800d0c4:	1d19      	adds	r1, r3, #4
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	9103      	str	r1, [sp, #12]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	bfbb      	ittet	lt
 800d0ce:	425b      	neglt	r3, r3
 800d0d0:	f042 0202 	orrlt.w	r2, r2, #2
 800d0d4:	9307      	strge	r3, [sp, #28]
 800d0d6:	9307      	strlt	r3, [sp, #28]
 800d0d8:	bfb8      	it	lt
 800d0da:	9204      	strlt	r2, [sp, #16]
 800d0dc:	7823      	ldrb	r3, [r4, #0]
 800d0de:	2b2e      	cmp	r3, #46	; 0x2e
 800d0e0:	d10c      	bne.n	800d0fc <_svfiprintf_r+0x130>
 800d0e2:	7863      	ldrb	r3, [r4, #1]
 800d0e4:	2b2a      	cmp	r3, #42	; 0x2a
 800d0e6:	d135      	bne.n	800d154 <_svfiprintf_r+0x188>
 800d0e8:	9b03      	ldr	r3, [sp, #12]
 800d0ea:	1d1a      	adds	r2, r3, #4
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	9203      	str	r2, [sp, #12]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	bfb8      	it	lt
 800d0f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0f8:	3402      	adds	r4, #2
 800d0fa:	9305      	str	r3, [sp, #20]
 800d0fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d1c8 <_svfiprintf_r+0x1fc>
 800d100:	7821      	ldrb	r1, [r4, #0]
 800d102:	2203      	movs	r2, #3
 800d104:	4650      	mov	r0, sl
 800d106:	f7f3 f8eb 	bl	80002e0 <memchr>
 800d10a:	b140      	cbz	r0, 800d11e <_svfiprintf_r+0x152>
 800d10c:	2340      	movs	r3, #64	; 0x40
 800d10e:	eba0 000a 	sub.w	r0, r0, sl
 800d112:	fa03 f000 	lsl.w	r0, r3, r0
 800d116:	9b04      	ldr	r3, [sp, #16]
 800d118:	4303      	orrs	r3, r0
 800d11a:	3401      	adds	r4, #1
 800d11c:	9304      	str	r3, [sp, #16]
 800d11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d122:	4826      	ldr	r0, [pc, #152]	; (800d1bc <_svfiprintf_r+0x1f0>)
 800d124:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d128:	2206      	movs	r2, #6
 800d12a:	f7f3 f8d9 	bl	80002e0 <memchr>
 800d12e:	2800      	cmp	r0, #0
 800d130:	d038      	beq.n	800d1a4 <_svfiprintf_r+0x1d8>
 800d132:	4b23      	ldr	r3, [pc, #140]	; (800d1c0 <_svfiprintf_r+0x1f4>)
 800d134:	bb1b      	cbnz	r3, 800d17e <_svfiprintf_r+0x1b2>
 800d136:	9b03      	ldr	r3, [sp, #12]
 800d138:	3307      	adds	r3, #7
 800d13a:	f023 0307 	bic.w	r3, r3, #7
 800d13e:	3308      	adds	r3, #8
 800d140:	9303      	str	r3, [sp, #12]
 800d142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d144:	4433      	add	r3, r6
 800d146:	9309      	str	r3, [sp, #36]	; 0x24
 800d148:	e767      	b.n	800d01a <_svfiprintf_r+0x4e>
 800d14a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d14e:	460c      	mov	r4, r1
 800d150:	2001      	movs	r0, #1
 800d152:	e7a5      	b.n	800d0a0 <_svfiprintf_r+0xd4>
 800d154:	2300      	movs	r3, #0
 800d156:	3401      	adds	r4, #1
 800d158:	9305      	str	r3, [sp, #20]
 800d15a:	4619      	mov	r1, r3
 800d15c:	f04f 0c0a 	mov.w	ip, #10
 800d160:	4620      	mov	r0, r4
 800d162:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d166:	3a30      	subs	r2, #48	; 0x30
 800d168:	2a09      	cmp	r2, #9
 800d16a:	d903      	bls.n	800d174 <_svfiprintf_r+0x1a8>
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d0c5      	beq.n	800d0fc <_svfiprintf_r+0x130>
 800d170:	9105      	str	r1, [sp, #20]
 800d172:	e7c3      	b.n	800d0fc <_svfiprintf_r+0x130>
 800d174:	fb0c 2101 	mla	r1, ip, r1, r2
 800d178:	4604      	mov	r4, r0
 800d17a:	2301      	movs	r3, #1
 800d17c:	e7f0      	b.n	800d160 <_svfiprintf_r+0x194>
 800d17e:	ab03      	add	r3, sp, #12
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	462a      	mov	r2, r5
 800d184:	4b0f      	ldr	r3, [pc, #60]	; (800d1c4 <_svfiprintf_r+0x1f8>)
 800d186:	a904      	add	r1, sp, #16
 800d188:	4638      	mov	r0, r7
 800d18a:	f3af 8000 	nop.w
 800d18e:	1c42      	adds	r2, r0, #1
 800d190:	4606      	mov	r6, r0
 800d192:	d1d6      	bne.n	800d142 <_svfiprintf_r+0x176>
 800d194:	89ab      	ldrh	r3, [r5, #12]
 800d196:	065b      	lsls	r3, r3, #25
 800d198:	f53f af2c 	bmi.w	800cff4 <_svfiprintf_r+0x28>
 800d19c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d19e:	b01d      	add	sp, #116	; 0x74
 800d1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1a4:	ab03      	add	r3, sp, #12
 800d1a6:	9300      	str	r3, [sp, #0]
 800d1a8:	462a      	mov	r2, r5
 800d1aa:	4b06      	ldr	r3, [pc, #24]	; (800d1c4 <_svfiprintf_r+0x1f8>)
 800d1ac:	a904      	add	r1, sp, #16
 800d1ae:	4638      	mov	r0, r7
 800d1b0:	f000 f87a 	bl	800d2a8 <_printf_i>
 800d1b4:	e7eb      	b.n	800d18e <_svfiprintf_r+0x1c2>
 800d1b6:	bf00      	nop
 800d1b8:	0800d818 	.word	0x0800d818
 800d1bc:	0800d822 	.word	0x0800d822
 800d1c0:	00000000 	.word	0x00000000
 800d1c4:	0800cf15 	.word	0x0800cf15
 800d1c8:	0800d81e 	.word	0x0800d81e

0800d1cc <_printf_common>:
 800d1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1d0:	4616      	mov	r6, r2
 800d1d2:	4699      	mov	r9, r3
 800d1d4:	688a      	ldr	r2, [r1, #8]
 800d1d6:	690b      	ldr	r3, [r1, #16]
 800d1d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	bfb8      	it	lt
 800d1e0:	4613      	movlt	r3, r2
 800d1e2:	6033      	str	r3, [r6, #0]
 800d1e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1e8:	4607      	mov	r7, r0
 800d1ea:	460c      	mov	r4, r1
 800d1ec:	b10a      	cbz	r2, 800d1f2 <_printf_common+0x26>
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	6033      	str	r3, [r6, #0]
 800d1f2:	6823      	ldr	r3, [r4, #0]
 800d1f4:	0699      	lsls	r1, r3, #26
 800d1f6:	bf42      	ittt	mi
 800d1f8:	6833      	ldrmi	r3, [r6, #0]
 800d1fa:	3302      	addmi	r3, #2
 800d1fc:	6033      	strmi	r3, [r6, #0]
 800d1fe:	6825      	ldr	r5, [r4, #0]
 800d200:	f015 0506 	ands.w	r5, r5, #6
 800d204:	d106      	bne.n	800d214 <_printf_common+0x48>
 800d206:	f104 0a19 	add.w	sl, r4, #25
 800d20a:	68e3      	ldr	r3, [r4, #12]
 800d20c:	6832      	ldr	r2, [r6, #0]
 800d20e:	1a9b      	subs	r3, r3, r2
 800d210:	42ab      	cmp	r3, r5
 800d212:	dc26      	bgt.n	800d262 <_printf_common+0x96>
 800d214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d218:	1e13      	subs	r3, r2, #0
 800d21a:	6822      	ldr	r2, [r4, #0]
 800d21c:	bf18      	it	ne
 800d21e:	2301      	movne	r3, #1
 800d220:	0692      	lsls	r2, r2, #26
 800d222:	d42b      	bmi.n	800d27c <_printf_common+0xb0>
 800d224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d228:	4649      	mov	r1, r9
 800d22a:	4638      	mov	r0, r7
 800d22c:	47c0      	blx	r8
 800d22e:	3001      	adds	r0, #1
 800d230:	d01e      	beq.n	800d270 <_printf_common+0xa4>
 800d232:	6823      	ldr	r3, [r4, #0]
 800d234:	68e5      	ldr	r5, [r4, #12]
 800d236:	6832      	ldr	r2, [r6, #0]
 800d238:	f003 0306 	and.w	r3, r3, #6
 800d23c:	2b04      	cmp	r3, #4
 800d23e:	bf08      	it	eq
 800d240:	1aad      	subeq	r5, r5, r2
 800d242:	68a3      	ldr	r3, [r4, #8]
 800d244:	6922      	ldr	r2, [r4, #16]
 800d246:	bf0c      	ite	eq
 800d248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d24c:	2500      	movne	r5, #0
 800d24e:	4293      	cmp	r3, r2
 800d250:	bfc4      	itt	gt
 800d252:	1a9b      	subgt	r3, r3, r2
 800d254:	18ed      	addgt	r5, r5, r3
 800d256:	2600      	movs	r6, #0
 800d258:	341a      	adds	r4, #26
 800d25a:	42b5      	cmp	r5, r6
 800d25c:	d11a      	bne.n	800d294 <_printf_common+0xc8>
 800d25e:	2000      	movs	r0, #0
 800d260:	e008      	b.n	800d274 <_printf_common+0xa8>
 800d262:	2301      	movs	r3, #1
 800d264:	4652      	mov	r2, sl
 800d266:	4649      	mov	r1, r9
 800d268:	4638      	mov	r0, r7
 800d26a:	47c0      	blx	r8
 800d26c:	3001      	adds	r0, #1
 800d26e:	d103      	bne.n	800d278 <_printf_common+0xac>
 800d270:	f04f 30ff 	mov.w	r0, #4294967295
 800d274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d278:	3501      	adds	r5, #1
 800d27a:	e7c6      	b.n	800d20a <_printf_common+0x3e>
 800d27c:	18e1      	adds	r1, r4, r3
 800d27e:	1c5a      	adds	r2, r3, #1
 800d280:	2030      	movs	r0, #48	; 0x30
 800d282:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d286:	4422      	add	r2, r4
 800d288:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d28c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d290:	3302      	adds	r3, #2
 800d292:	e7c7      	b.n	800d224 <_printf_common+0x58>
 800d294:	2301      	movs	r3, #1
 800d296:	4622      	mov	r2, r4
 800d298:	4649      	mov	r1, r9
 800d29a:	4638      	mov	r0, r7
 800d29c:	47c0      	blx	r8
 800d29e:	3001      	adds	r0, #1
 800d2a0:	d0e6      	beq.n	800d270 <_printf_common+0xa4>
 800d2a2:	3601      	adds	r6, #1
 800d2a4:	e7d9      	b.n	800d25a <_printf_common+0x8e>
	...

0800d2a8 <_printf_i>:
 800d2a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2ac:	460c      	mov	r4, r1
 800d2ae:	4691      	mov	r9, r2
 800d2b0:	7e27      	ldrb	r7, [r4, #24]
 800d2b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d2b4:	2f78      	cmp	r7, #120	; 0x78
 800d2b6:	4680      	mov	r8, r0
 800d2b8:	469a      	mov	sl, r3
 800d2ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2be:	d807      	bhi.n	800d2d0 <_printf_i+0x28>
 800d2c0:	2f62      	cmp	r7, #98	; 0x62
 800d2c2:	d80a      	bhi.n	800d2da <_printf_i+0x32>
 800d2c4:	2f00      	cmp	r7, #0
 800d2c6:	f000 80d8 	beq.w	800d47a <_printf_i+0x1d2>
 800d2ca:	2f58      	cmp	r7, #88	; 0x58
 800d2cc:	f000 80a3 	beq.w	800d416 <_printf_i+0x16e>
 800d2d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d2d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2d8:	e03a      	b.n	800d350 <_printf_i+0xa8>
 800d2da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2de:	2b15      	cmp	r3, #21
 800d2e0:	d8f6      	bhi.n	800d2d0 <_printf_i+0x28>
 800d2e2:	a001      	add	r0, pc, #4	; (adr r0, 800d2e8 <_printf_i+0x40>)
 800d2e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d2e8:	0800d341 	.word	0x0800d341
 800d2ec:	0800d355 	.word	0x0800d355
 800d2f0:	0800d2d1 	.word	0x0800d2d1
 800d2f4:	0800d2d1 	.word	0x0800d2d1
 800d2f8:	0800d2d1 	.word	0x0800d2d1
 800d2fc:	0800d2d1 	.word	0x0800d2d1
 800d300:	0800d355 	.word	0x0800d355
 800d304:	0800d2d1 	.word	0x0800d2d1
 800d308:	0800d2d1 	.word	0x0800d2d1
 800d30c:	0800d2d1 	.word	0x0800d2d1
 800d310:	0800d2d1 	.word	0x0800d2d1
 800d314:	0800d461 	.word	0x0800d461
 800d318:	0800d385 	.word	0x0800d385
 800d31c:	0800d443 	.word	0x0800d443
 800d320:	0800d2d1 	.word	0x0800d2d1
 800d324:	0800d2d1 	.word	0x0800d2d1
 800d328:	0800d483 	.word	0x0800d483
 800d32c:	0800d2d1 	.word	0x0800d2d1
 800d330:	0800d385 	.word	0x0800d385
 800d334:	0800d2d1 	.word	0x0800d2d1
 800d338:	0800d2d1 	.word	0x0800d2d1
 800d33c:	0800d44b 	.word	0x0800d44b
 800d340:	680b      	ldr	r3, [r1, #0]
 800d342:	1d1a      	adds	r2, r3, #4
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	600a      	str	r2, [r1, #0]
 800d348:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d34c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d350:	2301      	movs	r3, #1
 800d352:	e0a3      	b.n	800d49c <_printf_i+0x1f4>
 800d354:	6825      	ldr	r5, [r4, #0]
 800d356:	6808      	ldr	r0, [r1, #0]
 800d358:	062e      	lsls	r6, r5, #24
 800d35a:	f100 0304 	add.w	r3, r0, #4
 800d35e:	d50a      	bpl.n	800d376 <_printf_i+0xce>
 800d360:	6805      	ldr	r5, [r0, #0]
 800d362:	600b      	str	r3, [r1, #0]
 800d364:	2d00      	cmp	r5, #0
 800d366:	da03      	bge.n	800d370 <_printf_i+0xc8>
 800d368:	232d      	movs	r3, #45	; 0x2d
 800d36a:	426d      	negs	r5, r5
 800d36c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d370:	485e      	ldr	r0, [pc, #376]	; (800d4ec <_printf_i+0x244>)
 800d372:	230a      	movs	r3, #10
 800d374:	e019      	b.n	800d3aa <_printf_i+0x102>
 800d376:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d37a:	6805      	ldr	r5, [r0, #0]
 800d37c:	600b      	str	r3, [r1, #0]
 800d37e:	bf18      	it	ne
 800d380:	b22d      	sxthne	r5, r5
 800d382:	e7ef      	b.n	800d364 <_printf_i+0xbc>
 800d384:	680b      	ldr	r3, [r1, #0]
 800d386:	6825      	ldr	r5, [r4, #0]
 800d388:	1d18      	adds	r0, r3, #4
 800d38a:	6008      	str	r0, [r1, #0]
 800d38c:	0628      	lsls	r0, r5, #24
 800d38e:	d501      	bpl.n	800d394 <_printf_i+0xec>
 800d390:	681d      	ldr	r5, [r3, #0]
 800d392:	e002      	b.n	800d39a <_printf_i+0xf2>
 800d394:	0669      	lsls	r1, r5, #25
 800d396:	d5fb      	bpl.n	800d390 <_printf_i+0xe8>
 800d398:	881d      	ldrh	r5, [r3, #0]
 800d39a:	4854      	ldr	r0, [pc, #336]	; (800d4ec <_printf_i+0x244>)
 800d39c:	2f6f      	cmp	r7, #111	; 0x6f
 800d39e:	bf0c      	ite	eq
 800d3a0:	2308      	moveq	r3, #8
 800d3a2:	230a      	movne	r3, #10
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3aa:	6866      	ldr	r6, [r4, #4]
 800d3ac:	60a6      	str	r6, [r4, #8]
 800d3ae:	2e00      	cmp	r6, #0
 800d3b0:	bfa2      	ittt	ge
 800d3b2:	6821      	ldrge	r1, [r4, #0]
 800d3b4:	f021 0104 	bicge.w	r1, r1, #4
 800d3b8:	6021      	strge	r1, [r4, #0]
 800d3ba:	b90d      	cbnz	r5, 800d3c0 <_printf_i+0x118>
 800d3bc:	2e00      	cmp	r6, #0
 800d3be:	d04d      	beq.n	800d45c <_printf_i+0x1b4>
 800d3c0:	4616      	mov	r6, r2
 800d3c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d3c6:	fb03 5711 	mls	r7, r3, r1, r5
 800d3ca:	5dc7      	ldrb	r7, [r0, r7]
 800d3cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d3d0:	462f      	mov	r7, r5
 800d3d2:	42bb      	cmp	r3, r7
 800d3d4:	460d      	mov	r5, r1
 800d3d6:	d9f4      	bls.n	800d3c2 <_printf_i+0x11a>
 800d3d8:	2b08      	cmp	r3, #8
 800d3da:	d10b      	bne.n	800d3f4 <_printf_i+0x14c>
 800d3dc:	6823      	ldr	r3, [r4, #0]
 800d3de:	07df      	lsls	r7, r3, #31
 800d3e0:	d508      	bpl.n	800d3f4 <_printf_i+0x14c>
 800d3e2:	6923      	ldr	r3, [r4, #16]
 800d3e4:	6861      	ldr	r1, [r4, #4]
 800d3e6:	4299      	cmp	r1, r3
 800d3e8:	bfde      	ittt	le
 800d3ea:	2330      	movle	r3, #48	; 0x30
 800d3ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3f4:	1b92      	subs	r2, r2, r6
 800d3f6:	6122      	str	r2, [r4, #16]
 800d3f8:	f8cd a000 	str.w	sl, [sp]
 800d3fc:	464b      	mov	r3, r9
 800d3fe:	aa03      	add	r2, sp, #12
 800d400:	4621      	mov	r1, r4
 800d402:	4640      	mov	r0, r8
 800d404:	f7ff fee2 	bl	800d1cc <_printf_common>
 800d408:	3001      	adds	r0, #1
 800d40a:	d14c      	bne.n	800d4a6 <_printf_i+0x1fe>
 800d40c:	f04f 30ff 	mov.w	r0, #4294967295
 800d410:	b004      	add	sp, #16
 800d412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d416:	4835      	ldr	r0, [pc, #212]	; (800d4ec <_printf_i+0x244>)
 800d418:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d41c:	6823      	ldr	r3, [r4, #0]
 800d41e:	680e      	ldr	r6, [r1, #0]
 800d420:	061f      	lsls	r7, r3, #24
 800d422:	f856 5b04 	ldr.w	r5, [r6], #4
 800d426:	600e      	str	r6, [r1, #0]
 800d428:	d514      	bpl.n	800d454 <_printf_i+0x1ac>
 800d42a:	07d9      	lsls	r1, r3, #31
 800d42c:	bf44      	itt	mi
 800d42e:	f043 0320 	orrmi.w	r3, r3, #32
 800d432:	6023      	strmi	r3, [r4, #0]
 800d434:	b91d      	cbnz	r5, 800d43e <_printf_i+0x196>
 800d436:	6823      	ldr	r3, [r4, #0]
 800d438:	f023 0320 	bic.w	r3, r3, #32
 800d43c:	6023      	str	r3, [r4, #0]
 800d43e:	2310      	movs	r3, #16
 800d440:	e7b0      	b.n	800d3a4 <_printf_i+0xfc>
 800d442:	6823      	ldr	r3, [r4, #0]
 800d444:	f043 0320 	orr.w	r3, r3, #32
 800d448:	6023      	str	r3, [r4, #0]
 800d44a:	2378      	movs	r3, #120	; 0x78
 800d44c:	4828      	ldr	r0, [pc, #160]	; (800d4f0 <_printf_i+0x248>)
 800d44e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d452:	e7e3      	b.n	800d41c <_printf_i+0x174>
 800d454:	065e      	lsls	r6, r3, #25
 800d456:	bf48      	it	mi
 800d458:	b2ad      	uxthmi	r5, r5
 800d45a:	e7e6      	b.n	800d42a <_printf_i+0x182>
 800d45c:	4616      	mov	r6, r2
 800d45e:	e7bb      	b.n	800d3d8 <_printf_i+0x130>
 800d460:	680b      	ldr	r3, [r1, #0]
 800d462:	6826      	ldr	r6, [r4, #0]
 800d464:	6960      	ldr	r0, [r4, #20]
 800d466:	1d1d      	adds	r5, r3, #4
 800d468:	600d      	str	r5, [r1, #0]
 800d46a:	0635      	lsls	r5, r6, #24
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	d501      	bpl.n	800d474 <_printf_i+0x1cc>
 800d470:	6018      	str	r0, [r3, #0]
 800d472:	e002      	b.n	800d47a <_printf_i+0x1d2>
 800d474:	0671      	lsls	r1, r6, #25
 800d476:	d5fb      	bpl.n	800d470 <_printf_i+0x1c8>
 800d478:	8018      	strh	r0, [r3, #0]
 800d47a:	2300      	movs	r3, #0
 800d47c:	6123      	str	r3, [r4, #16]
 800d47e:	4616      	mov	r6, r2
 800d480:	e7ba      	b.n	800d3f8 <_printf_i+0x150>
 800d482:	680b      	ldr	r3, [r1, #0]
 800d484:	1d1a      	adds	r2, r3, #4
 800d486:	600a      	str	r2, [r1, #0]
 800d488:	681e      	ldr	r6, [r3, #0]
 800d48a:	6862      	ldr	r2, [r4, #4]
 800d48c:	2100      	movs	r1, #0
 800d48e:	4630      	mov	r0, r6
 800d490:	f7f2 ff26 	bl	80002e0 <memchr>
 800d494:	b108      	cbz	r0, 800d49a <_printf_i+0x1f2>
 800d496:	1b80      	subs	r0, r0, r6
 800d498:	6060      	str	r0, [r4, #4]
 800d49a:	6863      	ldr	r3, [r4, #4]
 800d49c:	6123      	str	r3, [r4, #16]
 800d49e:	2300      	movs	r3, #0
 800d4a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4a4:	e7a8      	b.n	800d3f8 <_printf_i+0x150>
 800d4a6:	6923      	ldr	r3, [r4, #16]
 800d4a8:	4632      	mov	r2, r6
 800d4aa:	4649      	mov	r1, r9
 800d4ac:	4640      	mov	r0, r8
 800d4ae:	47d0      	blx	sl
 800d4b0:	3001      	adds	r0, #1
 800d4b2:	d0ab      	beq.n	800d40c <_printf_i+0x164>
 800d4b4:	6823      	ldr	r3, [r4, #0]
 800d4b6:	079b      	lsls	r3, r3, #30
 800d4b8:	d413      	bmi.n	800d4e2 <_printf_i+0x23a>
 800d4ba:	68e0      	ldr	r0, [r4, #12]
 800d4bc:	9b03      	ldr	r3, [sp, #12]
 800d4be:	4298      	cmp	r0, r3
 800d4c0:	bfb8      	it	lt
 800d4c2:	4618      	movlt	r0, r3
 800d4c4:	e7a4      	b.n	800d410 <_printf_i+0x168>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	4632      	mov	r2, r6
 800d4ca:	4649      	mov	r1, r9
 800d4cc:	4640      	mov	r0, r8
 800d4ce:	47d0      	blx	sl
 800d4d0:	3001      	adds	r0, #1
 800d4d2:	d09b      	beq.n	800d40c <_printf_i+0x164>
 800d4d4:	3501      	adds	r5, #1
 800d4d6:	68e3      	ldr	r3, [r4, #12]
 800d4d8:	9903      	ldr	r1, [sp, #12]
 800d4da:	1a5b      	subs	r3, r3, r1
 800d4dc:	42ab      	cmp	r3, r5
 800d4de:	dcf2      	bgt.n	800d4c6 <_printf_i+0x21e>
 800d4e0:	e7eb      	b.n	800d4ba <_printf_i+0x212>
 800d4e2:	2500      	movs	r5, #0
 800d4e4:	f104 0619 	add.w	r6, r4, #25
 800d4e8:	e7f5      	b.n	800d4d6 <_printf_i+0x22e>
 800d4ea:	bf00      	nop
 800d4ec:	0800d829 	.word	0x0800d829
 800d4f0:	0800d83a 	.word	0x0800d83a

0800d4f4 <memcpy>:
 800d4f4:	440a      	add	r2, r1
 800d4f6:	4291      	cmp	r1, r2
 800d4f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4fc:	d100      	bne.n	800d500 <memcpy+0xc>
 800d4fe:	4770      	bx	lr
 800d500:	b510      	push	{r4, lr}
 800d502:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d50a:	4291      	cmp	r1, r2
 800d50c:	d1f9      	bne.n	800d502 <memcpy+0xe>
 800d50e:	bd10      	pop	{r4, pc}

0800d510 <memmove>:
 800d510:	4288      	cmp	r0, r1
 800d512:	b510      	push	{r4, lr}
 800d514:	eb01 0402 	add.w	r4, r1, r2
 800d518:	d902      	bls.n	800d520 <memmove+0x10>
 800d51a:	4284      	cmp	r4, r0
 800d51c:	4623      	mov	r3, r4
 800d51e:	d807      	bhi.n	800d530 <memmove+0x20>
 800d520:	1e43      	subs	r3, r0, #1
 800d522:	42a1      	cmp	r1, r4
 800d524:	d008      	beq.n	800d538 <memmove+0x28>
 800d526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d52a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d52e:	e7f8      	b.n	800d522 <memmove+0x12>
 800d530:	4402      	add	r2, r0
 800d532:	4601      	mov	r1, r0
 800d534:	428a      	cmp	r2, r1
 800d536:	d100      	bne.n	800d53a <memmove+0x2a>
 800d538:	bd10      	pop	{r4, pc}
 800d53a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d53e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d542:	e7f7      	b.n	800d534 <memmove+0x24>

0800d544 <_free_r>:
 800d544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d546:	2900      	cmp	r1, #0
 800d548:	d048      	beq.n	800d5dc <_free_r+0x98>
 800d54a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d54e:	9001      	str	r0, [sp, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	f1a1 0404 	sub.w	r4, r1, #4
 800d556:	bfb8      	it	lt
 800d558:	18e4      	addlt	r4, r4, r3
 800d55a:	f000 f8d3 	bl	800d704 <__malloc_lock>
 800d55e:	4a20      	ldr	r2, [pc, #128]	; (800d5e0 <_free_r+0x9c>)
 800d560:	9801      	ldr	r0, [sp, #4]
 800d562:	6813      	ldr	r3, [r2, #0]
 800d564:	4615      	mov	r5, r2
 800d566:	b933      	cbnz	r3, 800d576 <_free_r+0x32>
 800d568:	6063      	str	r3, [r4, #4]
 800d56a:	6014      	str	r4, [r2, #0]
 800d56c:	b003      	add	sp, #12
 800d56e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d572:	f000 b8cd 	b.w	800d710 <__malloc_unlock>
 800d576:	42a3      	cmp	r3, r4
 800d578:	d90b      	bls.n	800d592 <_free_r+0x4e>
 800d57a:	6821      	ldr	r1, [r4, #0]
 800d57c:	1862      	adds	r2, r4, r1
 800d57e:	4293      	cmp	r3, r2
 800d580:	bf04      	itt	eq
 800d582:	681a      	ldreq	r2, [r3, #0]
 800d584:	685b      	ldreq	r3, [r3, #4]
 800d586:	6063      	str	r3, [r4, #4]
 800d588:	bf04      	itt	eq
 800d58a:	1852      	addeq	r2, r2, r1
 800d58c:	6022      	streq	r2, [r4, #0]
 800d58e:	602c      	str	r4, [r5, #0]
 800d590:	e7ec      	b.n	800d56c <_free_r+0x28>
 800d592:	461a      	mov	r2, r3
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	b10b      	cbz	r3, 800d59c <_free_r+0x58>
 800d598:	42a3      	cmp	r3, r4
 800d59a:	d9fa      	bls.n	800d592 <_free_r+0x4e>
 800d59c:	6811      	ldr	r1, [r2, #0]
 800d59e:	1855      	adds	r5, r2, r1
 800d5a0:	42a5      	cmp	r5, r4
 800d5a2:	d10b      	bne.n	800d5bc <_free_r+0x78>
 800d5a4:	6824      	ldr	r4, [r4, #0]
 800d5a6:	4421      	add	r1, r4
 800d5a8:	1854      	adds	r4, r2, r1
 800d5aa:	42a3      	cmp	r3, r4
 800d5ac:	6011      	str	r1, [r2, #0]
 800d5ae:	d1dd      	bne.n	800d56c <_free_r+0x28>
 800d5b0:	681c      	ldr	r4, [r3, #0]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	6053      	str	r3, [r2, #4]
 800d5b6:	4421      	add	r1, r4
 800d5b8:	6011      	str	r1, [r2, #0]
 800d5ba:	e7d7      	b.n	800d56c <_free_r+0x28>
 800d5bc:	d902      	bls.n	800d5c4 <_free_r+0x80>
 800d5be:	230c      	movs	r3, #12
 800d5c0:	6003      	str	r3, [r0, #0]
 800d5c2:	e7d3      	b.n	800d56c <_free_r+0x28>
 800d5c4:	6825      	ldr	r5, [r4, #0]
 800d5c6:	1961      	adds	r1, r4, r5
 800d5c8:	428b      	cmp	r3, r1
 800d5ca:	bf04      	itt	eq
 800d5cc:	6819      	ldreq	r1, [r3, #0]
 800d5ce:	685b      	ldreq	r3, [r3, #4]
 800d5d0:	6063      	str	r3, [r4, #4]
 800d5d2:	bf04      	itt	eq
 800d5d4:	1949      	addeq	r1, r1, r5
 800d5d6:	6021      	streq	r1, [r4, #0]
 800d5d8:	6054      	str	r4, [r2, #4]
 800d5da:	e7c7      	b.n	800d56c <_free_r+0x28>
 800d5dc:	b003      	add	sp, #12
 800d5de:	bd30      	pop	{r4, r5, pc}
 800d5e0:	2400010c 	.word	0x2400010c

0800d5e4 <_malloc_r>:
 800d5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e6:	1ccd      	adds	r5, r1, #3
 800d5e8:	f025 0503 	bic.w	r5, r5, #3
 800d5ec:	3508      	adds	r5, #8
 800d5ee:	2d0c      	cmp	r5, #12
 800d5f0:	bf38      	it	cc
 800d5f2:	250c      	movcc	r5, #12
 800d5f4:	2d00      	cmp	r5, #0
 800d5f6:	4606      	mov	r6, r0
 800d5f8:	db01      	blt.n	800d5fe <_malloc_r+0x1a>
 800d5fa:	42a9      	cmp	r1, r5
 800d5fc:	d903      	bls.n	800d606 <_malloc_r+0x22>
 800d5fe:	230c      	movs	r3, #12
 800d600:	6033      	str	r3, [r6, #0]
 800d602:	2000      	movs	r0, #0
 800d604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d606:	f000 f87d 	bl	800d704 <__malloc_lock>
 800d60a:	4921      	ldr	r1, [pc, #132]	; (800d690 <_malloc_r+0xac>)
 800d60c:	680a      	ldr	r2, [r1, #0]
 800d60e:	4614      	mov	r4, r2
 800d610:	b99c      	cbnz	r4, 800d63a <_malloc_r+0x56>
 800d612:	4f20      	ldr	r7, [pc, #128]	; (800d694 <_malloc_r+0xb0>)
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	b923      	cbnz	r3, 800d622 <_malloc_r+0x3e>
 800d618:	4621      	mov	r1, r4
 800d61a:	4630      	mov	r0, r6
 800d61c:	f000 f862 	bl	800d6e4 <_sbrk_r>
 800d620:	6038      	str	r0, [r7, #0]
 800d622:	4629      	mov	r1, r5
 800d624:	4630      	mov	r0, r6
 800d626:	f000 f85d 	bl	800d6e4 <_sbrk_r>
 800d62a:	1c43      	adds	r3, r0, #1
 800d62c:	d123      	bne.n	800d676 <_malloc_r+0x92>
 800d62e:	230c      	movs	r3, #12
 800d630:	6033      	str	r3, [r6, #0]
 800d632:	4630      	mov	r0, r6
 800d634:	f000 f86c 	bl	800d710 <__malloc_unlock>
 800d638:	e7e3      	b.n	800d602 <_malloc_r+0x1e>
 800d63a:	6823      	ldr	r3, [r4, #0]
 800d63c:	1b5b      	subs	r3, r3, r5
 800d63e:	d417      	bmi.n	800d670 <_malloc_r+0x8c>
 800d640:	2b0b      	cmp	r3, #11
 800d642:	d903      	bls.n	800d64c <_malloc_r+0x68>
 800d644:	6023      	str	r3, [r4, #0]
 800d646:	441c      	add	r4, r3
 800d648:	6025      	str	r5, [r4, #0]
 800d64a:	e004      	b.n	800d656 <_malloc_r+0x72>
 800d64c:	6863      	ldr	r3, [r4, #4]
 800d64e:	42a2      	cmp	r2, r4
 800d650:	bf0c      	ite	eq
 800d652:	600b      	streq	r3, [r1, #0]
 800d654:	6053      	strne	r3, [r2, #4]
 800d656:	4630      	mov	r0, r6
 800d658:	f000 f85a 	bl	800d710 <__malloc_unlock>
 800d65c:	f104 000b 	add.w	r0, r4, #11
 800d660:	1d23      	adds	r3, r4, #4
 800d662:	f020 0007 	bic.w	r0, r0, #7
 800d666:	1ac2      	subs	r2, r0, r3
 800d668:	d0cc      	beq.n	800d604 <_malloc_r+0x20>
 800d66a:	1a1b      	subs	r3, r3, r0
 800d66c:	50a3      	str	r3, [r4, r2]
 800d66e:	e7c9      	b.n	800d604 <_malloc_r+0x20>
 800d670:	4622      	mov	r2, r4
 800d672:	6864      	ldr	r4, [r4, #4]
 800d674:	e7cc      	b.n	800d610 <_malloc_r+0x2c>
 800d676:	1cc4      	adds	r4, r0, #3
 800d678:	f024 0403 	bic.w	r4, r4, #3
 800d67c:	42a0      	cmp	r0, r4
 800d67e:	d0e3      	beq.n	800d648 <_malloc_r+0x64>
 800d680:	1a21      	subs	r1, r4, r0
 800d682:	4630      	mov	r0, r6
 800d684:	f000 f82e 	bl	800d6e4 <_sbrk_r>
 800d688:	3001      	adds	r0, #1
 800d68a:	d1dd      	bne.n	800d648 <_malloc_r+0x64>
 800d68c:	e7cf      	b.n	800d62e <_malloc_r+0x4a>
 800d68e:	bf00      	nop
 800d690:	2400010c 	.word	0x2400010c
 800d694:	24000110 	.word	0x24000110

0800d698 <_realloc_r>:
 800d698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69a:	4607      	mov	r7, r0
 800d69c:	4614      	mov	r4, r2
 800d69e:	460e      	mov	r6, r1
 800d6a0:	b921      	cbnz	r1, 800d6ac <_realloc_r+0x14>
 800d6a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d6a6:	4611      	mov	r1, r2
 800d6a8:	f7ff bf9c 	b.w	800d5e4 <_malloc_r>
 800d6ac:	b922      	cbnz	r2, 800d6b8 <_realloc_r+0x20>
 800d6ae:	f7ff ff49 	bl	800d544 <_free_r>
 800d6b2:	4625      	mov	r5, r4
 800d6b4:	4628      	mov	r0, r5
 800d6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6b8:	f000 f830 	bl	800d71c <_malloc_usable_size_r>
 800d6bc:	42a0      	cmp	r0, r4
 800d6be:	d20f      	bcs.n	800d6e0 <_realloc_r+0x48>
 800d6c0:	4621      	mov	r1, r4
 800d6c2:	4638      	mov	r0, r7
 800d6c4:	f7ff ff8e 	bl	800d5e4 <_malloc_r>
 800d6c8:	4605      	mov	r5, r0
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	d0f2      	beq.n	800d6b4 <_realloc_r+0x1c>
 800d6ce:	4631      	mov	r1, r6
 800d6d0:	4622      	mov	r2, r4
 800d6d2:	f7ff ff0f 	bl	800d4f4 <memcpy>
 800d6d6:	4631      	mov	r1, r6
 800d6d8:	4638      	mov	r0, r7
 800d6da:	f7ff ff33 	bl	800d544 <_free_r>
 800d6de:	e7e9      	b.n	800d6b4 <_realloc_r+0x1c>
 800d6e0:	4635      	mov	r5, r6
 800d6e2:	e7e7      	b.n	800d6b4 <_realloc_r+0x1c>

0800d6e4 <_sbrk_r>:
 800d6e4:	b538      	push	{r3, r4, r5, lr}
 800d6e6:	4d06      	ldr	r5, [pc, #24]	; (800d700 <_sbrk_r+0x1c>)
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	4608      	mov	r0, r1
 800d6ee:	602b      	str	r3, [r5, #0]
 800d6f0:	f7f4 fc32 	bl	8001f58 <_sbrk>
 800d6f4:	1c43      	adds	r3, r0, #1
 800d6f6:	d102      	bne.n	800d6fe <_sbrk_r+0x1a>
 800d6f8:	682b      	ldr	r3, [r5, #0]
 800d6fa:	b103      	cbz	r3, 800d6fe <_sbrk_r+0x1a>
 800d6fc:	6023      	str	r3, [r4, #0]
 800d6fe:	bd38      	pop	{r3, r4, r5, pc}
 800d700:	24000830 	.word	0x24000830

0800d704 <__malloc_lock>:
 800d704:	4801      	ldr	r0, [pc, #4]	; (800d70c <__malloc_lock+0x8>)
 800d706:	f000 b811 	b.w	800d72c <__retarget_lock_acquire_recursive>
 800d70a:	bf00      	nop
 800d70c:	24000838 	.word	0x24000838

0800d710 <__malloc_unlock>:
 800d710:	4801      	ldr	r0, [pc, #4]	; (800d718 <__malloc_unlock+0x8>)
 800d712:	f000 b80c 	b.w	800d72e <__retarget_lock_release_recursive>
 800d716:	bf00      	nop
 800d718:	24000838 	.word	0x24000838

0800d71c <_malloc_usable_size_r>:
 800d71c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d720:	1f18      	subs	r0, r3, #4
 800d722:	2b00      	cmp	r3, #0
 800d724:	bfbc      	itt	lt
 800d726:	580b      	ldrlt	r3, [r1, r0]
 800d728:	18c0      	addlt	r0, r0, r3
 800d72a:	4770      	bx	lr

0800d72c <__retarget_lock_acquire_recursive>:
 800d72c:	4770      	bx	lr

0800d72e <__retarget_lock_release_recursive>:
 800d72e:	4770      	bx	lr

0800d730 <_init>:
 800d730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d732:	bf00      	nop
 800d734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d736:	bc08      	pop	{r3}
 800d738:	469e      	mov	lr, r3
 800d73a:	4770      	bx	lr

0800d73c <_fini>:
 800d73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73e:	bf00      	nop
 800d740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d742:	bc08      	pop	{r3}
 800d744:	469e      	mov	lr, r3
 800d746:	4770      	bx	lr
